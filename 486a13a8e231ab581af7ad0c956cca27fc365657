{
  "comments": [
    {
      "key": {
        "uuid": "f27cb3a3_192b9a49",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-04-19T01:46:13Z",
      "side": 1,
      "message": "This comment applies to the code now on line 223 so should be moved with that code (the code that is for PROCESS_TYPE_CREATION_ATTR)",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "064ca042_0dca4c39",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 215,
      "author": {
        "id": 846
      },
      "writtenOn": "2021-04-19T07:52:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f27cb3a3_192b9a49",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d710d7a3_98ac4e9c",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-04-19T00:26:12Z",
      "side": 1,
      "message": "Please hold off on submitting this as I want to review more closely because of the difference between gdb\u0027s environment and the inferior\u0027s environment.",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a4a52d6_6cd0c392",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 846
      },
      "writtenOn": "2021-04-19T01:23:37Z",
      "side": 1,
      "message": "My thinking is that these attributes concern the launched process which is GDB itself. If we wish to present data relating to the inferior process, we should create another IProcess object to represent the inferior.",
      "parentUuid": "d710d7a3_98ac4e9c",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe0273e8_4c414f94",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-04-19T01:46:13Z",
      "side": 1,
      "message": "I have now had a look - I am fine with this change. Indeed I think it is a great addition. Did you look if the command line was feasible to add too?\n\nI got concerned when I saw the DSF failures, but after looking more closely AFAICT this attribute is only used to populate the Environment part of the gdb processes\u0027 property page - a feature I didn\u0027t know about until now (screenshot for anyone else who is interested https://imgur.com/RqNdO7C.png - the feature was introduced in Eclipse Platform in Bug 285720 - AFAICT it wasn\u0027t included in N\u0026N so perhaps few people ever knew of this feature).",
      "parentUuid": "d710d7a3_98ac4e9c",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4e58730_199568e9",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-04-19T01:49:54Z",
      "side": 1,
      "message": "\u003e My thinking is that these attributes concern the launched process which is GDB itself. If we wish to present data relating to the inferior process, we should create another IProcess object to represent the inferior.\n\nI didn\u0027t see this ^^^ comment until after I submitted mine. I do agree with you, either a new IProcess object, or enable such property pages in the node representing the process in the debug tree.",
      "parentUuid": "fe0273e8_4c414f94",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a065f1ee_0d53fcf6",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 846
      },
      "writtenOn": "2021-04-19T07:52:49Z",
      "side": 1,
      "message": "@Jonah, there are three options to retrieve the GDB command line from the IGDBBackend:\n\n* Promote IGDBBackend.getDebuggerCommandLine() from protected to public. Is this acceptable with an API filter outside a major version change?\n* Add a new public method and deprecate IGDBBackend.getDebuggerCommandLine().\n* Pass the command line as a service property when registering the IGDBBackend service instance in IGDBBackend.doRegisterStep(). This seems distinctly non-DSF in character.\n\nThoughts?",
      "parentUuid": "d4e58730_199568e9",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f971c77a_07889b31",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-04-19T18:03:31Z",
      "side": 1,
      "message": "I provide a 4th option - implement the new info API in Java Process? https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ProcessHandle.Info.html\n\nIndeed - if the Platform used that it could deprecate all these special ways of collecting the same info?\n\n---\n\nRegarding your original choices:\n\n\u003e - Promote IGDBBackend.getDebuggerCommandLine() from protected to public. Is this acceptable with an API filter outside a major version change?\n\nNo, this change breaks source compatibility - extenders who are customizing the command line will be broken, at least at source level, if not binary level with a \"reduced visibility\" error. (FWIW I know of at least one extender who overrides that method)\n\n\u003e - Add a new public method and deprecate IGDBBackend.getDebuggerCommandLine().\n\nSeems like best option - but I don\u0027t know if you need to deprecate. Make the new method and comment it something like returns \"user visible command line\".\n\n\u003e - Pass the command line as a service property when registering the IGDBBackend service instance in IGDBBackend.doRegisterStep(). This seems distinctly non-DSF in character.\n\n:-) I agree, so I don\u0027t like it.",
      "parentUuid": "a065f1ee_0d53fcf6",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8c43f84_45dc058f",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 846
      },
      "writtenOn": "2021-04-19T20:45:41Z",
      "side": 1,
      "message": "I would not envisage any difference in behaviour between the existing protected getDebuggerCommandLine() and a new public method, so having both methods available in the long term seems strange. If we go this route, we could discourage extenders from extending the public method.",
      "parentUuid": "f971c77a_07889b31",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12abdff4_6800bc0d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-04-19T01:46:13Z",
      "side": 1,
      "message": "I don\u0027t know why the CI is not showing full stack traces on errors - but this change is definitely breaking tests with stack traces like below when I run locally.\n\n  java.lang.NullPointerException\n\tat org.eclipse.cdt.dsf.gdb.launching.GdbLaunch.addCLIProcess(GdbLaunch.java:222)\n\tat org.eclipse.cdt.dsf.gdb.launching.GdbLaunchDelegate.launchDebugSession(GdbLaunchDelegate.java:219)\n\tat org.eclipse.cdt.dsf.gdb.launching.GdbLaunchDelegate.launchDebugger(GdbLaunchDelegate.java:109)\n\tat org.eclipse.cdt.dsf.gdb.launching.GdbLaunchDelegate.launch(GdbLaunchDelegate.java:97)\n\tat org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:803)\n\tat org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:716)\n\tat org.eclipse.debug.internal.core.LaunchConfiguration.launch(LaunchConfiguration.java:711)\n\tat org.eclipse.cdt.tests.dsf.gdb.framework.BaseTestCase.doLaunchInner(BaseTestCase.java:572)\n\tat org.eclipse.cdt.tests.dsf.gdb.framework.BaseTestCase.doLaunch(BaseTestCase.java:526)\n\tat org.eclipse.cdt.tests.dsf.gdb.framework.BaseTestCase.doBeforeTest(BaseTestCase.java:384)\n\tat org.eclipse.cdt.tests.dsf.gdb.tests.MIRunControlTest.doBeforeTest(MIRunControlTest.java:106)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\tat org.junit.internal.runners.statements.RunBefores.invokeMethod(RunBefores.java:33)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:61)\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat java.base/java.lang.Thread.run(Thread.java:834)",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "438ab0e6_f3e8ba88",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/launching/GdbLaunch.java",
        "patchSetId": 1
      },
      "lineNbr": 222,
      "author": {
        "id": 846
      },
      "writtenOn": "2021-04-19T07:52:49Z",
      "side": 1,
      "message": "Presumably getGDBWorkingDirectory() is returning null within the test. I will accommodate this.",
      "parentUuid": "12abdff4_6800bc0d",
      "revId": "486a13a8e231ab581af7ad0c956cca27fc365657",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}
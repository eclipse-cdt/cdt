{
  "comments": [
    {
      "key": {
        "uuid": "e74f39b5_76a4d729",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 3977,
      "author": {
        "id": 846
      },
      "writtenOn": "2021-08-28T20:08:33Z",
      "side": 1,
      "message": "Is it possible to continue to support callers of this public method during the period of deprecation in any way? By throwing an exception we force callers to modify their code immediately or trigger run-time problems which might not be immediately apparent. For third-party callers this is worse than removing the method entirely which would trigger a build-time problem and at least draw the developer\u0027s attention to the problem.",
      "range": {
        "startLine": 3977,
        "startChar": 2,
        "endLine": 3977,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f46d33f4_87a5ea1a",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 3977,
      "author": {
        "id": 178588
      },
      "writtenOn": "2021-08-29T06:09:18Z",
      "side": 1,
      "message": "Well, the problem is not this method as I wrote in an earlier changeset. If the method body is kept as-is, it would give an impression that the API still exist, but it will lead to nowhere.\nThe problem is that in populateTopMakefile, only one of the maps can be used or there would be duplicated clean targets in the resulting makefile. So, if the method body is kept, how should we decided if we should use the new variant or per directory cleaning?\nAdding a new method that - by default - selects the per directory cleaning is still problematic for extenders and I suppose that we want to move away from the problem with long command lines...?\n\nI agree that it would be better to have the error at build time rather than run time, but that would break the binary API... Is this \"better\" than doing this?",
      "parentUuid": "e74f39b5_76a4d729",
      "range": {
        "startLine": 3977,
        "startChar": 2,
        "endLine": 3977,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5cbf7ea_39a01eef",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 3977,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-09-10T16:24:54Z",
      "side": 1,
      "message": "The API here is so badly specified. Is this method API because extenders can override it or because extenders can call it? Or both. If an extender was expecting their method to be called, there override would no longer be called after this change.\n\nI don\u0027t think this method can be usefully overridden - but that doesn\u0027t exclude such overriddes being out there.\n\nTherefore, can extenders reasonably call this method. The answer is not really.",
      "parentUuid": "f46d33f4_87a5ea1a",
      "range": {
        "startLine": 3977,
        "startChar": 2,
        "endLine": 3977,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14bf9d87_b4a9c6d9",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 3977,
      "author": {
        "id": 178588
      },
      "writtenOn": "2021-09-10T18:00:53Z",
      "side": 1,
      "message": "I think the reason why it\u0027s public is due to the ManagedBuildGnuToolInfo class calls this method. I\u0027m still not sure why this class is not an internal class in the GnuMakefileGenerator class as it\u0027s so tightly coupled together...",
      "parentUuid": "a5cbf7ea_39a01eef",
      "range": {
        "startLine": 3977,
        "startChar": 2,
        "endLine": 3977,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3015ab30_17b68d72",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 4017,
      "author": {
        "id": 846
      },
      "writtenOn": "2021-08-28T20:08:33Z",
      "side": 1,
      "message": "Is it possible to continue to support callers of this public method during the period of deprecation in any way? By throwing an exception we force callers to modify their code immediately or trigger run-time problems which might not be immediately apparent. For third-party callers this is worse than removing the method entirely which would trigger a build-time problem and at least draw the developer\u0027s attention to the problem.",
      "range": {
        "startLine": 4017,
        "startChar": 2,
        "endLine": 4017,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f318edc_9356e864",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 4017,
      "author": {
        "id": 178588
      },
      "writtenOn": "2021-08-29T06:09:18Z",
      "side": 1,
      "message": "Lets have the review in one place and discuss on the first instance of this comment.\nI\u0027ll resolve this one too when there is a consensus.",
      "parentUuid": "3015ab30_17b68d72",
      "range": {
        "startLine": 4017,
        "startChar": 2,
        "endLine": 4017,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cef5845_aad4f87c",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 4017,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-09-10T16:24:54Z",
      "side": 1,
      "message": "Unlike the above case, the use case of this method (Called from populateTopMakefile) is more likely that someone could be calling this from extender (i.e. extender overrides populateTopMakefile)\n\nLooking at this method alone, I think the existing implementation can be left in place with no ill effects - i.e. if someone calls it it will do the \"right\" thing. The problem is getting the varMap. I will address that in the next comment",
      "parentUuid": "5f318edc_9356e864",
      "range": {
        "startLine": 4017,
        "startChar": 2,
        "endLine": 4017,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aed79193_398679f9",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 4017,
      "author": {
        "id": 178588
      },
      "writtenOn": "2021-09-10T18:00:53Z",
      "side": 1,
      "message": "Sure it could, it\u0027s just \"dead code\" in the way the GnuMakefileGenerator functions. It\u0027s not really dead as it does not have any effect on the state of the instance, but I think you see my point anyway :)",
      "parentUuid": "6cef5845_aad4f87c",
      "range": {
        "startLine": 4017,
        "startChar": 2,
        "endLine": 4017,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18488ee0_1cd976fd",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 4264,
      "author": {
        "id": 846
      },
      "writtenOn": "2021-08-28T20:08:33Z",
      "side": 1,
      "message": "Is it possible to continue to support callers of this public method during the period of deprecation in any way? By throwing an exception we force callers to modify their code immediately or trigger run-time problems which might not be immediately apparent. For third-party callers this is worse than removing the method entirely which would trigger a build-time problem and at least draw the developer\u0027s attention to the problem.",
      "range": {
        "startLine": 4264,
        "startChar": 2,
        "endLine": 4264,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "462050be_f559067d",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 4264,
      "author": {
        "id": 178588
      },
      "writtenOn": "2021-08-29T06:09:18Z",
      "side": 1,
      "message": "Lets have the review in one place and discuss on the first instance of this comment.\nI\u0027ll resolve this one too when there is a consensus.",
      "parentUuid": "18488ee0_1cd976fd",
      "range": {
        "startLine": 4264,
        "startChar": 2,
        "endLine": 4264,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ca4cbcb_4ef1ec74",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 4264,
      "author": {
        "id": 27769
      },
      "writtenOn": "2021-09-10T16:24:54Z",
      "side": 1,
      "message": "Here again it is not reasonable to override this method. But it is quite reasonable to be calling it.\n\nI can\u0027t see a sensible (in terms of effort) way to make the old API work. The not reasonable effort is to provide a LinkedHashMap subclass that provided a view of the topBuildOutVars.",
      "parentUuid": "462050be_f559067d",
      "range": {
        "startLine": 4264,
        "startChar": 2,
        "endLine": 4264,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ada7db3_8c0a20c3",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/makegen/gnu/GnuMakefileGenerator.java",
        "patchSetId": 8
      },
      "lineNbr": 4264,
      "author": {
        "id": 178588
      },
      "writtenOn": "2021-09-10T18:00:53Z",
      "side": 1,
      "message": "I suppose that would be possible, but I think that the map needs to be read-only in that case as it would otherwise not be a simple view as it would need to somehow convert the entries back to the Map\u003cString,Set\u003cString\u003e\u003e type... Is it worth creating an implementation of the Map interface that wraps the topBuildOutVars in a way that adding an element to that wrapper would be reflected in the topBuildOutVars map instance?",
      "parentUuid": "3ca4cbcb_4ef1ec74",
      "range": {
        "startLine": 4264,
        "startChar": 2,
        "endLine": 4264,
        "endChar": 48
      },
      "revId": "53b011ab8018d9f91c1e643f7097f296fee076b5",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    }
  ]
}
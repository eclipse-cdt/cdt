{
  "comments": [
    {
      "key": {
        "uuid": "e7dfcf21_3e8829ff",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2TemplateTests.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "This import seems unnecessary.",
      "range": {
        "startLine": 97,
        "startChar": 49,
        "endLine": 97,
        "endChar": 50
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_d7a1b1a9",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2TemplateTests.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_3e8829ff",
      "range": {
        "startLine": 97,
        "startChar": 49,
        "endLine": 97,
        "endChar": 50
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_5eca5518",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/constexprevaluation/TestBase.java",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "It\u0027s better to assertInstance(value, CStringValue.class) first. This way, if the value is of the wrong kind, the test fails with an assertion failure rather than an exception.",
      "range": {
        "startLine": 90,
        "startChar": 28,
        "endLine": 90,
        "endChar": 40
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_3788152e",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/constexprevaluation/TestBase.java",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_5eca5518",
      "range": {
        "startLine": 90,
        "startChar": 28,
        "endLine": 90,
        "endChar": 40
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_7ecf1127",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/constexprevaluation/TestBase.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "Likewise here.",
      "range": {
        "startLine": 96,
        "startChar": 43,
        "endLine": 96,
        "endChar": 61
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_578da13c",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/constexprevaluation/TestBase.java",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_7ecf1127",
      "range": {
        "startLine": 96,
        "startChar": 43,
        "endLine": 96,
        "endChar": 61
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_1ec0cdf6",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/constexprevaluation/TestBase.java",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "This could probably have a more descriptive name, like getLastDeclarationInitializer().",
      "range": {
        "startLine": 106,
        "startChar": 36,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_7781bd06",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/constexprevaluation/TestBase.java",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_1ec0cdf6",
      "range": {
        "startLine": 106,
        "startChar": 36,
        "endLine": 106,
        "endChar": 44
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_1ee7eda5",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBindingResolutionTestBase.java",
        "patchSetId": 1
      },
      "lineNbr": 544,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "I think \"shouldRequireHeaderFile\" would be a more descriptive name.",
      "range": {
        "startLine": 544,
        "startChar": 53,
        "endLine": 544,
        "endChar": 83
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_977e4989",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/internal/index/tests/IndexBindingResolutionTestBase.java",
        "patchSetId": 1
      },
      "lineNbr": 544,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_1ee7eda5",
      "range": {
        "startLine": 544,
        "startChar": 53,
        "endLine": 544,
        "endChar": 83
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_def4a54a",
        "filename": "core/org.eclipse.cdt.core/.settings/.api_filters",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "This API filter will not be necessary after addressing my comment about IValue.numericalValue().",
      "range": {
        "startLine": 7,
        "startChar": 41,
        "endLine": 7,
        "endChar": 55
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_fef16157",
        "filename": "core/org.eclipse.cdt.core/.settings/.api_filters",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "This API filter should not be necessary either after addressing my comment about ICPPASTInitializerClause inheriting from ICPPEvaluationOwner.",
      "range": {
        "startLine": 15,
        "startChar": 41,
        "endLine": 15,
        "endChar": 54
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_b77b4598",
        "filename": "core/org.eclipse.cdt.core/.settings/.api_filters",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_fef16157",
      "range": {
        "startLine": 15,
        "startChar": 41,
        "endLine": 15,
        "endChar": 54
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_7e21d15b",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTBreakStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "ICPPExecutionOwner is not public API, so we shouldn\u0027t have an interface that is public API (like IASTBreakStatement) implement it.\n\nThe usual way to do this is as follows:\n\n  - Make the implementation classes, e.g. CPPASTBreakStatement\n    (which are not public API), implement ICPPExecutionOwner.\n  - At call sites, if you have an IASTBreakStatement, and need\n    to call an ICPPExecutionOwner method on it, cast it to\n    ICPPExecutionOwner.\n\nThis applies to all public interfaces that are made to extend ICPPExecutionOwner in this patch.",
      "range": {
        "startLine": 21,
        "startChar": 59,
        "endLine": 21,
        "endChar": 77
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_d778d19d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTBreakStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_7e21d15b",
      "range": {
        "startLine": 21,
        "startChar": 59,
        "endLine": 21,
        "endChar": 77
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_feeb2118",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IValue.java",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "This is a breaking change to a public API. We prefer not to make these without an intermediate deprecation step, to avoid breaking clients (e.g. plugins) that might be using this API.\n\nUsually the way we deal with this is:\n\n  - Add a new method with a different name (e.g. numberValue)\n    that returns Number.\n\n  - Keep numericalValue() returning Long. For values for\n    which numberValue() would return a Number that\u0027s not a\n    Long, numericalValue() can return null.\n\n  - Deprecate numericalValue(). Eventually, it can be\n    removed in a future release.",
      "range": {
        "startLine": 30,
        "startChar": 1,
        "endLine": 30,
        "endChar": 7
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_7ebb912c",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IValue.java",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "For each new method added to this interface, please add a comment describing what it does.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_dec905c0",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IValue.java",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "Since ICPPEvaluation and ITypeMarshalBuffer are not public API types, but IValue is, all IValue methods whose signature mentions these types need to be marked as @noreference (like IValue.getEvaluation() is).",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 43,
        "endChar": 15
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_9ebf7d17",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IValue.java",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "We may want to introduce some terminology (e.g. \"subEvaluation\"), and use it in the name of this method (e.g. getSubEvaluation()).",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_bebc3923",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IValue.java",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "The convention in Java is to name this method equals(), and make it take Object as a parameter. (It then usually returns false if the parameter is not of type IValue).\n\nThe resulting signature is the same as that of Object.equals(), so it doesn\u0027t need to be redeclared here.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_5e1c1529",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTInitializerClause.java",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "Stray characters added.",
      "range": {
        "startLine": 18,
        "startChar": 62,
        "endLine": 18,
        "endChar": 72
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_f7f86d8c",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTInitializerClause.java",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_5e1c1529",
      "range": {
        "startLine": 18,
        "startChar": 62,
        "endLine": 18,
        "endChar": 72
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_9e05bdce",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTInitializerClause.java",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "As with ICPPExecutionOwner, we cannot make a public API extend ICPPEvaluationOwner. The same workaround can be applied.",
      "range": {
        "startLine": 22,
        "startChar": 73,
        "endLine": 22,
        "endChar": 92
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_17feb976",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/cpp/ICPPASTInitializerClause.java",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_9e05bdce",
      "range": {
        "startLine": 22,
        "startChar": 73,
        "endLine": 22,
        "endChar": 92
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_5eb6d545",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CStringValue.java",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "As this is an expensive operation, we should probably cache its result.",
      "range": {
        "startLine": 54,
        "startChar": 9,
        "endLine": 54,
        "endChar": 20
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_3eb1094d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CStringValue.java",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "There is similar code in CPPASTLiteralExpression.computeStringLiteralSize(). We may want to consider sharing code between the two. (This can be done as a follow-up.)",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_738b9ba7",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "The comment above IValue.getEvaluation() says \"Returns the evaluation object if this value is dependent, or null otherwise\". Is this still accurate, even for CompositeValue? As far as I can tell, a CompositeValue can be non-dependent, but still have an evaluation.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_bb28b5ba",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "It would be helpful if each of these create() overloads had a comment describing what it does.",
      "range": {
        "startLine": 102,
        "startChar": 22,
        "endLine": 102,
        "endChar": 28
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_9ea69d0b",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "What happens if the value of the array bound is dependent?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_be6ef922",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "\"elementType\" would be a better name",
      "range": {
        "startLine": 104,
        "startChar": 8,
        "endLine": 104,
        "endChar": 17
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_1e7e0dd8",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "\"type\" would be a better name, because it doesn\u0027t have to be an array type.",
      "range": {
        "startLine": 114,
        "startChar": 38,
        "endLine": 114,
        "endChar": 47
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_d3df0f85",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 155,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "No one seems to use \u0027record\u0027 - why have it at all?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_9e585d84",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "This line doesn\u0027t make sense to me. \"fieldPos\" was computed by calling CPPASTFieldReference.getFieldPosition() on the base field, so it\u0027s a field position in base class\u0027 hierarchy. However, values[] expects an index in classType\u0027s hierarchy. How can this work with multiple inheritance?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_f3e40b58",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "Similar problem here with multiple inheritance.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_f3fb2beb",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "Shouldn\u0027t we put the value into the activation record as well? The initializers of fields declared later can reference fields declared earlier.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_eeba6008",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "This function is unused and can be removed.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_6ece50a9",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/CompositeValue.java",
        "patchSetId": 1
      },
      "lineNbr": 232,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "Seems like this condition should be negated.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_3f2471e5",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ISerializableExecution.java",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-05T07:34:58Z",
      "side": 1,
      "message": "Please write a Javadoc for this method, explaining in particular the meaning of the \u0027includeValue\u0027 parameter.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_77fb7d3b",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ISerializableExecution.java",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T13:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_3f2471e5",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_5f293dbc",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ITypeMarshalBuffer.java",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-05T07:34:58Z",
      "side": 1,
      "message": "No one uses this - there is no reason to add it.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_d7dc5106",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ITypeMarshalBuffer.java",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T13:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_5f293dbc",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_bf17a177",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ITypeMarshalBuffer.java",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-05T07:34:58Z",
      "side": 1,
      "message": "There is no reason for types and values to share the same number space, as we always know whether we are unmarshaling a value or a type.\n\nPlease move the _VALUE constants into their own section, and start them at 0x01.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_f755cdce",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ITypeMarshalBuffer.java",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T13:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_bf17a177",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_1f5a5556",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ITypeMarshalBuffer.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-05T07:34:58Z",
      "side": 1,
      "message": "Why is there not an entry for EvalPointer? I understand that it inherits from EvalReference, but it is OK to get an EvalReference back after writing an EvalPointer to the index?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_d7db71e2",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ITypeMarshalBuffer.java",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T13:42:41Z",
      "side": 1,
      "message": "You are right, but the problem is that EvalReference has a reference to the ActivationRecord that stores the value the reference refers to. Thus, there\u0027s no obvious way to marshal it. At the moment EvalReference.marshal() doesn\u0027t do anything useful. Do you know a solution?",
      "parentUuid": "e7dfcf21_1f5a5556",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_5f64dd14",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IntegralValue.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-05T07:34:58Z",
      "side": 1,
      "message": "This comment should talk about \"IntegralValue.THIS\". Same goes for the other static instances in this file.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_f78dcd41",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IntegralValue.java",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_5f64dd14",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_df462d75",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IntegralValue.java",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-05T07:34:58Z",
      "side": 1,
      "message": "Why was the TYPICAL optimization removed?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_973009ee",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IntegralValue.java",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T13:42:41Z",
      "side": 1,
      "message": "I don\u0027t know how this happened. I put it back.",
      "parentUuid": "e7dfcf21_df462d75",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_bfa401bb",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IntegralValue.java",
        "patchSetId": 1
      },
      "lineNbr": 318,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-05T07:34:58Z",
      "side": 1,
      "message": "\"this\" is redundant here",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_17931962",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/IntegralValue.java",
        "patchSetId": 1
      },
      "lineNbr": 318,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_bfa401bb",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_c582daa1",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ValueFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "Update comment to reflect the fact that the function now returns IValue.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_054cc21b",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ValueFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 541,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "There was an optimization here, where, if the operator was op_equals or op_notequals, and the operand AST nodes compared equal() (the AST nodes themselves, without evaluation), the answer was determined based on that (1 for op_equals, 0 for op_notequals). Why was this removed?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_e57fd61a",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/ValueFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 541,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "There was an optimization here, where, if the operator was op_equals or op_notequals, and the operand AST nodes compared equal() (the AST nodes themselves, without evaluation, idn",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_3e9829cd",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTBreakStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "After changing the statement interface classes (e.g. IASTBreakStatement) to not implement ICPPExecutionOwner (and just having the implementation classes implement it) like I suggested, these overrides in the C implementations will become unnecessary (because we can just have the C++ implementations implement them).",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_3703b51b",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/c/CASTBreakStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_3e9829cd",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_a55ceec6",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTFieldReference.java",
        "patchSetId": 1
      },
      "lineNbr": 296,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "the function?",
      "range": {
        "startLine": 296,
        "startChar": 52,
        "endLine": 296,
        "endChar": 64
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_c559fad5",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTFieldReference.java",
        "patchSetId": 1
      },
      "lineNbr": 343,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "As field positions are 0-based, 0 is a valid position. Since this is (I assume) an error condition, it should return -1 (the way e.g. CPPFieldProblem.getFieldPosition() does).",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_45c16ac8",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTLiteralExpression.java",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "Any reason not to use the existing method getUserDefinedLiteralOperator()?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_65c666e3",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTLiteralExpression.java",
        "patchSetId": 1
      },
      "lineNbr": 692,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "EvalID.create() expects an expression that\u0027s hooked up to the AST.\n\nWe could do this instead:\n\n  - Refactor EvalID.create(IASTIdExpression) to be\n    EvalID.create(IASTName, IASTExpression). We can\n    keep a wrapper EvalID.create(IASTIdExpression expr)\n    which forwards to create(expr.getName(), expr).\n\n  - Here, call EvalID.create(name, this).\n\nAlternatively, since we have an IBinding, we can just create an EvalBinding.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_8591b2d7",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTLiteralExpression.java",
        "patchSetId": 1
      },
      "lineNbr": 712,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "C++ also supports processing raw literals via a \"literal operator template\", that is, a function of the form \n\n  template \u003cchar...\u003e LiteralType operator \"\" ();\n\nwhich then gets the characters of the literal as template arguments.\n\nWe can leave support for this for a follow-up, but please mention it in a TODO comment.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_c58bbaa5",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTRangeBasedForStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "What is the purpose of weeding out unknown bindings at this stage? The unknown bindings can instantiate to non-unknown bindings in ICPPExecution.instantiate().",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_e588b6ab",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPASTReturnStatement.java",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "Why not ICPPEvaluationOwner?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_2551beb0",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPVariable.java",
        "patchSetId": 1
      },
      "lineNbr": 281,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "Please add Javadoc to this function. Among other things, it should mention that if the variable has no initializer, null is returned (as opposed to EvalFixed.INCOMPLETE - this is important for some call sites).",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_93502758",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalConstructor.java",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "Can we use CompositeValue.create(classType) here?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_855ff2ba",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalMemberAccess.java",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "I\u0027m not a big fan of the fact that this is an optional field - some constructors initialize it and some don\u0027t.\n\nIt if has to be this way, could you document under what circumstances an EvalMemberAccess has an fOwnerEval?\n\nAlso, please have the constructor that doesn\u0027t take an fOwnerEval delegate to the one that does (passing \u0027null\u0027 for it), not the other way around.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_4546cafb",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalMemberAccess.java",
        "patchSetId": 1
      },
      "lineNbr": 385,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "fOwnerEval is lost here - is that intended?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_33ce73da",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/EvalUtil.java",
        "patchSetId": 1
      },
      "lineNbr": 135,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "Few comments here:\n\n - Please write a Javadoc for this function that describes \n   what it does.\n\n - Please try to limit lines to 120 characters in length.\n\n - I don\u0027t understand why this function needs to perform\n   instantiation. If the variable is the field of a class\n   specialization, then the field and its properties (like\n   its initial value) should already be instantiated.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_fec6c1ac",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/ExecAliasDeclaration.java",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "What is the purpose of this execution? It doesn\u0027t seem to do anything.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_1e936db3",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/ExecAliasDeclaration.java",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "This field isn\u0027t used for any purpose, either.",
      "range": {
        "startLine": 20,
        "startChar": 27,
        "endLine": 20,
        "endChar": 42
      },
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_f3b6cb43",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/ExecDeclarator.java",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-04T08:01:24Z",
      "side": 1,
      "message": "It looks like this considers default member initializers only, not constructors. Is that the intention?\n\nThe call site in createInitialValue(), which returns the result of createDefaultInitializedCompositeValue() if there is no initializer evaluation, makes me think we do want to consider constructors here.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_3f5f1147",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/ExecIncomplete.java",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-05T07:34:58Z",
      "side": 1,
      "message": "An empty marshal() implementation will corrupt the index if we ever actually serialize an ExecIncomplete (because when deserializing, unmarshalExecution() will interpret the next two bytes in the buffer, which will be written by the next thing we serialize, as identifying an execution type, and then try to read the corresponding execution.)\n\nWe should either throw an UnsupportedOperationException from this function, or introduce ITypeMarshalBuffer.EXEC_INCOMPLETE and write that.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_571f6164",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/ExecIncomplete.java",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T13:42:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_3f5f1147",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_a58eaeb6",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/ExecNull.java",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "Is there any point in having this execution type? Can we just return null from CPPASTNullStatement.getExecution(), the way we do from CPPASTDeclarationStatement.getExecution() for declarations that are not execution owners?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_654bc602",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/index/composite/cpp/CPPCompositesFactory.java",
        "patchSetId": 1
      },
      "lineNbr": 428,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-05-08T00:17:38Z",
      "side": 1,
      "message": "Should fOwnerEval be propagated?",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_1e128d16",
        "filename": "debug/org.eclipse.cdt.debug.core/.settings/.api_filters",
        "patchSetId": 1
      },
      "lineNbr": 4,
      "author": {
        "id": 973
      },
      "writtenOn": "2016-04-22T06:16:26Z",
      "side": 1,
      "message": "This filter isn\u0027t related to the changes in this bug at all, and shouldn\u0027t be present.",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7dfcf21_57084135",
        "filename": "debug/org.eclipse.cdt.debug.core/.settings/.api_filters",
        "patchSetId": 1
      },
      "lineNbr": 4,
      "author": {
        "id": 76438
      },
      "writtenOn": "2016-05-06T11:32:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e7dfcf21_1e128d16",
      "revId": "6ad029e66dda3783d9e094c14346f4344b463c30",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}
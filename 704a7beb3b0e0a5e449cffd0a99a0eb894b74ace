{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f09baede_2e202aed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 27769
      },
      "writtenOn": "2022-05-10T19:21:10Z",
      "side": 1,
      "message": "Please explain something to me, AFAIU how this is working and improving performance is that it relies on fCommandForCoresCache to cache the `-list-thread-groups i1` so that the multiple calls to getExecutionData for each thread now can use the cached result of the first call?\n\nI was originally going to ask you to look at org.eclipse.cdt.dsf.gdb.service.GDBRunControl_7_0_NS.refreshThreadStates() too, but if the above is true, then there would be no advantage in the Nonstop case in changing to -list-thread-groups?\n\nThis change looks good to me pending answering the various questions I have. The tests pass (on GDB 10) so that is good too.",
      "revId": "704a7beb3b0e0a5e449cffd0a99a0eb894b74ace",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dd15cfd_84c9bf75",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 171781
      },
      "writtenOn": "2022-05-10T20:01:10Z",
      "side": 1,
      "message": "\u003e Please explain something to me, AFAIU how this is working and improving performance is that it relies on fCommandForCoresCache to cache the `-list-thread-groups i1` so that the multiple calls to getExecutionData for each thread now can use the cached result of the first call?\n\nIt is basically improving performance by reducing the communication between GDB and GDB server which are RSP packets. Kindly see bug 550257 for more details. For each thread-info command, qXfer:threads:read RSP packets are communicated which is a lot of communication, also there are many other memory reads and stuff.\n\nNow using \u0027-list-thread-groups i1\u0027 has only one (IIRC) qXfer:threads:read packet and other memory reads and stuff, hence communication is lesser and takes lesser time than collective thread-info command*s* and provides information for all threads. Then we cache it and other threads info are provided by cache.\n\n\u003e I was originally going to ask you to look at org.eclipse.cdt.dsf.gdb.service.GDBRunControl_7_0_NS.refreshThreadStates() too, but if the above is true, then there would be no advantage in the Nonstop case in changing to -list-thread-groups?\n\nI compared \"-thread-info\" (without arg) and \"-list-thread-group i1\" and both provide same info for particular case, but \"-thread-info\" has two extra infos.\n1. current-thread info\n2. in case of non-stop, it provides the threads of all inferiors.\n\nBecause of 2, the usage of it in GDBRunControl_7_0_NS.refreshThreadStates() is correct.",
      "parentUuid": "f09baede_2e202aed",
      "revId": "704a7beb3b0e0a5e449cffd0a99a0eb894b74ace",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba231685_79d18cab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 27769
      },
      "writtenOn": "2022-05-10T22:15:46Z",
      "side": 1,
      "message": "\u003e Then we cache it and other threads info are provided by cache.\n\nthat is the key part then - fCommandForCoresCache caches the information. This patch does a good job saving lots of comms between CDT and GDB, but it still has to parse the response to -list-thread-group i1 x number of threads. \n\nAt the moment it certainly isn\u0027t worth caching at a higher level, I am just trying to make sure I understand the code being changed.\n\nWe are still having to do -list-thread-group i1 twice per stopped event AFAICT because the two places they are issued from have different caches:\n- fCommandForCoresCache in GDBProcesses_7_1\n- fThreadCommandCache in GDBProcesses_7_0\n\nIs it worth combining those two caches so that -list-thread-group i1 is only sent once?",
      "parentUuid": "6dd15cfd_84c9bf75",
      "revId": "704a7beb3b0e0a5e449cffd0a99a0eb894b74ace",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f3810498_e29121fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 171781
      },
      "writtenOn": "2022-05-10T22:32:09Z",
      "side": 1,
      "message": "\u003e \u003e Then we cache it and other threads info are provided by cache.\n\u003e \n\u003e that is the key part then - fCommandForCoresCache caches the information. This patch does a good job saving lots of comms between CDT and GDB, but it still has to parse the response to -list-thread-group i1 x number of threads. \n\nYeah! but it takes no time IMO.\n\n\u003e At the moment it certainly isn\u0027t worth caching at a higher level, I am just trying to make sure I understand the code being changed.\n\u003e \n\u003e We are still having to do -list-thread-group i1 twice per stopped event AFAICT because the two places they are issued from have different caches:\n\u003e - fCommandForCoresCache in GDBProcesses_7_1\n\u003e - fThreadCommandCache in GDBProcesses_7_0\n\u003e \n\u003e Is it worth combining those two caches so that -list-thread-group i1 is only sent once?\n\nActually I initially thought to use fThreadCommandCache but its tied with \"Force thread list update on suspend\" option and this cache is populated just once (thats why you are seeing two commands being issued on first suspend). But if user enables this option then definitely two will be issued.\n\nI tried to dig why we added this option and whats the benefit and couldn\u0027t grasp things well. Seems the problem was something related to linux target GDB used to debug an OS (IDK why baremetal gdb was not used).\n\nGiven we are always issuing -list-thread-group i1 now, does this \"Force thread list update on suspend\" option make sense now? isn\u0027t it redundant now? Should we remove this option and combine the two caches?",
      "parentUuid": "ba231685_79d18cab",
      "revId": "704a7beb3b0e0a5e449cffd0a99a0eb894b74ace",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0e0d29f_9ea248a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 27769
      },
      "writtenOn": "2022-05-11T00:07:10Z",
      "side": 1,
      "message": "\u003e Yeah! but it takes no time IMO. \n\nI share the opinion with you on reparsing. There are certainly other areas far ahead of that for optimization! \n\n\u003e [...] if user enables this option then definitely two will be issued\n\nAh, that makes sense, I only looked at first suspend. \n\nI don\u0027t know whether there are any real hardware/gdb combinations that really need for the option, but people still use cdt with what I consider ancient versions of gdb. So I don\u0027t think its worth changing this. As above, there is much better places to spend the limited effort available.\n\nThanks for the patch, once you have a chance to change the error handling its ready to submit afaict.",
      "parentUuid": "f3810498_e29121fb",
      "revId": "704a7beb3b0e0a5e449cffd0a99a0eb894b74ace",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "036fcc09_385b9bb1",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_1.java",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 27769
      },
      "writtenOn": "2022-05-10T19:21:10Z",
      "side": 1,
      "message": "This is just a minor thing, but I am not sure why this part of the change? The only reason I can see to change it is so that the error message is \"Could not get thread info\" - but that loses the error that fCommandForCoresCache.execute may have added.\n\nNote that the handleCompleted at line 159 is different as in that case even if fCommandForCoresCache.execute fails, the getExecutionData. FTR I am not sure what is done at line 159 is a good idea.",
      "range": {
        "startLine": 188,
        "startChar": 21,
        "endLine": 188,
        "endChar": 36
      },
      "revId": "704a7beb3b0e0a5e449cffd0a99a0eb894b74ace",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef1f570f_d7f92023",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_1.java",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 171781
      },
      "writtenOn": "2022-05-10T20:01:10Z",
      "side": 1,
      "message": "\u003e but that loses the error that fCommandForCoresCache.execute may have added.\n\nthats a valid point.. The purpose was to show user more useful message.. I see following options\n1. Append the actual error message as well.\n2. Log the actual error and show user \"could not get thread info\" message only.\n3. or simply revert to use handleSuccess..\n\nWDYS?",
      "parentUuid": "036fcc09_385b9bb1",
      "range": {
        "startLine": 188,
        "startChar": 21,
        "endLine": 188,
        "endChar": 36
      },
      "revId": "704a7beb3b0e0a5e449cffd0a99a0eb894b74ace",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42b8645f_f7949215",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBProcesses_7_1.java",
        "patchSetId": 1
      },
      "lineNbr": 188,
      "author": {
        "id": 27769
      },
      "writtenOn": "2022-05-10T22:15:46Z",
      "side": 1,
      "message": "1 is best. I think you can replace the null argument in the new status with the status in the inner class.",
      "parentUuid": "ef1f570f_d7f92023",
      "range": {
        "startLine": 188,
        "startChar": 21,
        "endLine": 188,
        "endChar": 36
      },
      "revId": "704a7beb3b0e0a5e449cffd0a99a0eb894b74ace",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}
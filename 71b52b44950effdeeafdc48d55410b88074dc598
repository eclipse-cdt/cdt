{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4e5c45c1_73f5a4e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-03-31T10:54:07Z",
      "side": 1,
      "message": "\u003e Patch Set 5:\n\u003e \n\u003e I have run this up on Windows and tested both user objects and libraries. It is working well for new projects.\n\u003e \n\u003e How to we support existing CDT managed build projects that use the gnu2/GnuMakefileGenerator but have modified the command line pattern?\n\u003e \n\u003e There is also the case of 3rd party toolchain descriptions that use the gnu2/GnuMakefileGenerator but provide their own command line pattern for the linker.\n\u003e \n\u003e It seems we need to detect whether the effective command line pattern contains \"${EXTRA_FLAGS}\" and process appropriately.\n\nI have not forgotten this topic.\nI just returned from a few weeks of vacation and am slowly getting back on track again. I will have to think a bit about the concerns you raised above. I hope I will have an answer for you this week.",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "357f47e5_81721b0b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-11T12:09:08Z",
      "side": 1,
      "message": "\u003e Patch Set 5:\n\u003e \n\u003e I have run this up on Windows and tested both user objects and libraries. It is working well for new projects.\n\u003e \n\u003e How to we support existing CDT managed build projects that use the gnu2/GnuMakefileGenerator but have modified the command line pattern?\n\u003e \n\u003e There is also the case of 3rd party toolchain descriptions that use the gnu2/GnuMakefileGenerator but provide their own command line pattern for the linker.\n\u003e \n\u003e It seems we need to detect whether the effective command line pattern contains \"${EXTRA_FLAGS}\" and process appropriately.\n\nAfter finally having some time to go into depth about this, I\u0027m still not sure what is the correct approach here.\n\nIf we ensure that the commandLinePattern always contains the \"${EXTRA_FLAGS}\" symbol, then there is no way to remove it, using XML only, if needed. This would mean that what\u0027s written in the extension point is not the full truth.\nOn the other hand, if we do not do it, some projects will fail to link, or in worst case, succeed on linking but fail at runtime.\n\nWhat is the best approach here? Is it to override the XML string and always append if not present or leave it up to the extender to fix..?\n\n\"Correcting\" the pattern is as simple as an if-statement in Tool:getCommandLinePattern() unless I\u0027m missing something.\n\n@John: What\u0027s your opinion on this?\n\nBtw, this is the same as the review comment I wrote in Tool.java on line 2099 in PS4.",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1902d90e_f7d94adc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 846
      },
      "writtenOn": "2022-04-12T16:51:49Z",
      "side": 1,
      "message": "Hi @Torbjörn\n\nPreviously, the USER_OBJS and LIBS were appended to the linker command within GnuMakefileGenerator.populateObjectsMakefile() in a hard-coded manner. We are no-longer doing this.\n\nPreviously, the default command line pattern for a tool did not include ${EXTRA_FLAGS} but now it does.\n\nAny existing XML toolchain description which uses GnuMakefileGenerator and overrides the linker tool command line pattern will provide an alternative command line pattern based on the assumption that USER_OBJS and LIBS will be appended by the generator.\n\nI believe any existing XML toolchain description which does NOT use the GnuMakefileGenerator will be unaffected by the change to the default command line pattern. ${EXTRA_FLAGS} should evaluate to the empty string.\n\nSo it seems reasonable for the modified GnuMakefileGenerator to identify the linker tool (using the same technique as previously used), inspect the command line pattern for the linker tool and append USER_OBJS and LIBS if that pattern does not include \"${EXTRA_FLAGS}\". This will restore legacy behaviour.\n\nAre there any other scenarios to consider?",
      "parentUuid": "357f47e5_81721b0b",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "70a771c2_f8b3295d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-12T17:37:51Z",
      "side": 1,
      "message": "This gerrit does not touch the inclusion of LIBS or USER_OBJS on the command line. All it does it avoid generating the objects.mk that defines the content of the symbols. If the tool still has references to any of the two make symbols, then they will still be added to the command line, but make will resolve them to nothing.\n\nThe content of these two symbols are mapped by the XML magic, so there is no code that does anything particular on a tool that is a linker.\n\n\nIf it\u0027s acceptable that there is *no* way to remove the ${EXTRA_FLAGS} from the command line defined on a tool, we can easily append it if it\u0027s not there already. All that is needed for this \"fix\" is adding 3 lines of code in the Tool#getCommandLinePattern() method.\n\n\nMy main concern here is how to identify a usage where the implementation does not want the ${EXTRA_FLAGS} part, for some reason, from a legacy implementation where it was not available.\nLet\u0027s discuss this during the meeting tomorrow.",
      "parentUuid": "1902d90e_f7d94adc",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4b106d3_dbeb4035",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 846
      },
      "writtenOn": "2022-04-14T17:01:49Z",
      "side": 1,
      "message": "Regarding compatibility with legacy toolchain descriptions:\n* Consumers of the older public GnuMakefileGenerator are not affected\n* The modified GnuMakefileGenerator is internal and fairly new so arguably reasonable to modify\n* The modified ManagedCommandLineGenerator is API and typically extended rather than replaced\n* The main area of concern is toolchain descriptions which override the default command line pattern or where a user has overridden this within a project. Within the modified GnuMakefileGenerator, I think we could detect the case where a tool is providing \"extra flags\" but the command line pattern does not include \"${EXTRA_FLAGS}\" and append the extra flags to the command line.",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44211946_cd38e79c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 846
      },
      "writtenOn": "2022-04-14T17:06:47Z",
      "side": 1,
      "message": "@Torbjörn, I will wait a short while for any comments before proceeding.",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b39adf3_2f96419c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-14T21:58:55Z",
      "side": 1,
      "message": "I agree on the first 3 bullets.\nI tried to implement your 4th bullet in PS6, please check if that is in line with your thought.",
      "parentUuid": "b4b106d3_dbeb4035",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8b24e4b_ff2741d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-16T21:39:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b39adf3_2f96419c",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9055a63c_259ae5c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-16T21:39:38Z",
      "side": 1,
      "message": "Discussion continued in other comment.",
      "parentUuid": "70a771c2_f8b3295d",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ea7c4f3_faf17778",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-16T21:39:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "44211946_cd38e79c",
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a62e444b_ed1d0ec1",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ITool.java",
        "patchSetId": 5
      },
      "lineNbr": 721,
      "author": {
        "id": 846
      },
      "writtenOn": "2022-04-14T17:06:47Z",
      "side": 1,
      "message": "Since this is API, I think we need a default implementation returning null. We might use a null value to indicate that ${EXTRA_FLAGS} should be appended to the command line pattern if necessary.",
      "range": {
        "startLine": 721,
        "startChar": 17,
        "endLine": 721,
        "endChar": 30
      },
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9a9a313_c8d0af1b",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ITool.java",
        "patchSetId": 5
      },
      "lineNbr": 721,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-14T21:58:55Z",
      "side": 1,
      "message": "If there should be a default implementation, I suppose it should return \"new String[0]\". Or do you see a particular use-case where we would need to differentiate no-extra-flags from not-implemented? And, do you see anyone actually implementing ITool without extending one of the CDT classes? :)\nAnyway, done in PS6 as an array with 0 elements.",
      "parentUuid": "a62e444b_ed1d0ec1",
      "range": {
        "startLine": 721,
        "startChar": 17,
        "endLine": 721,
        "endChar": 30
      },
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec24ff74_1a212a34",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ITool.java",
        "patchSetId": 5
      },
      "lineNbr": 721,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-16T21:39:38Z",
      "side": 1,
      "message": "Is the default implementation in PS6 good enough?",
      "parentUuid": "d9a9a313_c8d0af1b",
      "range": {
        "startLine": 721,
        "startChar": 17,
        "endLine": 721,
        "endChar": 30
      },
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f86e0d9_08db5dcb",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ManagedCommandLineGenerator.java",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 846
      },
      "writtenOn": "2022-04-14T16:46:04Z",
      "side": 1,
      "message": "Notes: The \"flags\" array is use for read-only presentation of \"All options\" in the Tool Settings UI. These flags are presented in \"All options\" even if ${FLAGS} is not present in the command line pattern. Formally, we could observe the order of ${FLAGS} and ${EXTRA_FLAGS} in the command line pattern and use this information to decide whether to append or to prepend \"extraFlags\".\n\nPerhaps we should make the merging of extraFlags to the flags[] unconditional since the presence of other flags in this array is also unconditional.",
      "range": {
        "startLine": 78,
        "startChar": 3,
        "endLine": 78,
        "endChar": 41
      },
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a4ca89c_a913dbf0",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ManagedCommandLineGenerator.java",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 178588
      },
      "writtenOn": "2022-04-14T21:58:55Z",
      "side": 1,
      "message": "I suppose we could. IIRC, I did it this way to be non-intrusive for extenders since it would require the ${EXTRA_FLAGS} to be in the commandLinePattern.\n\nWhen looking at this with the task to implement what you wrote, I think we should just unconditionally merge them as it will make the code so much easier. I don\u0027t see too much gain in adding the complexity. For example, what should be done in \"${FLAGS}\" is missing from the command line pattern? With the current implementation, it does not matter, flags is still flags... With the ordering - well, it depends ;)\nCan we agree to unconditionally merge the 2 arrays after the flagsStr has been created on line 67?\nI\u0027ll do it like that in the next PS - we can always change it if you think some other solution is better.",
      "parentUuid": "6f86e0d9_08db5dcb",
      "range": {
        "startLine": 78,
        "startChar": 3,
        "endLine": 78,
        "endChar": 41
      },
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "731227d9_506b89a4",
        "filename": "build/org.eclipse.cdt.managedbuilder.core/src/org/eclipse/cdt/managedbuilder/core/ManagedCommandLineGenerator.java",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 846
      },
      "writtenOn": "2022-04-16T18:13:32Z",
      "side": 1,
      "message": "Yes. Let\u0027s unconditionally merge the two arrays. I am less concerned about the ordering. The main objective of the \"All options\" UI is simply to provide some sort of feedback as to which flags are active.",
      "parentUuid": "9a4ca89c_a913dbf0",
      "range": {
        "startLine": 78,
        "startChar": 3,
        "endLine": 78,
        "endChar": 41
      },
      "revId": "71b52b44950effdeeafdc48d55410b88074dc598",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31"
    }
  ]
}
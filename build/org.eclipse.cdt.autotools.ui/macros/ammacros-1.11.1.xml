<!-- This file automatically generated by ParseAutomakeTexinfo utility -->
<!-- cvs -d:pserver:anonymous@sources.redhat.com:/cvs/eclipse \        -->
<!--   co autotools/ParseTexinfo                                       -->
<!DOCTYPE macros [

  <!ELEMENT macros (macro)*>

  <!ELEMENT macro (prototype*,synopsis)>
  <!ATTLIST macro
    id ID #REQUIRED
  >

  <!ELEMENT synopsis     (#PCDATA)*>

  <!ELEMENT prototype    (parameter+)?>

  <!ELEMENT parameter (#PCDATA)*>
  <!ATTLIST parameter
    content CDATA #REQUIRED
  >

]>

<macros>
  <macro id="AM_ENABLE_MULTILIB">
      <prototype>
      </prototype>
        <synopsis>
          This is used when a ``multilib'' library is being built.  The
         first optional argument is the name of the
         &lt;TT&gt;Makefile&lt;/TT&gt; being generated; it defaults to
         &lt;samp&gt;Makefile&lt;/samp&gt;.  The second optional argument
         is used to find the top source directory; it defaults to the
         empty string (generally this should not be used unless you are
         familiar with the internals). . &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_INIT_AUTOMAKE">
      <prototype>
        <parameter content="[OPTIONS]"/>
      </prototype>
      <prototype>
        <parameter content="PACKAGE"/>
        <parameter content="VERSION"/>
        <parameter content="[NO-DEFINE]"/>
      </prototype>
        <synopsis>
          Runs many macros required for proper operation of the generated
         Makefiles. &lt;br&gt;&lt;br&gt;  This macro has two forms, the
         first of which is preferred. In this form,
         &lt;CODE&gt;AM_INIT_AUTOMAKE&lt;/CODE&gt; is called with a
         single argument: a space-separated list of Automake options that
         should be applied to every &lt;TT&gt;Makefile.am&lt;/TT&gt; in
         the tree.  The effect is as if each option were listed in
         &lt;CODE&gt;AUTOMAKE_OPTIONS&lt;/CODE&gt; (Options).
         &lt;br&gt;&lt;br&gt;  The second, deprecated, form of
         &lt;CODE&gt;AM_INIT_AUTOMAKE&lt;/CODE&gt; has two required
         arguments: the package and the version number.  This form is
         obsolete because the &lt;VAR&gt;package&lt;/VAR&gt; and
         &lt;VAR&gt;version&lt;/VAR&gt; can be obtained from Autoconf's
         &lt;CODE&gt;AC_INIT&lt;/CODE&gt; macro (which itself has an old
         and a new form). &lt;br&gt;&lt;br&gt; If your
         &lt;TT&gt;configure.ac&lt;/TT&gt; has: &lt;br&gt;&lt;br&gt;
         &lt;TABLE&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td
         class=example&gt;&lt;pre&gt; AC_INIT([src/foo.c])
         AM_INIT_AUTOMAKE([mumble], [1.5])
         &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
         &lt;br&gt;&lt;br&gt;  you can modernize it as follows:
         &lt;br&gt;&lt;br&gt;
         &lt;TABLE&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td
         class=example&gt;&lt;pre&gt; AC_INIT([mumble], [1.5])
         AC_CONFIG_SRCDIR([src/foo.c]) AM_INIT_AUTOMAKE
         &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
         &lt;br&gt;&lt;br&gt; Note that if you're upgrading your
         &lt;TT&gt;configure.ac&lt;/TT&gt; from an earlier version of
         Automake, it is not always correct to simply move the package
         and version arguments from
         &lt;CODE&gt;AM_INIT_AUTOMAKE&lt;/CODE&gt; directly to
         &lt;CODE&gt;AC_INIT&lt;/CODE&gt;, as in the example above.  The
         first argument to &lt;CODE&gt;AC_INIT&lt;/CODE&gt; should be the
         name of your package (e.g., @samp{GNU Automake}), not the
         tarball name (e.g., &lt;samp&gt;automake&lt;/samp&gt;) that you
         used to pass to &lt;CODE&gt;AM_INIT_AUTOMAKE&lt;/CODE&gt;. 
         Autoconf tries to derive a tarball name from the package name,
         which should work for most but not all package names.  (If it
         doesn't work for yours, you can use the four-argument form of
         &lt;CODE&gt;AC_INIT&lt;/CODE&gt; to provide the tarball name
         explicitly). &lt;br&gt;&lt;br&gt;    By default this macro
         &lt;CODE&gt;AC_DEFINE&lt;/CODE&gt;'s
         &lt;CODE&gt;PACKAGE&lt;/CODE&gt; and
         &lt;CODE&gt;VERSION&lt;/CODE&gt;.  This can be avoided by
         passing the &lt;samp&gt;no-define&lt;/samp&gt; option, as in:
         &lt;TABLE&gt;&lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;/td&gt;&lt;td
         class=example&gt;&lt;pre&gt; AM_INIT_AUTOMAKE([gnits 1.5
         no-define dist-bzip2])
         &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; or by passing a
         third non-empty argument to the obsolete form.
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PATH_LISPDIR">
      <prototype>
      </prototype>
        <synopsis>
            Searches for the program &lt;CODE&gt;emacs&lt;/CODE&gt;, and,
         if found, sets the output variable
         &lt;CODE&gt;lispdir&lt;/CODE&gt; to the full path to Emacs'
         site-lisp directory. &lt;br&gt;&lt;br&gt; Note that this test
         assumes the &lt;CODE&gt;emacs&lt;/CODE&gt; found to be a version
         that supports Emacs Lisp (such as gnu Emacs or XEmacs).  Other
         emacsen can cause this test to hang (some, like old versions of
         MicroEmacs, start up in interactive mode, requiring
         &lt;KBD&gt;C-x C-c&lt;/KBD&gt; to exit, which is hardly obvious
         for a non-emacs user).  In most cases, however, you should be
         able to use &lt;KBD&gt;C-c&lt;/KBD&gt; to kill the test.  In
         order to avoid problems, you can set EMACS to ``no'' in the
         environment, or use the &lt;samp&gt;--with-lispdir&lt;/samp&gt;
         option to &lt;CODE&gt;configure&lt;/CODE&gt; to explicitly set
         the correct path (if you're sure you have an
         &lt;CODE&gt;emacs&lt;/CODE&gt; that supports Emacs Lisp).
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PROG_AS">
      <prototype>
      </prototype>
        <synopsis>
            Use this macro when you have assembly code in your project. 
         This will choose the assembler for you (by default the C
         compiler) and set &lt;CODE&gt;CCAS&lt;/CODE&gt;, and will also
         set &lt;CODE&gt;CCASFLAGS&lt;/CODE&gt; if required.
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PROG_CC_C_O">
      <prototype>
      </prototype>
        <synopsis>
           This is like &lt;CODE&gt;AC_PROG_CC_C_O&lt;/CODE&gt;, but it
         generates its results in the manner required by Automake.  You
         must use this instead of &lt;CODE&gt;AC_PROG_CC_C_O&lt;/CODE&gt;
         when you need this functionality, that is, when using per-target
         flags or subdir-objects with C sources. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PROG_LEX">
      <prototype>
      </prototype>
        <synopsis>
             Like &lt;CODE&gt;AC_PROG_LEX&lt;/CODE&gt; (@pxref{Particular
         Programs, , Particular Program Checks, autoconf, The Autoconf
         Manual}), but uses the &lt;CODE&gt;missing&lt;/CODE&gt; script
         on systems that do not have &lt;CODE&gt;lex&lt;/CODE&gt;. HP-UX
         10 is one such system. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PROG_GCJ">
      <prototype>
      </prototype>
        <synopsis>
            This macro finds the &lt;CODE&gt;gcj&lt;/CODE&gt; program or
         causes an error.  It sets &lt;CODE&gt;GCJ&lt;/CODE&gt; and
         &lt;CODE&gt;GCJFLAGS&lt;/CODE&gt;.  &lt;CODE&gt;gcj&lt;/CODE&gt;
         is the Java front-end to the GNU Compiler Collection.
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_PROG_UPC">
      <prototype>
        <parameter content="[compiler-search-list]"/>
      </prototype>
        <synopsis>
           Find a compiler for Unified Parallel C and define the
         &lt;CODE&gt;UPC&lt;/CODE&gt; variable.  The default
         &lt;VAR&gt;compiler-search-list&lt;/VAR&gt; is &lt;samp&gt;upcc
         upc&lt;/samp&gt;. This macro will abort
         &lt;CODE&gt;configure&lt;/CODE&gt; if no Unified Parallel C
         compiler is found. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_SILENT_RULES">
      <prototype>
      </prototype>
        <synopsis>
          Enable the machinery for less verbose build output (Options).
         &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_WITH_DMALLOC">
      <prototype>
      </prototype>
        <synopsis>
             Add support for the &lt;A
         HREF="http://dmalloc.com/&gt;Dmalloc package&lt;/A&gt;.  If the
         user runs &lt;CODE&gt;configure&lt;/CODE&gt; with
         &lt;samp&gt;--with-dmalloc&lt;/samp&gt;, then define
         &lt;CODE&gt;WITH_DMALLOC&lt;/CODE&gt; and add
         &lt;samp&gt;-ldmalloc&lt;/samp&gt; to
         &lt;CODE&gt;LIBS&lt;/CODE&gt;. &lt;br&gt;&lt;br&gt;
        </synopsis>
  </macro>
  <macro id="AM_WITH_REGEX">
      <prototype>
      </prototype>
        <synopsis>
              Adds &lt;samp&gt;--with-regex&lt;/samp&gt; to the
         &lt;CODE&gt;configure&lt;/CODE&gt; command line.  If specified
         (the default), then the &lt;samp&gt;regex&lt;/samp&gt; regular
         expression library is used, &lt;TT&gt;regex.o&lt;/TT&gt; is put
         into &lt;CODE&gt;LIBOBJS&lt;/CODE&gt;, and
         &lt;CODE&gt;WITH_REGEX&lt;/CODE&gt; is defined.  If
         &lt;samp&gt;--without-regex&lt;/samp&gt; is given, then the
         &lt;CODE&gt;rx&lt;/CODE&gt; regular expression library is used,
         and &lt;TT&gt;rx.o&lt;/TT&gt; is put into
         &lt;CODE&gt;LIBOBJS&lt;/CODE&gt;. &lt;br&gt;&lt;br&gt;
         &lt;/DL&gt; &lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt; @node
         Obsolete Macros
        </synopsis>
  </macro>
</macros>

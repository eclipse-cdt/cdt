{
  "comments": [
    {
      "key": {
        "uuid": "AABOPX//21M\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTChildProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 577
      },
      "writtenOn": "2013-03-18T17:40:37Z",
      "side": 1,
      "message": "Don\u0027t return null to signify an empty collection.\n\nPlease use descriptive form of in method JavaDoc comments: Create -\u003e Creates, Return -\u003e Returns. Please fix in all method JavaDocs.",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//21I\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTChildProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 577
      },
      "writtenOn": "2013-03-18T17:40:37Z",
      "side": 1,
      "message": "Does using of Collection mean that ordering of extra children is not important?",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//200\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/core/dom/ast/IASTChildProvider.java",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1042
      },
      "writtenOn": "2013-03-19T17:46:32Z",
      "side": 1,
      "message": "Yes, the implementation of the extension point doesn\u0027t care about the order of the children.  Further, I don\u0027t think that the implementation could ensure any type of order, since several contributors could be providing children for the same node.",
      "parentUuid": "AABOPX//21I\u003d",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//21A\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java",
        "patchSetId": 1
      },
      "lineNbr": 436,
      "author": {
        "id": 577
      },
      "writtenOn": "2013-03-18T17:40:37Z",
      "side": 1,
      "message": "Please use proper capitalization and punctuation in comments. Capitalize \"Visit\", put a period at the end. Please fix in all comments.",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//21E\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java",
        "patchSetId": 1
      },
      "lineNbr": 437,
      "author": {
        "id": 577
      },
      "writtenOn": "2013-03-18T17:40:37Z",
      "side": 1,
      "message": "One of fundamental AST assumptions is that child nodes are contained within their parents. This assumption seems to be violated by adding children to names.\n\nPlease always use curly braces when the body of \u0027for\u0027 statement contains multiple lines.",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//2W0\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java",
        "patchSetId": 1
      },
      "lineNbr": 437,
      "author": {
        "id": 1042
      },
      "writtenOn": "2013-03-20T12:09:15Z",
      "side": 1,
      "message": "I\u0027ve changed this so that the extension-point now only creates children for IASTExpressions.",
      "parentUuid": "AABOPX//21E\u003d",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//208\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java",
        "patchSetId": 1
      },
      "lineNbr": 460,
      "author": {
        "id": 577
      },
      "writtenOn": "2013-03-18T17:40:37Z",
      "side": 1,
      "message": "LinkedList is one of the least efficient data structures in Java. What is the reason for using it?",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//20w\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java",
        "patchSetId": 1
      },
      "lineNbr": 460,
      "author": {
        "id": 1042
      },
      "writtenOn": "2013-03-19T17:46:32Z",
      "side": 1,
      "message": "I guess you\u0027re talking about efficiency with respect to space?  What would you recommend in this case?",
      "parentUuid": "AABOPX//208\u003d",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//2fE\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java",
        "patchSetId": 1
      },
      "lineNbr": 460,
      "author": {
        "id": 577
      },
      "writtenOn": "2013-03-19T17:56:37Z",
      "side": 1,
      "message": "Efficiency wrt GC overhead primarily.",
      "parentUuid": "AABOPX//20w\u003d",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//2dQ\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java",
        "patchSetId": 1
      },
      "lineNbr": 460,
      "author": {
        "id": 1042
      },
      "writtenOn": "2013-03-19T19:55:33Z",
      "side": 1,
      "message": "The time for GC?  Do you have ideas on how I could measure this time?  I have a performance harness to compare the time needed for various collections in various conditions, but I need a way to account for this GC time.  Right now the harness collects garbage after every test, but I don\u0027t have a way to compare the performance of that collection.\n\nBTW: You haven\u0027t suggested an alternative -- I guess ArrayList?",
      "parentUuid": "AABOPX//2fE\u003d",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//2cA\u003d",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/pdom/PDOMWriter.java",
        "patchSetId": 1
      },
      "lineNbr": 460,
      "author": {
        "id": 1042
      },
      "writtenOn": "2013-03-19T21:21:17Z",
      "side": 1,
      "message": "I\u0027ve modified my PerformanceHarness to use GarbageCollectorMXBean to collect GC stats.  I haven\u0027t used this before so I don\u0027t have any feel for how accurate these results are.  Let me know if you know of a problem with this interface.\n\nI\u0027m collecting the gc.count (number of times GC has run) and the gc.time (milliseconds spent GC\u0027ing) before and after each test.  I haven\u0027t found any significant difference between the two cases.  The time is generally 3200ms (+/-100ms) and the number of collections is 612 or 613.  This is in a 64-bit VM on linux.\n\nI think that the reason the results are so similar is that I\u0027ve only been testing cases that will be commonly encountered by this code.  I don\u0027t expect there to be many contributors (my test tries values from 0 to 10) and I don\u0027t expect that the contributors will add many children (the test tries 1 to 5).\n\nWith these small values I don\u0027t think that the choice of Collection has a chance to make any impact at all.\n\nIn particular I found that for the common case of creating a Collection that is not used (i.e., where there aren\u0027t any extra children to contribute) the LinkedList is about 60% times faster.  However, this benefit is largely lost when there is one child to contribute (only 5% faster), and is lost after that.\n\nI\u0027m going to apply these results in two ways:\n\n1) I won\u0027t create the collection until there is actually something to add.\n2) I\u0027ll use an ArrayList (with the default 10 element capacity); once there is one child to contribute it is more likely that there are also others.\n\nI would be interested in knowing if there is some aspect of GC that is not accounted for with these stats from the MXBean.",
      "parentUuid": "AABOPX//2dQ\u003d",
      "revId": "c4c9b9a88c8f3343f0953e0f582a0ebba9ded5a6",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}
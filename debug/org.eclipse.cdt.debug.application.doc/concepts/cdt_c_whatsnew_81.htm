<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">

<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta name="keywords" content="CDT/User/NewIn81" />
	
	<title>CDT 8.1 New and Noteworthy</title>
</head>

<body>
<div role="main">
	<h1 id="top">CDT 8.1 - New and Noteworthy</h1>
	<p>See <a href="http://wiki.eclipse.org/CDT/User/NewIn81">What's new in CDT 8.1</a> on the CDT Wiki
	which may contain more recent information.
	</p>
	
	<table id="toc" class="toc" summary="Contents"><tr><td><div id="toctitle"><h2>Contents</h2></div>
<ul>
<li class="toclevel-1"><a href="#Editor"><span class="tocnumber">1</span> <span class="toctext">Editor</span></a>
<ul>
<li class="toclevel-2"><a href="#Pin_the_Call_Hierarchy_View"><span class="tocnumber">1.1</span> <span class="toctext">Pin the Call Hierarchy View</span></a></li>
<li class="toclevel-2"><a href="#Filtering_in_Outline_Views"><span class="tocnumber">1.2</span> <span class="toctext">Filtering in Outline Views</span></a></li>
<li class="toclevel-2"><a href="#Mouse_Hover_for_auto_Keyword"><span class="tocnumber">1.3</span> <span class="toctext">Mouse Hover for 'auto' Keyword</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Refactoring"><span class="tocnumber">2</span> <span class="toctext">Refactoring</span></a></li>
<li class="toclevel-1"><a href="#Indexing"><span class="tocnumber">3</span> <span class="toctext">Indexing</span></a></li>
<li class="toclevel-1"><a href="#Code_Analysis"><span class="tocnumber">4</span> <span class="toctext">Code Analysis</span></a>
<ul>
<li class="toclevel-2"><a href="#External-tool-based_Checkers"><span class="tocnumber">4.1</span> <span class="toctext">External-tool-based Checkers</span></a></li>
<li class="toclevel-2"><a href="#New_Codan_checkers"><span class="tocnumber">4.2</span> <span class="toctext">New Codan checkers</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Build"><span class="tocnumber">5</span> <span class="toctext">Build</span></a>
<ul>
<li class="toclevel-2"><a href="#Scanner_Discovery"><span class="tocnumber">5.1</span> <span class="toctext">Scanner Discovery</span></a></li>
<li class="toclevel-2"><a href="#Mac_OSX_Frameworks"><span class="tocnumber">5.2</span> <span class="toctext">Mac OSX Frameworks</span></a></li>
<li class="toclevel-2"><a href="#Console"><span class="tocnumber">5.3</span> <span class="toctext">Console</span></a></li>
<li class="toclevel-2"><a href="#Parallel_Build"><span class="tocnumber">5.4</span> <span class="toctext">Parallel Build</span></a></li>
<li class="toclevel-2"><a href="#Managed_Build"><span class="tocnumber">5.5</span> <span class="toctext">Managed Build</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#Debug"><span class="tocnumber">6</span> <span class="toctext">Debug</span></a>
<ul>
<li class="toclevel-2"><a href="#Multicore_Visualizer_View"><span class="tocnumber">6.1</span> <span class="toctext">Multicore Visualizer View</span></a></li>
<li class="toclevel-2"><a href="#Partitioning_of_large_arrays"><span class="tocnumber">6.2</span> <span class="toctext">Partitioning of large arrays</span></a></li>
<li class="toclevel-2"><a href="#Edit_Breakpoint_on_Create"><span class="tocnumber">6.3</span> <span class="toctext">Edit Breakpoint on Create</span></a></li>
<li class="toclevel-2"><a href="#Breakpoint_Toggle_Short-Cuts"><span class="tocnumber">6.4</span> <span class="toctext">Breakpoint Toggle Short-Cuts</span></a></li>
<li class="toclevel-2"><a href="#Function_Breakpoint_Manual_Entry"><span class="tocnumber">6.5</span> <span class="toctext">Function Breakpoint Manual Entry</span></a></li>
<li class="toclevel-2"><a href="#Advanced_character_encoding_support"><span class="tocnumber">6.6</span> <span class="toctext">Advanced character encoding support</span></a></li>
<li class="toclevel-2"><a href="#Timeout_support_for_GDB_commands_in_DSF.2FGDB"><span class="tocnumber">6.7</span> <span class="toctext">Timeout support for GDB commands in DSF/GDB</span></a></li>
<li class="toclevel-2"><a href="#Multi-select_Resume.2FSuspend_operations"><span class="tocnumber">6.8</span> <span class="toctext">Multi-select Resume/Suspend operations</span></a></li>
<li class="toclevel-2"><a href="#Show_only_suspended_threads_in_Debug_view"><span class="tocnumber">6.9</span> <span class="toctext">Show only suspended threads in Debug view</span></a></li>
<li class="toclevel-2"><a href="#Multi-select_attach_dialog"><span class="tocnumber">6.10</span> <span class="toctext">Multi-select attach dialog</span></a></li>
<li class="toclevel-2"><a href="#Default_Postmortem_file_location"><span class="tocnumber">6.11</span> <span class="toctext">Default Postmortem file location</span></a></li>
<li class="toclevel-2"><a href="#Support_for_Fast_Tracepoints"><span class="tocnumber">6.12</span> <span class="toctext">Support for Fast Tracepoints</span></a></li>
<li class="toclevel-2"><a href="#Enhancements_to_Tracepoints"><span class="tocnumber">6.13</span> <span class="toctext">Enhancements to Tracepoints</span></a></li>
<li class="toclevel-2"><a href="#Show_the_actual_variable_type_based_on_RTTI"><span class="tocnumber">6.14</span> <span class="toctext">Show the actual variable type based on RTTI</span></a></li>
<li class="toclevel-2"><a href="#Build_variables_support_in_.22C.2FC.2B.2B_Application.22_field_of_launch_configuration"><span class="tocnumber">6.15</span> <span class="toctext">Build variables support in "C/C++ Application" field of launch configuration</span></a></li>
<li class="toclevel-2"><a href="#Support_for_octal_number_format_in_CDI"><span class="tocnumber">6.16</span> <span class="toctext">Support for octal number format in CDI</span></a></li>
</ul>
</li>
<li class="toclevel-1"><a href="#C.2FC.2B.2B_Unit_Testing_Support"><span class="tocnumber">7</span> <span class="toctext">C/C++ Unit Testing Support</span></a></li>
<li class="toclevel-1"><a href="#Bugs_Fixed"><span class="tocnumber">8</span> <span class="toctext">Bugs Fixed in this Release</span></a></li>
</ul>
</td></tr></table>

<a name="Editor"></a><h2> <span class="headline"> Editor  </span></h2>
<a name="Pin_the_Call_Hierarchy_View"></a><h3> <span class="headline"> Pin the Call Hierarchy View  </span></h3>
<p>The Call Hierarchy View can now be pinned which enables the user to open multiple Call Hierarchy views at the same time. 
</p><p><img alt="Image:Pin view call hierarchy.png" src="../images/cdt81/pin_view_call_hierarchy.png" width="641" height="153" border="0" /> 
</p><p>This feature was completed November 12th, 2011 as part of <a href="http://bugs.eclipse.org/342498" class="external text" title="http://bugs.eclipse.org/342498" rel="nofollow">Bug 342498</a>
</p><p><br />
</p>
<a name="Filtering_in_Outline_Views"></a><h3> <span class="headline"> Filtering in Outline Views </span></h3>
<p>There are a few additional filtering options added to Project Explorer and Outline View:
</p><p><img alt="Image:anonymous.png" src="../images/cdt81/anonymous.png" width="1166" height="512" border="0" />
</p><p><br />
</p>
<a name="Mouse_Hover_for_auto_Keyword"></a><h3> <span class="headline"> Mouse Hover for 'auto' Keyword </span></h3>
<p>Mouse hover for <b>auto</b> keyword shows deduced type:
</p><p><img alt="Image:auto_hover.png" src="../images/cdt81/auto_hover.png" width="380" height="111" border="0" />
</p><p><br />
</p>
<a name="Refactoring"></a><h2> <span class="headline"> Refactoring </span></h2>
<ul><li> Code added or changed during refactoring is formatted according to user preferences.
</li><li> New code style preferences for refactoring:
<p><img alt="Image:code_style.png" src="../images/cdt81/code_style.png" width="645" height="562" border="0" />
</p></li></ul>
<p><br />
</p>
<a name="Indexing"></a><h2> <span class="headline"> Indexing </span></h2>
<ul><li> Support for multiple variants of the same header file in the index (<a href="http://bugs.eclipse.org/197989" class="external text" title="http://bugs.eclipse.org/197989" rel="nofollow">Bug 197989</a>).
</li><li> The <i>C/C++ &gt; Indexer &gt; Index unused headers</i> global preference is turned on by default (<a href="http://bugs.eclipse.org/377992" class="external text" title="http://bugs.eclipse.org/377992" rel="nofollow">Bug 377992</a>).
</li><li> New command: <i>Index &gt; Re-resolve Unresolved Includes</i>.
</li></ul>
<p><br />
</p>
<a name="Code_Analysis"></a><h2> <span class="headline"> Code Analysis </span></h2>
<a name="External-tool-based_Checkers"></a><h3> <span class="headline"> External-tool-based Checkers </span></h3>
<p>The main motivation for integrating Codan with external tools is to enjoy all the code checks from mature tools without leaving Eclipse. With the new infrastructure: 
</p>
<ol><li>External tools can be configured using Codanâ€™s preference page 
</li><li>External tools are invoked automatically when a C/C++ file is saved 
</li><li>The output of these tools can be displayed as editor markers
</li></ol>
<p>The new infrastructure includes a sample checker that invokes <a href="http://cppcheck.sourceforge.net/" class="external text" title="http://cppcheck.sourceforge.net/" rel="nofollow">Cppcheck</a>.
</p><p><img alt="Image:Cppcheck-config-1.png" src="../images/cdt81/cppcheck_config_1.png" width="628" height="571" border="0" /> 
</p><p>A more detailed configuration dialog can be found by pressing the 'Customize Selected' button: 
</p><p><img alt="Image:Cppcheck-config-2.png" src="../images/cdt81/cppcheck_config_2.png" width="556" height="413" border="0" /> 
</p><p>Users&nbsp;can specify the path of the Cppcheck executable and the arguments to pass to Cppcheck. 
</p><p>A demo of this checker can be found <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=_OKpQ-W09MU" class="external text" title="http://www.youtube.com/watch?feature=player_embedded&amp;v=_OKpQ-W09MU" rel="nofollow">here</a>.
</p><p>The new infrastructure makes it very easy to write your own external-tool-based checker. In the simplest case, you will need to:
</p>
<ul><li>Extend the abstract class AbstractExternalToolBasedChecker.
</li><li>Provide the name of your tool (e.g. "Cppcheck".)
</li><li>Provide default values for the path of the executable and arguments to pass to the executable.
</li><li>Register a IErrorParser in the extension point "org.eclipse.cdt.core.ErrorParser" with context "codan". This parser parses the output of the external tool, line by line. Itâ€™s up to you to decide what to do with the output (e.g. create error markers.)
</li></ul>
<p>Please take a look at the source code of CppcheckChecker for details.
</p><p>In the case of tools that are complex to set up, the new infrastructure is extremely flexible and configurable. It allows you to pretty much to configure every single aspect of the checker, from the files that the tool can check to the way to feed arguments to the tool.
</p>
<a name="New_Codan_checkers"></a><h3> <span class="headline"> New Codan checkers  </span></h3>
<ul><li> Class members should be properly initialized (<a href="http://bugs.eclipse.org/339795" class="external text" title="http://bugs.eclipse.org/339795" rel="nofollow">Bug 339795</a>). Example:
</li></ul>
<pre>   struct Demo {
       Demo() {}   // Warning: Member 'field' was not initialized in this constructor 
   	
       int field;
   };
</pre>
<p><br />
</p>
<a name="Build"></a><h2> <span class="headline"> Build </span></h2>
<a name="Scanner_Discovery"></a><h3> <span class="headline"> Scanner Discovery  </span></h3>
<p>Scanner Discovery has been reworked in this release. The main purpose of Scanner Discovery was always to supply Include Paths and Macros for indexer and build. Now these are supplied by Language Settings Providers. See more at <a href="http://wiki.eclipse.org/CDT/ScannerDiscovery61" class="external text">Scanner Discovery</a> on the wiki.
</p><p><img alt="Image:sd90Entries.png" src="../images/cdt81/sd90entries.png" width="1111" height="736" border="0" />
</p><p><img alt="Image:sd90Providers.png" src="../images/cdt81/sd90providers.png" width="1177" height="736" border="0" />
</p><p><br />
</p>
<a name="Mac_OSX_Frameworks"></a><h3> <span class="headline"> Mac OSX Frameworks </span></h3>
<p>The new scanner discovery makes it possible to discover and use with indexer Mac OSX Frameworks folders, see <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=69529" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=69529" rel="nofollow">bug 69529</a>
</p><p><img alt="Image:Frameworks.png" src="../images/cdt81/frameworks.png" width="450" height="202" border="0" />
</p><p><br />
</p>
<a name="Console"></a><h3> <span class="headline"> Console </span></h3>
<p>Build console marks more prominently start and end of build and reports elapsed time:
</p><p><img alt="Image:Console81.png" src="../images/cdt81/console81.png" width="635" height="263" border="0" />
</p><p><br />
</p>
<a name="Parallel_Build"></a><h3> <span class="headline"> Parallel Build </span></h3>
<p>Parallel Build was remodelled, see <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=259768" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=259768" rel="nofollow">bug 259768</a>:
</p><p><img alt="Image:ParallelBuild.png" src="../images/cdt81/parallelbuild.png" width="872" height="461" border="0" />
</p><p><br />
</p>
<a name="Managed_Build"></a><h3> <span class="headline"> Managed Build </span></h3>
<p>A few additional options to select from added to managed build, <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=365461" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=365461" rel="nofollow">bug 365461</a>.
</p><p><img alt="Image:ExtraWarnings.png" src="../images/cdt81/extrawarnings.png" width="774" height="479" border="0" />
</p><p><br />
</p>
<a name="Debug"></a><h2> <span class="headline"> Debug  </span></h2>
<a name="Multicore_Visualizer_View"></a><h3> <span class="headline"> Multicore Visualizer View  </span></h3>
<p>CDT now optionally includes a Multicore Visualizer View. This view displays a graphical representation of the state of the current application. It allows one to click- and drag-select groups of processes/threads, and apply debugging commands to them directly from the visualizer. Selections made in the Visualizer View are reflected automatically in the Debug View, and vice versa. The Multicore Visualizer View is designed to scale to large numbers of cpus and cores-per-cpu on both current and future multicore hardware. 
</p><p>The Multicore Visualizer View is meant to serve as a high-level visual overview of the current application, and can be used in tandem with the Debug View, which provides more in-depth detail. 
</p><p>The Multicore Visualizer View is just one example of a visualizer based on the underlying Visualizer Framework plugin. This provides a pluggable, extensible platform for developing visual development tools of this kind. 
</p><p><img alt="Image:VisualizerSnapshot.png" src="../images/cdt81/visualizersnapshot.png" width="648" height="421" border="0" /> 
</p><p>Note that the Multicore Visualizer will only work using a Linux target; it will not work debugging on a Windows or Mac target. This is a current limitation of GDB which does not provide information about cores, for those targets (at writing, GDB is at version 7.4). 
</p><p>This feature was completed on February 10th, 2012. For details see <a href="http://bugs.eclipse.org/335027" class="external text" title="http://bugs.eclipse.org/335027" rel="nofollow">Bug 335027</a> 
</p><p>The Multicore Visualizer is an optional feature of the CDT and must be installed manually. The feature is called <q>C/C++ Multicore Visualizer</q>. Installing it will install both the Multicore Visualizer and the Visualizer Framework. If you only want to install the Visualizer Framework (to build your own visualizer), you can install that feature by itself; it is called <q>CDT Visualizer Framework</q>.  Once the features are installed, you can access the Multicore Visualizer (or any other visualizer) by opening the view called <q>Visualizer</q>.
</p>
<a name="Partitioning_of_large_arrays"></a><h3> <span class="headline"> Partitioning of large arrays  </span></h3>
<p>CDT now displays large arrays as collections of partitions. 
</p><p><img alt="Image:LargeArray.png" src="../images/cdt81/largearray.png" width="865" height="354" border="0" /> 
</p><p>This feature was completed on January 26th, 2012 as part of <a href="http://bugs.eclipse.org/365541" class="external text" title="http://bugs.eclipse.org/365541" rel="nofollow">Bug 365541</a> 
</p>
<a name="Edit_Breakpoint_on_Create"></a><h3> <span class="headline"> Edit Breakpoint on Create  </span></h3>
<p>It is no longer necessary to first create a CDT breakpoint, then edit its properties. Properties such as enabled, ignore count, condition, temporary, can be set while creating the breakpoint. 
</p><p>There are several methods to open the properties dialog before creating the breakpoint: 
</p>
<ul><li>Add Breakpoint action. 
<ol><li>In the editor or the disassembly view, bring up the popup menu on the gutter. 
</li><li>Select the <i>Add Breakpoint...</i> menu item. 
</li><li>This brings up the breakpoint properties dialog for a line breakpoint pre-filled with the breakpoints location. 
</li></ol>
</li><li>Control-Double Click 
<ol><li>Hold the <i>Control</i> key while double-clicking on the editor gutter. 
</li><li>This brings up the breakpoint properties dialog for a line breakpoint pre-filled with the breakpoints location. 
</li></ol>
</li><li><i>Control</i> key with Toggle Method Breakpoint 
<ol><li>Open the editor's Outline view. 
</li><li>Right-click on a method to bring up the popup menu. 
</li><li>Hold the control key while selecting the Toggle Method Breakpoint action. 
</li><li>This brings up the function breakpoint dialog pre-filled with the method name. 
</li></ol>
</li><li>Add Watchpoint (C/C++) 
<ol><li>In the Breakpoints view, open the view menu. 
</li><li>Select the <i>Add Watchpoint (C/C++)...</i> action. 
</li><li>This brings up the watchpoint properties dialog. 
</li><li>User must enter the watchpoint expression. 
</li></ol>
</li><li>Add Function Breakpoint (C/C++) 
<ol><li>In the Breakpoints view, open the view menu. 
</li><li>Select the <i>Add Function Breakpoint (C/C++)...</i> action. 
</li><li>This brings up the function breakpoint properties dialog. 
</li><li>User must enter the function expression.
</li></ol>
</li></ul>
<br />
<p><img alt="Image:Cdt n and n 8 1-add breakpoint dialog.png" src="../images/cdt81/cdt_n_and_n_8_1_add_breakpoint_dialog.png" width="631" height="536" border="0" />
</p><p>Image: The breakpoint properties dialog for a line breakpoint about to be created. 
</p>
<a name="Breakpoint_Toggle_Short-Cuts"></a><h3> <span class="headline"> Breakpoint Toggle Short-Cuts  </span></h3>
<p>The Toggle Breakpoint action in the editor and disassembly view menu now supports new behaviors when used with modifier keys: 
</p>
<ul><li>Hold the <i>Shift</i> key while double-clicking on an existing breakpoint in order to enable or disable the breakpoint. 
</li><li>Hold the <i>Control</i> key while double-clicking on an existing breakpoint in order to bring up the breakpoint properties dialog to edit the existing breakpoint. 
</li><li>Hold the <i>Control</i> key while double-clicking on a location with no breakpoints, in order to bring up the breakpoint properties dialog to create a new breakpoint.
</li></ul>
<p><br /> <img alt="Image:Cdt n and n 8 1-editor gutter menu.png" src="../images/cdt81/cdt_n_and_n_8_1_editor_gutter_menu.png" width="432" height="244" border="0" /> 
</p><p>Image:The editor gutter popup menu with the hints for the new accelerators. 
</p>
<a name="Function_Breakpoint_Manual_Entry"></a><h3> <span class="headline"> Function Breakpoint Manual Entry  </span></h3>
<p>There is a new option for creating a function breakpoint: 
</p>
<ol><li>Open the Breakpoints view menu. 
</li><li>Select <i>Add Function Breakpoint C/C++</i>. 
</li><li>Fill in the function name or expression and select OK to create breakpoint.
</li></ol>
<a name="Advanced_character_encoding_support"></a><h3> <span class="headline"> Advanced character encoding support  </span></h3>
<p>CDT now supports the handling of different character encodings for strings and wide character strings while debugging. This includes full support for Unicode encodings and many other popular encodings as well. You can select the character and wide character encoding within the Debug preferences. 
</p><p><img alt="Image:DebugPreferences.png" src="../images/cdt81/debugpreferences.png" width="639" height="368" border="0" /> 
</p><p>CDT will then correctly display strings according to the selected encoding while debugging. 
</p><p><img alt="Image:CharsetDebug.png" src="../images/cdt81/charsetdebug.png" width="774" height="266" border="0" /> 
</p><p>Note that this feature requires GDB version 7.0 or later. This feature was completed on March 7th, 2012 as part of <a href="http://bugs.eclipse.org/307311" class="external text" title="http://bugs.eclipse.org/307311" rel="nofollow">Bug 307311</a>, <a href="http://bugs.eclipse.org/367456" class="external text" title="http://bugs.eclipse.org/367456" rel="nofollow">Bug 367456</a> and <a href="http://bugs.eclipse.org/370462" class="external text" title="http://bugs.eclipse.org/370462" rel="nofollow">Bug 370462</a>. 
</p>
<a name="Timeout_support_for_GDB_commands_in_DSF.2FGDB"></a><h3> <span class="headline"> Timeout support for GDB commands in DSF/GDB  </span></h3>
<p>Timeouts for GDB commands are now supported in DSF/GDB. The feature is optional and disabled by default. The timeout values are configurable. When the feature is enabled, custom values can be assigned to some commands, all other commands use the default value. This feature was completed on April 17th, 2012 as part of <a href="https://bugs.eclipse.org/bugs/show_bug.cgi?id=361934" class="external text" title="https://bugs.eclipse.org/bugs/show_bug.cgi?id=361934" rel="nofollow">Bug 361934</a>. 
</p><p><img alt="Image:TimeoutPreferences.png" src="../images/cdt81/timeoutpreferences.png" width="629" height="754" border="0" />
</p><p><img alt="Image:TimeoutAdvanced.pngâ€Ž" src="../images/cdt81/timeoutadvanced.png" width="531" height="244" border="0" />
<br />
</p>
<a name="Multi-select_Resume.2FSuspend_operations"></a><h3> <span class="headline"> Multi-select Resume/Suspend operations </span></h3>
<p>CDT now allows to perform a Resume or Suspend operation on multiple selections of the same debug session.  Because such a concept only adds value in a Non-Stop debug session, it is only supported in such a session (see <a href="../faq/index.html#What_is_the_difference_between_Non-stop_and_All-stop_multi-threaded_debugging.3F" class="external text" title="http://wiki.eclipse.org/CDT/User/FAQ#What_is_the_difference_between_Non-stop_and_All-stop_multi-threaded_debugging.3F" rel="nofollow">Non-Stop Debugging</a>).  The behavior of a multi-selection Resume/Suspend is as follows:
</p>
<ul><li> Any selected stack frames implies a selection of their corresponding thread.
</li><li> If one or more threads are selected (not processes) and the resume/suspend operation is triggered, each selected thread on which the operation is currently valid will be resumed/suspended.
</li><li> If one or more processes are selected (not threads) and the resume/suspend operation is triggered, each selected process will be resumed/suspended.  Resuming/suspending a process implies resuming/suspending each one of its threads on which the operation is currently valid.
</li><li> If both thread(s) and process(es) are selected, and the resume/suspend operation is triggered, each selected process will be resumed/suspended, and each selected thread <b>which is not part of any selected process</b> will be resumed/suspended.  The idea is that if a process is being resumed/suspended, each of its threads will be automatically resumed/suspended, and therefore, should not be resumed/suspended a second time because it is also selected.
</li></ul>
<p>As hinted above, CDT takes a permissive approach to multi-select resume/suspend.  This means that if a multi-selection includes both stopped and running threads, a resume operation is still allowed, and only the suspended threads will be resumed; similarly, on such a multi-selection, a suspend operation is allowed, and only the running threads will be suspended.
</p>
<h4>Example</h4>
<p><img alt="Image:MultiSelectRunControl.png" src="../images/cdt81/multiselectruncontrol.png" width="602" height="682" border="0" /> 
</p><p>In the above screenshot if the user were to press the Resume button with the current multi-selection the following would happen:
</p>
<ol><li> The <i>Consumer</i> process node is selected, therefore the entire process will be resumed.  This means that the suspended threads 7 and 9 will be resumed, while  threads 6, 8 and 10 will be ignored, as they are already running.
</li><li> Note that the fact that threads 9 and 10 are selected is ignored, as those threads are part of the selected <i>Consumer</i> process, which will be resumed.
</li><li> Stack frames <i>doWork()</i> and <i>work()</i> are selected and belong to thread 4, which becomes implicitly selected in their place.  Thread 4 will therefore be resumed.
</li><li> Thread 2 is selected and suspended, and will be resumed.
</li><li> Thread 5 is selected but running, so it will be ignored.
</li></ol>
<p>This feature was completed April 25th, 2012 as part of <a href="http://bugs.eclipse.org/330974" class="external text" title="http://bugs.eclipse.org/330974" rel="nofollow">Bug 330974</a>
</p>
<a name="Show_only_suspended_threads_in_Debug_view"></a><h3> <span class="headline"> Show only suspended threads in Debug view </span></h3>
<p>CDT now has an global preference that allows to only show the suspended threads within the Debug view.  When dealing with a large number of threads, a user is typically interested by the threads that are being inspected (suspended ones) and does not care about the running ones.  Using this preference, all running threads will not be shown in the Debug view.  Note that when a thread is stepping it will remain visible, although it is technically running.  The process element of the Debug view will show how many threads are currently being filtered from view.
</p><p>The below example shows the exact same debugging session.  The first screenshot only shows suspended threads, while the second shows all threads.
</p><p><img alt="Image:CDT_Debug_WithHiding.png" src="../images/cdt81/cdt_debug_withhiding.png" width="681" height="377" border="0" />
</p><p><img alt="Image:CDT_Debug_NoHiding.png" src="../images/cdt81/cdt_debug_nohiding.png" width="554" height="494" border="0" />
</p><p>Below shows how to access the preference, which is disabled by default.
</p><p><img alt="Image:CDT_Debug_HidingPref.png" src="../images/cdt81/cdt_debug_hidingpref.png" width="554" height="564" border="0" />
</p><p>This feature was completed May 4th, 2012 as part of <a href="http://bugs.eclipse.org/375585" class="external text" title="http://bugs.eclipse.org/375585" rel="nofollow">Bug 375585</a> 
</p>
<a name="Multi-select_attach_dialog"></a><h3> <span class="headline"> Multi-select attach dialog  </span></h3>
<p>CDT now allows selecting more than one process to attach to in a single user operation. The bottom pane is used to see which processes have been selected. If multi-process debugging is not supported with your debug session (needs GDB &gt;= 7.2 and NonStop enabled), only the first process will be attached to. 
</p><p><img alt="Image:Multiselect.png" src="../images/cdt81/multiselect.png" width="436" height="553" border="0" /> 
</p><p>This feature was completed June 30th, 2011 as part of <a href="http://bugs.eclipse.org/293679" class="external text" title="http://bugs.eclipse.org/293679" rel="nofollow">Bug 293679</a> 
</p>
<a name="Default_Postmortem_file_location"></a><h3> <span class="headline"> Default Postmortem file location  </span></h3>
<p>CDT now allows the user to specify a default directory for the location of core files for a postmortem launch when the prompt is triggered. Since a postmortem launch can easily be re-used for different core files of the same binary, this feature helps reduce the amount of navigation needed to select a core file. Note that specifying the actual core file is still supported, as well as leaving the entire field blank, which will also trigger the prompt, but use the default directory for its starting location. 
</p><p>Note that this 'core file' field supports the use of variables such as ${workspace_loc}. 
</p><p>This feature applies to both core files and trace files. 
</p><p><img alt="Image:CorePath.png" src="../images/cdt81/corepath.png" width="937" height="714" border="0" /> 
</p><p>This feature was completed on February 17th, 2012 as part of <a href="http://bugs.eclipse.org/362039" class="external text" title="http://bugs.eclipse.org/362039" rel="nofollow">Bug 362039</a> 
</p>
<a name="Support_for_Fast_Tracepoints"></a><h3> <span class="headline"> Support for Fast Tracepoints  </span></h3>
<p>CDT now allows the user of fast tracepoints, as supported by GDB. Fast tracepoints use an instruction jump instead of a trap for efficiency. Fast tracepoint need a minimum of space to be inserted in the program and therefore, may fail to be set at certain locations. For fast tracepoints to work, a special library called the in-process agent (IPA), must be loaded in the inferior process. This library is built and distributed as an integral part of gdbserver. Please see the GDB documentation for more details. 
</p><p>The user can select between three tracepoint modes in the launch: 
</p>
<ol><li><b>Fast</b>: Only use fast tracepoints. No tracepoint will be planted if a fast tracepoint cannot be used. 
</li><li><b>Normal</b>: Only use normal tracepoints. 
</li><li><b>Automatic</b>: Attempt to use fast tracepoints. If a fast tracepoint cannot be used, automatically use a normal tracepoint.
</li></ol>
<p><img alt="Image:FastTracepointSelection.png" src="../images/cdt81/fasttracepointselection.png" width="900" height="500" border="0" /> 
</p><p>This feature was completed July 20th, 2011 as part of <a href="http://bugs.eclipse.org/346320" class="external text" title="http://bugs.eclipse.org/346320" rel="nofollow">Bug 346320</a> 
</p>
<a name="Enhancements_to_Tracepoints"></a><h3> <span class="headline"> Enhancements to Tracepoints  </span></h3>
<p>With the use of GDB 7.4, some new features are available within Eclipse. 
</p>
<ul><li>Live enable/disable of C/C++ Tracepoints 
<ul><li>Tracepoints can now be enabled and disabled at any time after a trace experiment has been started, and will immediately take effect within the ongoing experiment. 
</li><li><b>Note:</b> Although GDB 7.4 seems to allow a tracepoint to be created during a trace experiment and will add it to the ongoing experiment, this behavior seems to have some issues. One of which is that deleting a tracepoint during an experiment will <b>not</b> remove that tracepoint from the ongoing experiment. Until this is fixed in GDB, it is recommended that the user stick to enable/disable operations during a tracing experiment.<br /> 
</li></ul>
</li><li>Smaller Fast tracepoints 
<ul><li>On 32-bit x86-architectures, fast tracepoints can now be placed at locations with 4-byte instructions, when they were previously limited to locations with instructions of 5 bytes or longer. 
</li></ul>
</li><li>Tracepoint collecting of Strings 
<ul><li>The tracepoint Collect action now has an option to request to collect character pointers as strings. It tells GDB to effectively dereference pointer-to-character types and collect the bytes of memory up to a zero byte. An optional integer limit sets a bound on the number of bytes that will be collected.  This feature was completed on April 20th, 2012. For details see <a href="http://bugs.eclipse.org/373707" class="external text" title="http://bugs.eclipse.org/373707" rel="nofollow">Bug 373707</a> 
</li></ul>
</li></ul>
<p><br />
<img alt="Image:CollectString.png" src="../images/cdt81/collectstring.png" width="437" height="304" border="0" />
</p>
<a name="Show_the_actual_variable_type_based_on_RTTI"></a><h3> <span class="headline"> Show the actual variable type based on RTTI </span></h3>
<p>With GDB 7.5 or higher CDT could show the actual variable type (not the declared one) in Variables and Expressions Views. Consider the following example:
</p>
<pre>   struct SuperInterface {
       virtual ~SuperInterface() {}  // enable RTTI for Interface class
   };
   
   struct TheImplementation&nbsp;: public SuperInterface {
       TheImplementation(int _v1, float _v2)
          &nbsp;: someField(_v1), anotherField(_v2) {}
   
       int someField;
       float anotherField;
   };
   
   
   int main() {
       SuperInterface* i = new TheImplementation(42, 4.2);
       return 0;     // [Launch debug until here]
   }
</pre>
<p>Launch the debugging session and run until return statement:
</p><p><img alt="Image:CDT_Debug_VariableTypeBasedOnRtti.png" src="../images/cdt81/cdt_debug_variabletypebasedonrtti.png" width="493" height="382" border="0" />
</p><p>This feature is enabled by default and will work if you have the proper GDB version (7.5 or higher) and RTTI generation enabled (enabled by default in gcc), however it could be turned off in preferences:
</p><p><img alt="Image:CDT_Debug_VariableTypeBasedOnRttiPref.png" src="../images/cdt81/cdt_debug_variabletypebasedonrttipref.png" width="842" height="589" border="0" />
</p><p>This feature was completed on May 5th, 2012 as part of <a href="http://bugs.eclipse.org/376901" class="external text" title="http://bugs.eclipse.org/376901" rel="nofollow">Bug 376901</a> and <a href="http://bugs.eclipse.org/377536" class="external text" title="http://bugs.eclipse.org/377536" rel="nofollow">Bug 377536</a>.
</p>
<a name="Build_variables_support_in_.22C.2FC.2B.2B_Application.22_field_of_launch_configuration"></a><h3> <span class="headline"> Build variables support in "C/C++ Application" field of launch configuration  </span></h3>
<p><img alt="Image:CDT_Debug_VarsInAppplicationField.png" src="../images/cdt81/cdt_debug_varsinappplicationfield.png" width="727" height="556" border="0" />
</p><p>There are also a few new CDT-specific build variables:
</p>
<ul><li> config_name - the name of the active configuration for the project specified as an argument;
</li><li> config_description - the description of the active configuration for the project specified as an argument;
</li></ul>
<p>This feature was completed on April 2nd, 2012 as part of <a href="http://bugs.eclipse.org/180256" class="external text" title="http://bugs.eclipse.org/180256" rel="nofollow">Bug 180256</a> and <a href="http://bugs.eclipse.org/375814" class="external text" title="http://bugs.eclipse.org/375814" rel="nofollow">Bug 375814</a>.
</p>
<a name="Support_for_octal_number_format_in_CDI"></a><h3> <span class="headline"> Support for octal number format in CDI  </span></h3>
<p>CDI now also supports to use the octal number format to display the contents of variables, expressions and registers. You can select the octal number format within the Debug preferences. This feature was completed on March 7th, 2012 as part of <a href="http://bugs.eclipse.org/370462" class="external text" title="http://bugs.eclipse.org/370462" rel="nofollow">Bug 370462</a>.
</p><p><br />
</p>
<a name="C.2FC.2B.2B_Unit_Testing_Support"></a><h2> <span class="headline"> C/C++ Unit Testing Support  </span></h2>
<p><img alt="Image:CUnitTest-View.png" src="../images/cdt81/cunittest_view.png" width="781" height="322" border="0" />
</p><p><img alt="Image:CUnitTest-Launch.png" src="../images/cdt81/cunittest_launch.png" width="807" height="506" border="0" />
</p><p>Supported features:
</p>
<ul><li>tests running with support of the following frameworks:
<ul><li><a href="http://www.boost.org/doc/libs/1_46_1/libs/test/doc/html/index.html" class="external text" title="http://www.boost.org/doc/libs/1_46_1/libs/test/doc/html/index.html" rel="nofollow">Boost.Test</a>;
</li><li><a href="http://doc.qt.nokia.com/solutions/4/qttestlib" class="external text" title="http://doc.qt.nokia.com/solutions/4/qttestlib" rel="nofollow">Qt Test</a>;
</li><li><a href="http://code.google.com/p/googletest/" class="external text" title="http://code.google.com/p/googletest/" rel="nofollow">Google Testing Framework</a>;
</li></ul>
</li><li>tests hierarchy browsing;
</li><li>test messages viewing, filtering by test or test suite; source lookup is also supported;
</li><li>testing statistics (total/failed/aborted tests count, red/green bar);
</li><li>testing time measurement;
</li><li>tests hierarchy filters (show only failed tests);
</li><li>running &amp; rerunning only selected tests (not a whole test module);
</li><li>start a debug session for the whole test module or only the selected tests;
</li><li>test messages filters (by severity);
</li><li>test runs history;
</li><li>the list of provided tests runners may be easily extended writing a new Tests Runner Plugin.
</li></ul>
<p>The HOWTO, known problems and limitation can be found in the <a href="http://wiki.eclipse.org/CDT/User/FAQ#C.2FC.2B.2B_Unit_Testing_Support" class="external text">CDT FAQ</a> on the wiki.
</p><p>This feature was completed April 18th, 2012 as part of <a href="http://bugs.eclipse.org/210366" class="external text" title="http://bugs.eclipse.org/210366" rel="nofollow">Bug 210366</a>.
</p>
<a name="Bugs_Fixed"></a><h2> <span class="headline"> Bugs Fixed in this Release </span></h2>
<p>Bugzilla tasks completed for this release:
<a href="https://bugs.eclipse.org/bugs/buglist.cgi?query_format=advanced;bug_status=RESOLVED;bug_status=VERIFIED;bug_status=CLOSED;resolution=FIXED;target_milestone=8.0.1;target_milestone=8.0.2;target_milestone=8.0.3;target_milestone=8.1;product=CDT;classification=Tools">
CDT 8.1 bug fixes</a>
</p><p><br />
</p>

	<h2>What's new in other CDT releases</h2>
	
	<p>To learn what's new in other CDT releases see:</p>
	<p><a href="cdt_c_whatsnew.htm">CDT - New and Noteworthy</a></p>
	<p><a href="cdt_c_whatsnew_82.htm">CDT 8.2 - New and Noteworthy</a></p>
	<p><a href="cdt_c_whatsnew_81.htm">CDT 8.1 - New and Noteworthy</a></p>
	<p><a href="cdt_c_whatsnew_80.htm">CDT 8.0 - New and Noteworthy</a></p>
	<p><a href="cdt_c_whatsnew_70.htm">CDT 7.0 - New and Noteworthy</a></p>
	<p><a href="cdt_c_whatsnew_60.htm">CDT 6.0 - New and Noteworthy</a></p>
	<p><a href="http://wiki.eclipse.org/CDT/User/NewIn50">CDT 5.0 - New and Noteworthy</a></p>
	
	<p><a href="#top">Back to Top</a></p>
	
	<p>&nbsp;</p>
</div>
</body>
</html>

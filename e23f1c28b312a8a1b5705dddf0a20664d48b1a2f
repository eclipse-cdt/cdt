{
  "comments": [
    {
      "key": {
        "uuid": "AABOPX//0XE\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlock.java",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T11:02:37Z",
      "side": 1,
      "message": "I\u0027m worried about using a query here.  Are we on the UI thread?  If so, we can lock the UI thread for a long time as we send the request to GDB.  If this is the case, how about doing the following instead:\n\n1- make IGDBMemory.getAddressSize() a synchronous call\n2- each time we add a process to the launch, immediately figure out what the addess size is and put in in the GDBMemory cache.\n3- always use the cache for the IGDBMemory.getAddressSize() call.\n\nI haven\u0027t really looked into that idea so I don\u0027t know if it actually makes sense.  Maybe there is a better way to address this problem (if there really is a problem).",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Rk\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlock.java",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 572
      },
      "writtenOn": "2013-04-02T17:13:35Z",
      "side": 1,
      "message": "You\u0027re right. IMemoryBlockExtension.getAddressSize() is called from some dialogs. At that point the size is already in the cache but it\u0027s not a good idea to leave as it it is now.\nI considered something similar to your suggestion. The reason I didn\u0027t implement it is the possibility of having multiple memory spaces in one process. Is it possible that different spaces have different address sizes?",
      "parentUuid": "AABOPX//0XE\u003d",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Qs\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlock.java",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T17:58:30Z",
      "side": 1,
      "message": "I\u0027m not familiar with how we use memory spaces currently, but my guess is that there will be one per process.  However, each process in a multi-process session can have different address sizes as shown below:\n\n\u003e file multi\nmulti: ELF 32-bit LSB executable\n\u003e file loopfirst\nloopfirst: ELF 64-bit LSB executable\n\u003e gdb.7.6 multi\nGNU gdb (GDB) 7.6.50.20130326-cvs\n(gdb) add-inferior -exec loopfirst\n(gdb) inferior 2\n[Switching to inferior 2 [\u003cnull\u003e] (/home/lmckhou/testing/loopfirst)]\n(gdb) print sizeof(void*)\n$1 \u003d 8\n(gdb) inferior 1\n[Switching to inferior 1 [\u003cnull\u003e] (/home/lmckhou/testing/multi)]\n(gdb) print sizeof(void*)\n$2 \u003d 4",
      "parentUuid": "AABOPX//0Rk\u003d",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0P8\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlock.java",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 572
      },
      "writtenOn": "2013-04-02T18:55:40Z",
      "side": 1,
      "message": "I think I have a solution that would work with memory spaces. The only problem is that I would need to create an IMemorySpaceDMContext in GDBMemory but for some reason MemorySpaceDMContext is defined in GdbMemoryBlock. I\u0027ll post the new version of the patch soon.\nBTW, did you try the current patch with your multiprocess example?",
      "parentUuid": "AABOPX//0Qs\u003d",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Ps\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlock.java",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T19:14:27Z",
      "side": 1,
      "message": "No, I didn\u0027t try it with multi-process, or cross-debug directly from eclipse.  I just tried the \"print sizeof(void*)\" from the gdb command-line in those different scenarios.  Let me know if there is something you prefer I try myself.",
      "parentUuid": "AABOPX//0P8\u003d",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0PY\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/internal/memory/GdbMemoryBlock.java",
        "patchSetId": 1
      },
      "lineNbr": 313,
      "author": {
        "id": 572
      },
      "writtenOn": "2013-04-02T19:26:18Z",
      "side": 1,
      "message": "I use \"data-evaluate-expression sizeof(void*)\" instead of \"print\" What I am interested in is how it works with two inferiors with different address sizes. Unfortunately, I can\u0027t try it myself.",
      "parentUuid": "AABOPX//0Ps\u003d",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Xs\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBMemory.java",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T11:02:37Z",
      "side": 1,
      "message": "I think we should register the service using the IGDBMemory name here",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Xo\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBMemory.java",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T11:02:37Z",
      "side": 1,
      "message": "Will need to unregister()",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Xc\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBMemory.java",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T11:02:37Z",
      "side": 1,
      "message": "This works fine.  But I wonder if for consistency we shouldn\u0027t use a CommandCache instead?  Such a cache will remember GDB\u0027s answer for each -data-evaluate-expression command sent here, per context.  So, as long as we use a different context (which is a separate comment below), such a cache would work.\n\nUsing that cache in our services avoid having to re-implement different caching techniques and will actually make the code a little simpler.  Although the fAddessSize cache is quite simple.\n\nUp to you.",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Xg\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBMemory.java",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T11:02:37Z",
      "side": 1,
      "message": "I wonder about the context.  We\u0027re blindly using the CommandControl context, when we have an IMemoryDMContext, which is associated to an individual process.\n\nI don\u0027t know how it works for GDB.  In multi-process, can we debug one 32bit process and one 64bit process?  This patch seems to be prepared for that, except for the use of fCommandControl.getContext().  Maybe we should use IMIContainerDMContext (which is an IExecutionDMContext)?\n\nIt would be more elegant to use IMemoryDMContext directly but MIDataEvaluateExpression does not accept that...  Unless you prefer to extend that class.",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Xk\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/GDBMemory_7_0.java",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T11:02:37Z",
      "side": 1,
      "message": "Although this class will be registered with the name IGDBMemory because it will inherit from GDBMemory, we usually explicitly add the name to the local register() call.",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0Xw\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBMemory.java",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T11:02:37Z",
      "side": 1,
      "message": "Please add javadoc.  For interfaces, I think we should properly document each mehtod.",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AABOPX//0XU\u003d",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/gdb/service/IGDBMemory.java",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 457
      },
      "writtenOn": "2013-04-02T11:02:37Z",
      "side": 1,
      "message": "Since we\u0027re adding a new interface, maybe we should immediately add a method to handle endianess, as needed in Bug 225609.\n\nThe method need not be properly implemented in the services or used anywhere, but might as well have it in the interface we don\u0027t end up with IGDBMemory2 later on.",
      "revId": "e23f1c28b312a8a1b5705dddf0a20664d48b1a2f",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}
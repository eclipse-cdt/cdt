{
  "comments": [
    {
      "key": {
        "uuid": "c41f5ad7_cac78f9b",
        "filename": "core/org.eclipse.cdt.core.tests/parser/org/eclipse/cdt/core/parser/tests/ast2/AST2CPPTests.java",
        "patchSetId": 2
      },
      "lineNbr": 13017,
      "author": {
        "id": 973
      },
      "writtenOn": "2019-03-28T06:02:03Z",
      "side": 1,
      "message": "As written, this test passes even without any code changes.\n\nWhat you want is parseAndCheckImplicitNameBindings().",
      "revId": "e7cf4eb26756b0a978acd137f8dd82e2ecb2c0a3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1a32879_9215d7c7",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/AggregateInitialization.java",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 164180
      },
      "writtenOn": "2019-03-27T20:55:26Z",
      "side": 1,
      "message": "I still have to implement this, currently I just accept all string literals for char array init. Probably the code that does the check doesn\u0027t belong to this class. Where should I place it? I am wondering if there is somewhere a similar code that checks the direct initialization, like\n\n  char s[2] \u003d \"s\";",
      "revId": "e7cf4eb26756b0a978acd137f8dd82e2ecb2c0a3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07be1cdd_346b9f75",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/semantics/AggregateInitialization.java",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 973
      },
      "writtenOn": "2019-03-28T06:11:49Z",
      "side": 1,
      "message": "cost.isNarrowingConversion() already has logic to handle the constexpr case. It actually goes to great length to do an accurate check, by checking if the _value_ of the constant expression is small enough to actually fit into the target type without narrowing (which is what the standard says should be checked).\n\nThe accuracy of this check depends on CPPBasicTypes for constant expressions tracking the value of the expression they represent. We are likely missing some cases for tracking this. In this testcase, I tracked it down to EvalUnaryTypeID.getType(), which returns CPPVisitor.get_SIZE_T(). It should probably return a clone of that type instead, and call CPPBasicType.setAssociatedNumericalValue(getValue()).",
      "revId": "e7cf4eb26756b0a978acd137f8dd82e2ecb2c0a3",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}
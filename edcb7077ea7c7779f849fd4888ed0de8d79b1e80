{
  "comments": [
    {
      "key": {
        "uuid": "d81e8290_36177f89",
        "filename": "memory/org.eclipse.cdt.debug.core.memory/src/org/eclipse/cdt/debug/internal/core/memory/transport/SRecordExport.java",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-05-05T09:59:02Z",
      "side": 1,
      "message": "Here we will fail as we are not checking where we are regarding the data obtained from memory",
      "revId": "edcb7077ea7c7779f849fd4888ed0de8d79b1e80",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d832ca0_1e16f5c7",
        "filename": "memory/org.eclipse.cdt.debug.core.memory/src/org/eclipse/cdt/debug/internal/core/memory/transport/SRecordExport.java",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 846
      },
      "writtenOn": "2020-05-07T13:49:08Z",
      "side": 1,
      "message": "Previously, the DATA_PER_TRANSFER size was the max size to be fetched from the target in one operation in bytes. This value was converted from bytes to addressable units and then passed into the call to fetch memory from the target.\n\nYour current implementation of ReadDataMemory.from() is reading one addressable unit per fetch. The implementation must allow for fetching larger chunks and this implies the capability to reduce the size of the final fetch if necessary.\n\nI would suggest passing the addressableUnits value into ReadDataMemory.from() as a 2nd parameter. Callers can then decide how many addressable units to read in one fetch.",
      "parentUuid": "d81e8290_36177f89",
      "revId": "edcb7077ea7c7779f849fd4888ed0de8d79b1e80",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "afb1192d_ba5ae8f5",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "Perhaps just returninh in the case of null can reduce complexity",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5efc4569_ff802bb3",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-26T13:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "afb1192d_ba5ae8f5",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2949770_43714510",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "This is potential ClassCastException as the assumption is too strong",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f29576cb_c1eb3827",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-26T13:26:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2949770_43714510",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "375f2409_788f22e1",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "We are loosing a lot of info here from the initial CoreException, we can just log `e.getStatus()` or construct another one using fields of the `e.getStatus()`",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7865d5be_baf591c1",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-26T13:26:45Z",
      "side": 1,
      "message": "Are you sure we are losing info - I am creating a new status containing the existing e (and its status) as a child. This is the code pattern used throughout DSF.",
      "parentUuid": "375f2409_788f22e1",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69cf881c_17d2ceea",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-27T09:16:38Z",
      "side": 1,
      "message": "Yes, I do, the most important info to loose is:\n* the stacktrace of initial exception (e.getStatus().getException())\n* the code of initial status (e.getStatus().getCode())\n\nIt is relatively easy to compare the result of two log entries:\n* DsfUIPlugin.log(new Status(IStatus.ERROR, DsfUIPlugin.PLUGIN_ID, \"Failed to refresh following receipt of a Refresh All Event.\", e)); \n* DsfUIPlugin.log(e.getStatus());",
      "parentUuid": "7865d5be_baf591c1",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d90dcb5_2d0e268f",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-27T13:29:54Z",
      "side": 1,
      "message": "By discarding the stack trace of e (and not adding a message to the status) you are losing critical information. Let me compare the results of the two log entries for you:\n\nI changed refresh to do this:\n\n    throw new CoreException(new Status(IStatus.WARNING, DsfPlugin.PLUGIN_ID, \"Inner Exception Occurred\",\n            new NullPointerException(\"inner NPE\")));\n\nthis results in my version of the code having the extra information and not losing any information as so:\n\n\n    DsfUIPlugin.log(new Status(IStatus.ERROR, DsfUIPlugin.PLUGIN_ID,\n            \"Failed to refresh following receipt of a Refresh All Event.\", e)); //$NON-NLS-1$\n\nproduces:\n\n    !ENTRY org.eclipse.cdt.dsf.ui 4 0 2020-10-27 08:59:29.641\n    !MESSAGE Failed to refresh following receipt of a Refresh All Event.\n    !STACK 1\n    org.eclipse.core.runtime.CoreException: Inner Exception Occurred\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget.refresh(DefaultRefreshAllTarget.java:47)\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.AbstractDebugVMAdapter.eventDispatched(AbstractDebugVMAdapter.java:111)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n        at org.eclipse.cdt.dsf.service.DsfSession.doDispatchEvent(DsfSession.java:541)\n        at org.eclipse.cdt.dsf.service.DsfSession$3.run(DsfSession.java:408)\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n        at java.base/java.lang.Thread.run(Thread.java:834)\n    Caused by: java.lang.NullPointerException: inner NPE\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget.refresh(DefaultRefreshAllTarget.java:48)\n        ... 13 more\n    !SUBENTRY 1 org.eclipse.cdt.dsf 2 0 2020-10-27 08:59:29.642\n    !MESSAGE Inner Exception Occurred\n    !STACK 0\n    java.lang.NullPointerException: inner NPE\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget.refresh(DefaultRefreshAllTarget.java:48)\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.AbstractDebugVMAdapter.eventDispatched(AbstractDebugVMAdapter.java:111)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n        at org.eclipse.cdt.dsf.service.DsfSession.doDispatchEvent(DsfSession.java:541)\n        at org.eclipse.cdt.dsf.service.DsfSession$3.run(DsfSession.java:408)\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n        at java.base/java.lang.Thread.run(Thread.java:834)\n\n\nWhile the reduced version:\n\n        DsfUIPlugin.log(e.getStatus()); \n\nhas the inner exception, but not the outer exception.\n\n    !ENTRY org.eclipse.cdt.dsf 2 0 2020-10-27 08:59:29.643\n    !MESSAGE Inner Exception Occurred\n    !STACK 0\n    java.lang.NullPointerException: inner NPE\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget.refresh(DefaultRefreshAllTarget.java:48)\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.AbstractDebugVMAdapter.eventDispatched(AbstractDebugVMAdapter.java:111)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n        at org.eclipse.cdt.dsf.service.DsfSession.doDispatchEvent(DsfSession.java:541)\n        at org.eclipse.cdt.dsf.service.DsfSession$3.run(DsfSession.java:408)\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n        at java.base/java.lang.Thread.run(Thread.java:834)\n\nNow, for cases where there is a exception attached to the status there is only a minor difference, arguably the doubling of stack traces is even annoying. However, you don\u0027t know who or how the status was created. If the inner status was created on a different thread, or didn\u0027t include an exception lets see how they compare.\n\nHere is an example of an inner exception on a different thread - note this case is common in the executor flow common in asynchronous programming, like that used in DSF (see RequestMonitor for more info). Here is what I added to DefaultRefreshAllTarget which is an over simplification about how much of the executor and request monitors report back errors.\n\n    private final class RunnableImplementation implements Runnable {\n        private IStatus result \u003d null;\n\n        @Override\n        public void run() {\n            result \u003d new Status(IStatus.WARNING, DsfPlugin.PLUGIN_ID, \"Something in a thread\",\n                    new NullPointerException(\"npe in a thread\"));\n        }\n    }\n\n    @Override\n    public void refresh(ISelection debugContext) throws CoreException {\n        RunnableImplementation runnable \u003d new RunnableImplementation();\n        Thread thread \u003d new Thread(runnable);\n        thread.start();\n        try {\n            thread.join();\n        } catch (InterruptedException e) {\n        }\n        if (runnable.result !\u003d null) {\n            throw new CoreException(runnable.result);\n        }\n\nWith the version where we make a new status, this is what is in the log:\n\n    !ENTRY org.eclipse.cdt.dsf.ui 4 0 2020-10-27 09:13:46.741\n    !MESSAGE Failed to refresh following receipt of a Refresh All Event.\n    !STACK 1\n    org.eclipse.core.runtime.CoreException: Something in a thread\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget.refresh(DefaultRefreshAllTarget.java:67)\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.AbstractDebugVMAdapter.eventDispatched(AbstractDebugVMAdapter.java:111)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n        at org.eclipse.cdt.dsf.service.DsfSession.doDispatchEvent(DsfSession.java:541)\n        at org.eclipse.cdt.dsf.service.DsfSession$3.run(DsfSession.java:408)\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n        at java.base/java.lang.Thread.run(Thread.java:834)\n    Caused by: java.lang.NullPointerException: npe in a thread\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget$RunnableImplementation.run(DefaultRefreshAllTarget.java:41)\n        ... 1 more\n    !SUBENTRY 1 org.eclipse.cdt.dsf 2 0 2020-10-27 09:13:46.742\n    !MESSAGE Something in a thread\n    !STACK 0\n    java.lang.NullPointerException: npe in a thread\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget$RunnableImplementation.run(DefaultRefreshAllTarget.java:41)\n        at java.base/java.lang.Thread.run(Thread.java:834)\n\nHowever, if you discard the stack exception in the CoreException you get this in the log, which can be pretty hard to figure out where it came from:\n\n    !ENTRY org.eclipse.cdt.dsf 2 0 2020-10-27 09:13:46.743\n    !MESSAGE Something in a thread\n    !STACK 0\n    java.lang.NullPointerException: npe in a thread\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget$RunnableImplementation.run(DefaultRefreshAllTarget.java:41)\n        at java.base/java.lang.Thread.run(Thread.java:834)\n\nFinally, the no exception in a status case, I put this in refresh:\n\n    throw new CoreException(new Status(IStatus.WARNING, DsfPlugin.PLUGIN_ID, \"Something in a status\"));\n\nWith full code I see:\n\n\n    !ENTRY org.eclipse.cdt.dsf.ui 4 0 2020-10-27 09:05:25.601\n    !MESSAGE Failed to refresh following receipt of a Refresh All Event.\n    !STACK 1\n    org.eclipse.core.runtime.CoreException: Something in a status\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.actions.DefaultRefreshAllTarget.refresh(DefaultRefreshAllTarget.java:47)\n        at org.eclipse.cdt.dsf.debug.ui.viewmodel.AbstractDebugVMAdapter.eventDispatched(AbstractDebugVMAdapter.java:111)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n        at org.eclipse.cdt.dsf.service.DsfSession.doDispatchEvent(DsfSession.java:541)\n        at org.eclipse.cdt.dsf.service.DsfSession$3.run(DsfSession.java:408)\n        at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\n        at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n        at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\n        at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\n        at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\n        at java.base/java.lang.Thread.run(Thread.java:834)\n    !SUBENTRY 1 org.eclipse.cdt.dsf 2 0 2020-10-27 09:05:25.601\n    !MESSAGE Something in a status\n\nand with just e.getStatus() all you get in the log is this. As the status can even come from a different plug-in (as I simulated in all these examples) you can\u0027t even tell which plug-in logged the error.\n\n    !ENTRY org.eclipse.cdt.dsf 2 0 2020-10-27 09:05:25.602\n    !MESSAGE Something in a status\n\nTherefore, when I add something to the log I will err on the side of a bit too much or duplicated information some times for the benefit of having all the information the rest of the time.",
      "parentUuid": "69cf881c_17d2ceea",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7cd9337_f1207402",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-27T18:03:49Z",
      "side": 1,
      "message": "Thank you for so detailed answer, Jonah. You are right, if Status used like this - your approach is better.\nWhen I started this discussion, I tried to say that Status and CoreException was misused in the added code. Now I see that I failed to explain my position and provided weak suggestion to improve.\nGenerally CoreException does not work perfect in the chain with \"normal\" exceptions.\nIt is better to use either \"normal\" exceptions or status hierarchies, i.e. the \"cause\" Status should be wrapped with `new MultiStatus(...).add\u0027 or `new MultiStatus(...).merge`",
      "parentUuid": "9d90dcb5_2d0e268f",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b0880af_1e40a9cf",
        "filename": "dsf/org.eclipse.cdt.dsf.ui/src/org/eclipse/cdt/dsf/debug/ui/viewmodel/AbstractDebugVMAdapter.java",
        "patchSetId": 1
      },
      "lineNbr": 110,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-27T18:14:26Z",
      "side": 1,
      "message": "\u003e the \"cause\" Status should be wrapped with `new MultiStatus(...).add\u0027 or `new MultiStatus(...).merge`\n\nPlease provide an example of when unwrapping and discarding the CoreException is best when logging. The CoreException has the useful stack trace in it. The Status\u0027s stack trace is still a different stack trace than the CoreException\u0027s one.\n\nThis is different than the case where you are presenting the user with a Status or collection of Status (MultiStatus). However even then the UX for user\u0027s being presented Status is generally pretty subpar so I have rarely seen the effort worth it except in the GUIs where the designer has spent anytime on error handling (such as refactoring wizards).",
      "parentUuid": "c7cd9337_f1207402",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea02118c_16b87d90",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandControlService.java",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "Shoundn\u0027t we call it `ICommandControlRefreshAllDMEvent`? The name is not perfect but looks similar to sibling names.",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66bce16e_9f00c94d",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/debug/service/command/ICommandControlService.java",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "Does it mean that we have another entity that is smart enough to control the control service?\nI\u0027m not sure that this method belongs to this interface, do you think we can extract it to a separate one?",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d1fa122_9547fd52",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "Why not to return just an empty array?",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43ad72d7_3ae0cc09",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-26T13:26:45Z",
      "side": 1,
      "message": "DsfServicesTracker is a convenience class that provides similar API to bundle context\u0027s methods. The existing API in this class and in BundleContext matches this pattern.",
      "parentUuid": "7d1fa122_9547fd52",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8f4d4d3_df8fbb5d",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 216,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-27T09:16:38Z",
      "side": 1,
      "message": "\u003e The existing API in this class and in BundleContext matches this pattern.\n\nBundleContext returns empty collection or throws an Exception while new DsfServiceTracker methods hide the Exception and return `null` instead of empty array. IMO it is not matching. And also returning `null` instead of array/collection is not friendly for callers.",
      "parentUuid": "43ad72d7_3ae0cc09",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08d0068c_0df4fb26",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "Why not to return just an empty array?",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdc42461_ad3049f0",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 255,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-26T13:26:45Z",
      "side": 1,
      "message": "ditto.",
      "parentUuid": "08d0068c_0df4fb26",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30ce579a_b6123ffe",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "We have `fServiceFilter` for default case, let\u0027s use it",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c81177cb_3992ba81",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 259,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-26T13:26:45Z",
      "side": 1,
      "message": "matching existing code style of null for default.",
      "parentUuid": "30ce579a_b6123ffe",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a992a2e_70d9d049",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 23745
      },
      "writtenOn": "2020-10-26T06:44:04Z",
      "side": 1,
      "message": "Why not to return just an empty array?",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84f53e4e_d947e7c4",
        "filename": "dsf/org.eclipse.cdt.dsf/src/org/eclipse/cdt/dsf/service/DsfServicesTracker.java",
        "patchSetId": 1
      },
      "lineNbr": 289,
      "author": {
        "id": 27769
      },
      "writtenOn": "2020-10-26T13:26:45Z",
      "side": 1,
      "message": "ditto.",
      "parentUuid": "5a992a2e_70d9d049",
      "revId": "f1972336b4e2c97c3bb27393fc83b8f03fdfd746",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}
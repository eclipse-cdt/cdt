{
  "comments": [
    {
      "key": {
        "uuid": "a7fb1785_b281d809",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizer.java",
        "patchSetId": 4
      },
      "lineNbr": 1067,
      "author": {
        "id": 482
      },
      "writtenOn": "2015-02-20T13:52:27Z",
      "side": 1,
      "message": "This has been there since the beginning but does not seem right to swap the reference to fDataModel before loading data to it.\n  This reference is used e.g. with getLoadTimer and updateLoads, which means an early swap could cause this methods to operate on a possibly empty model.\n\nWhat about setting it in the handleComplete of the top request monitor i.e.  inside getVisualizerModel before calling updateLoads ?",
      "range": {
        "startLine": 1067,
        "startChar": 0,
        "endLine": 1067,
        "endChar": 66
      },
      "revId": "fc82f92e6cdee73c934ad38c8aab004e3a6e962d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7fb1785_20ac72a7",
        "filename": "dsf-gdb/org.eclipse.cdt.dsf.gdb.multicorevisualizer.ui/src/org/eclipse/cdt/dsf/gdb/multicorevisualizer/internal/ui/view/MulticoreVisualizer.java",
        "patchSetId": 4
      },
      "lineNbr": 1067,
      "author": {
        "id": 457
      },
      "writtenOn": "2015-02-20T18:04:03Z",
      "side": 1,
      "message": "I had the same idea when reviewing your patch that dealt with accessing two different models at the same time.  But when I looked more into it I changed my mind.\n\nfDataModel is not only used in this class, but can be accessed by others using getModel().  This is used by MulticoreVisualizerEventListener to add/remove/modify elements such as threads when they are actually started/exited.\n\nMy worry about updating fDataModel at the end of the model creation is that e.g., if a new thread is created while we are building the model, then it would be added to the old model and therefore lost from the new model.  So, I think we have to provide access to the new model as soon as possible.\n\nThe flip side, as you mention, is that using the model before it is fully created could cause problems, but I believe that both the MulticoreVisualizer and the MulticoreVisualizerEventListener protect themselves against that by always checking for null and such things.\n\nWhat do you think?",
      "parentUuid": "a7fb1785_b281d809",
      "range": {
        "startLine": 1067,
        "startChar": 0,
        "endLine": 1067,
        "endChar": 66
      },
      "revId": "fc82f92e6cdee73c934ad38c8aab004e3a6e962d",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}
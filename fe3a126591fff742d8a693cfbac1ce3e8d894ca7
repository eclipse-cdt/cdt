{
  "comments": [
    {
      "key": {
        "uuid": "e0d0348b_e22c1035",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitVariable.java",
        "patchSetId": 22
      },
      "lineNbr": 31,
      "author": {
        "id": 973
      },
      "writtenOn": "2019-07-24T05:35:24Z",
      "side": 1,
      "message": "We probably want to override getInitialValue() as well, to return initializerEvaluation.getValue().\n\nThere are other things we may need to override, like isConstexpr(), but we can do that on an as-needed basis.",
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1c717f9_2bbc535e",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPImplicitVariable.java",
        "patchSetId": 22
      },
      "lineNbr": 34,
      "author": {
        "id": 973
      },
      "writtenOn": "2019-07-24T05:35:24Z",
      "side": 1,
      "message": "Evaluations already cache their type, so we can omit this and return initializerEvaluation.getType() from getType().",
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5695e915_fded0ced",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPVariable.java",
        "patchSetId": 22
      },
      "lineNbr": 355,
      "author": {
        "id": 973
      },
      "writtenOn": "2019-07-24T05:35:24Z",
      "side": 1,
      "message": "The parameter type can remain the interface type here.",
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96f516db_08bf930f",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPVariable.java",
        "patchSetId": 22
      },
      "lineNbr": 362,
      "author": {
        "id": 973
      },
      "writtenOn": "2019-07-24T05:35:24Z",
      "side": 1,
      "message": "If we\u0027d like to cache the evaluation strategy too, we can do it as follows:\n\n* Add a class CPPStructuredBindingComposite deriving from CPPImplicitVariable\n* Give it a field of type IStructuredBindingNameEvaluationStrategy, and a getter for it\n* The strategy could either be computed in the constructor, or on the first call of the getter\n* Here, we cast the CPPImplicitVariable to CPPStructuredBindingComposite and query the cached strategy\n\n(Alternatively, we could avoid the extra class by renaming CPPImplicitVariable and putting the new method directly there. However, I think having a generic CPPImplicitVariable class is useful for future evolution.)",
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c754da18_7628609e",
        "filename": "core/org.eclipse.cdt.core/parser/org/eclipse/cdt/internal/core/dom/parser/cpp/CPPVariable.java",
        "patchSetId": 22
      },
      "lineNbr": 382,
      "author": {
        "id": 973
      },
      "writtenOn": "2019-07-24T05:35:24Z",
      "side": 1,
      "message": "Likewise, this method can return the interface type.",
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c55e4c62_2f35b845",
        "filename": "core/org.eclipse.cdt.core/src/org/eclipse/cdt/core/formatter/DefaultCodeFormatterOptions.java",
        "patchSetId": 22
      },
      "lineNbr": 311,
      "author": {
        "id": 13743
      },
      "writtenOn": "2019-07-24T06:33:18Z",
      "side": 1,
      "message": "You added new options here but there\u0027s no UI to control them. Please add the UI in order to allow the user to change it.",
      "range": {
        "startLine": 304,
        "startChar": 0,
        "endLine": 311,
        "endChar": 73
      },
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30f43b44_d0024064",
        "filename": "core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/CodeFormatterVisitor.java",
        "patchSetId": 22
      },
      "lineNbr": 724,
      "author": {
        "id": 13743
      },
      "writtenOn": "2019-07-24T06:33:18Z",
      "side": 1,
      "message": "ICPPASTStructuredBindingDeclaration is a child class of IASTSimpleDeclaration so the \"else if\" is correctly placed before the \"else if\" of IASTSimpleDeclaration, but in my opinion to have this depedency is not really good. Maybe it would be better to delegate the formatting inside the visit of IASTSimpleDeclaration:\n\nint visit(IASTSimpleDeclaration declaration) {\nif (declaration instanceof ICPPASTStructuredBindingDeclaration)\n   return visit((ICPPASTStructuredBindingDeclaration)declaration);\n.....\n}",
      "range": {
        "startLine": 723,
        "startChar": 0,
        "endLine": 724,
        "endChar": 61
      },
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ef804ce_a2a38171",
        "filename": "core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/CodeFormatterVisitor.java",
        "patchSetId": 22
      },
      "lineNbr": 1949,
      "author": {
        "id": 13743
      },
      "writtenOn": "2019-07-24T06:33:18Z",
      "side": 1,
      "message": "Usually this code fails with an exception if we are inside a macro. Maybe it\u0027s better to use peekNextToken to verify if the token is what we expect. A test should be added to cover this case.",
      "range": {
        "startLine": 1949,
        "startChar": 2,
        "endLine": 1949,
        "endChar": 111
      },
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a7da76e_e16850d6",
        "filename": "core/org.eclipse.cdt.core/src/org/eclipse/cdt/internal/formatter/CodeFormatterVisitor.java",
        "patchSetId": 22
      },
      "lineNbr": 3676,
      "author": {
        "id": 13743
      },
      "writtenOn": "2019-07-24T06:33:18Z",
      "side": 1,
      "message": "I guess you modified this code to take into account an inline declaration using structured binding inside a range for loop, (am I right?) but I can\u0027t see a test covering this case. In addition I think it\u0027s possible to use this syntax in C++17 even in \"if\" and \"switch\" initializer.",
      "range": {
        "startLine": 3676,
        "startChar": 3,
        "endLine": 3676,
        "endChar": 40
      },
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86395d8a_7b7f9799",
        "filename": "core/org.eclipse.cdt.ui.tests/ui/org/eclipse/cdt/ui/tests/text/CodeFormatterTest.java",
        "patchSetId": 22
      },
      "lineNbr": 4423,
      "author": {
        "id": 13743
      },
      "writtenOn": "2019-07-24T06:33:18Z",
      "side": 1,
      "message": "As I said in my previous comments, we should add more tests here to cover: macro usage, \"if\"/\"switch\"/\"for\" inline initializer.",
      "range": {
        "startLine": 4421,
        "startChar": 0,
        "endLine": 4423,
        "endChar": 2
      },
      "revId": "fe3a126591fff742d8a693cfbac1ce3e8d894ca7",
      "serverId": "97ee7c02-f12f-4043-b43e-dea463d88b31",
      "unresolved": false
    }
  ]
}
/**
 * ******************************************************************************
 * Copyright (c) 2016, 2017 Kichwa Coders Ltd (https://kichwacoders.com/) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  ******************************************************************************
 * 
 * 
 * generated by Xtext 2.10.0
 * Copyright header generated by GenerateLinkerScript.mwe2
 */
package org.eclipse.cdt.linkerscript.linkerScript;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Wildcard Sort</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage#getWildcardSort()
 * @model
 * @generated
 */
public enum WildcardSort implements Enumerator
{
  /**
   * The '<em><b>SORT NONE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SORT_NONE_VALUE
   * @generated
   * @ordered
   */
  SORT_NONE(0, "SORT_NONE", "SORT_NONE"),

  /**
   * The '<em><b>SORT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SORT_VALUE
   * @generated
   * @ordered
   */
  SORT(1, "SORT", "SORT"),

  /**
   * The '<em><b>SORT BY NAME</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SORT_BY_NAME_VALUE
   * @generated
   * @ordered
   */
  SORT_BY_NAME(2, "SORT_BY_NAME", "SORT_BY_NAME"),

  /**
   * The '<em><b>SORT BY ALIGNMENT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SORT_BY_ALIGNMENT_VALUE
   * @generated
   * @ordered
   */
  SORT_BY_ALIGNMENT(3, "SORT_BY_ALIGNMENT", "SORT_BY_ALIGNMENT"),

  /**
   * The '<em><b>SORT BY INIT PRIORITY</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SORT_BY_INIT_PRIORITY_VALUE
   * @generated
   * @ordered
   */
  SORT_BY_INIT_PRIORITY(4, "SORT_BY_INIT_PRIORITY", "SORT_BY_INIT_PRIORITY");

  /**
   * The '<em><b>SORT NONE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>SORT NONE</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SORT_NONE
   * @model
   * @generated
   * @ordered
   */
  public static final int SORT_NONE_VALUE = 0;

  /**
   * The '<em><b>SORT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>SORT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SORT
   * @model
   * @generated
   * @ordered
   */
  public static final int SORT_VALUE = 1;

  /**
   * The '<em><b>SORT BY NAME</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>SORT BY NAME</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SORT_BY_NAME
   * @model
   * @generated
   * @ordered
   */
  public static final int SORT_BY_NAME_VALUE = 2;

  /**
   * The '<em><b>SORT BY ALIGNMENT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>SORT BY ALIGNMENT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SORT_BY_ALIGNMENT
   * @model
   * @generated
   * @ordered
   */
  public static final int SORT_BY_ALIGNMENT_VALUE = 3;

  /**
   * The '<em><b>SORT BY INIT PRIORITY</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>SORT BY INIT PRIORITY</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SORT_BY_INIT_PRIORITY
   * @model
   * @generated
   * @ordered
   */
  public static final int SORT_BY_INIT_PRIORITY_VALUE = 4;

  /**
   * An array of all the '<em><b>Wildcard Sort</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final WildcardSort[] VALUES_ARRAY =
    new WildcardSort[]
    {
      SORT_NONE,
      SORT,
      SORT_BY_NAME,
      SORT_BY_ALIGNMENT,
      SORT_BY_INIT_PRIORITY,
    };

  /**
   * A public read-only list of all the '<em><b>Wildcard Sort</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<WildcardSort> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Wildcard Sort</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static WildcardSort get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      WildcardSort result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Wildcard Sort</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static WildcardSort getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      WildcardSort result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Wildcard Sort</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static WildcardSort get(int value)
  {
    switch (value)
    {
      case SORT_NONE_VALUE: return SORT_NONE;
      case SORT_VALUE: return SORT;
      case SORT_BY_NAME_VALUE: return SORT_BY_NAME;
      case SORT_BY_ALIGNMENT_VALUE: return SORT_BY_ALIGNMENT;
      case SORT_BY_INIT_PRIORITY_VALUE: return SORT_BY_INIT_PRIORITY;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private WildcardSort(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //WildcardSort

/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.cdt.linkerscript.linkerScript.impl;

import java.util.Collection;

import org.eclipse.cdt.linkerscript.linkerScript.FileList;
import org.eclipse.cdt.linkerscript.linkerScript.FileListName;
import org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>File List</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.FileListImpl#getFiles <em>Files</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.FileListImpl#isAsNeeded <em>As Needed</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.FileListImpl#getList <em>List</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FileListImpl extends MinimalEObjectImpl.Container implements FileList
{
  /**
   * The cached value of the '{@link #getFiles() <em>Files</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFiles()
   * @generated
   * @ordered
   */
  protected EList<FileListName> files;

  /**
   * The default value of the '{@link #isAsNeeded() <em>As Needed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAsNeeded()
   * @generated
   * @ordered
   */
  protected static final boolean AS_NEEDED_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isAsNeeded() <em>As Needed</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isAsNeeded()
   * @generated
   * @ordered
   */
  protected boolean asNeeded = AS_NEEDED_EDEFAULT;

  /**
   * The cached value of the '{@link #getList() <em>List</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getList()
   * @generated
   * @ordered
   */
  protected FileList list;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileListImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LinkerScriptPackage.Literals.FILE_LIST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<FileListName> getFiles()
  {
    if (files == null)
    {
      files = new EObjectContainmentEList<FileListName>(FileListName.class, this, LinkerScriptPackage.FILE_LIST__FILES);
    }
    return files;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isAsNeeded()
  {
    return asNeeded;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAsNeeded(boolean newAsNeeded)
  {
    boolean oldAsNeeded = asNeeded;
    asNeeded = newAsNeeded;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.FILE_LIST__AS_NEEDED, oldAsNeeded, asNeeded));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FileList getList()
  {
    return list;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetList(FileList newList, NotificationChain msgs)
  {
    FileList oldList = list;
    list = newList;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.FILE_LIST__LIST, oldList, newList);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setList(FileList newList)
  {
    if (newList != list)
    {
      NotificationChain msgs = null;
      if (list != null)
        msgs = ((InternalEObject)list).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.FILE_LIST__LIST, null, msgs);
      if (newList != null)
        msgs = ((InternalEObject)newList).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.FILE_LIST__LIST, null, msgs);
      msgs = basicSetList(newList, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.FILE_LIST__LIST, newList, newList));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.FILE_LIST__FILES:
        return ((InternalEList<?>)getFiles()).basicRemove(otherEnd, msgs);
      case LinkerScriptPackage.FILE_LIST__LIST:
        return basicSetList(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.FILE_LIST__FILES:
        return getFiles();
      case LinkerScriptPackage.FILE_LIST__AS_NEEDED:
        return isAsNeeded();
      case LinkerScriptPackage.FILE_LIST__LIST:
        return getList();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.FILE_LIST__FILES:
        getFiles().clear();
        getFiles().addAll((Collection<? extends FileListName>)newValue);
        return;
      case LinkerScriptPackage.FILE_LIST__AS_NEEDED:
        setAsNeeded((Boolean)newValue);
        return;
      case LinkerScriptPackage.FILE_LIST__LIST:
        setList((FileList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.FILE_LIST__FILES:
        getFiles().clear();
        return;
      case LinkerScriptPackage.FILE_LIST__AS_NEEDED:
        setAsNeeded(AS_NEEDED_EDEFAULT);
        return;
      case LinkerScriptPackage.FILE_LIST__LIST:
        setList((FileList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.FILE_LIST__FILES:
        return files != null && !files.isEmpty();
      case LinkerScriptPackage.FILE_LIST__AS_NEEDED:
        return asNeeded != AS_NEEDED_EDEFAULT;
      case LinkerScriptPackage.FILE_LIST__LIST:
        return list != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (asNeeded: ");
    result.append(asNeeded);
    result.append(')');
    return result.toString();
  }

} //FileListImpl

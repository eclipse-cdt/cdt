/**
 * ******************************************************************************
 * Copyright (c) 2016, 2017 Kichwa Coders Ltd (https://kichwacoders.com/) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  ******************************************************************************
 * 
 * 
 * generated by Xtext 2.10.0
 * Copyright header generated by GenerateLinkerScript.mwe2
 */
package org.eclipse.cdt.linkerscript.linkerScript.impl;

import java.util.Collection;

import org.eclipse.cdt.linkerscript.linkerScript.InputSectionWild;
import org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage;
import org.eclipse.cdt.linkerscript.linkerScript.Wildcard;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Input Section Wild</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.InputSectionWildImpl#getWildFile <em>Wild File</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.InputSectionWildImpl#getSections <em>Sections</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InputSectionWildImpl extends InputSectionImpl implements InputSectionWild
{
  /**
   * The cached value of the '{@link #getWildFile() <em>Wild File</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWildFile()
   * @generated
   * @ordered
   */
  protected Wildcard wildFile;

  /**
   * The cached value of the '{@link #getSections() <em>Sections</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSections()
   * @generated
   * @ordered
   */
  protected EList<Wildcard> sections;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InputSectionWildImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LinkerScriptPackage.Literals.INPUT_SECTION_WILD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Wildcard getWildFile()
  {
    return wildFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWildFile(Wildcard newWildFile, NotificationChain msgs)
  {
    Wildcard oldWildFile = wildFile;
    wildFile = newWildFile;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE, oldWildFile, newWildFile);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWildFile(Wildcard newWildFile)
  {
    if (newWildFile != wildFile)
    {
      NotificationChain msgs = null;
      if (wildFile != null)
        msgs = ((InternalEObject)wildFile).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE, null, msgs);
      if (newWildFile != null)
        msgs = ((InternalEObject)newWildFile).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE, null, msgs);
      msgs = basicSetWildFile(newWildFile, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE, newWildFile, newWildFile));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Wildcard> getSections()
  {
    if (sections == null)
    {
      sections = new EObjectContainmentEList<Wildcard>(Wildcard.class, this, LinkerScriptPackage.INPUT_SECTION_WILD__SECTIONS);
    }
    return sections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE:
        return basicSetWildFile(null, msgs);
      case LinkerScriptPackage.INPUT_SECTION_WILD__SECTIONS:
        return ((InternalEList<?>)getSections()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE:
        return getWildFile();
      case LinkerScriptPackage.INPUT_SECTION_WILD__SECTIONS:
        return getSections();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE:
        setWildFile((Wildcard)newValue);
        return;
      case LinkerScriptPackage.INPUT_SECTION_WILD__SECTIONS:
        getSections().clear();
        getSections().addAll((Collection<? extends Wildcard>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE:
        setWildFile((Wildcard)null);
        return;
      case LinkerScriptPackage.INPUT_SECTION_WILD__SECTIONS:
        getSections().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.INPUT_SECTION_WILD__WILD_FILE:
        return wildFile != null;
      case LinkerScriptPackage.INPUT_SECTION_WILD__SECTIONS:
        return sections != null && !sections.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //InputSectionWildImpl

/**
 * ******************************************************************************
 * Copyright (c) 2016, 2017 Kichwa Coders Ltd (https://kichwacoders.com/) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  ******************************************************************************
 * 
 * 
 * generated by Xtext 2.10.0
 * Copyright header generated by GenerateLinkerScript.mwe2
 */
package org.eclipse.cdt.linkerscript.linkerScript.impl;

import org.eclipse.cdt.linkerscript.linkerScript.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LinkerScriptFactoryImpl extends EFactoryImpl implements LinkerScriptFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static LinkerScriptFactory init()
  {
    try
    {
      LinkerScriptFactory theLinkerScriptFactory = (LinkerScriptFactory)EPackage.Registry.INSTANCE.getEFactory(LinkerScriptPackage.eNS_URI);
      if (theLinkerScriptFactory != null)
      {
        return theLinkerScriptFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new LinkerScriptFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkerScriptFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case LinkerScriptPackage.LINKER_SCRIPT: return createLinkerScript();
      case LinkerScriptPackage.LINKER_SCRIPT_STATEMENT: return createLinkerScriptStatement();
      case LinkerScriptPackage.STATEMENT: return createStatement();
      case LinkerScriptPackage.FILE_LIST: return createFileList();
      case LinkerScriptPackage.FILE_LIST_NAME: return createFileListName();
      case LinkerScriptPackage.PHDRS_COMMAND: return createPhdrsCommand();
      case LinkerScriptPackage.PHDR: return createPhdr();
      case LinkerScriptPackage.SECTIONS_COMMAND: return createSectionsCommand();
      case LinkerScriptPackage.OUTPUT_SECTION_COMMAND: return createOutputSectionCommand();
      case LinkerScriptPackage.OUTPUT_SECTION: return createOutputSection();
      case LinkerScriptPackage.OUTPUT_SECTION_ALIGN: return createOutputSectionAlign();
      case LinkerScriptPackage.OUTPUT_SECTION_CONSTRAINT: return createOutputSectionConstraint();
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE: return createOutputSectionType();
      case LinkerScriptPackage.ASSIGNMENT: return createAssignment();
      case LinkerScriptPackage.INPUT_SECTION: return createInputSection();
      case LinkerScriptPackage.WILDCARD: return createWildcard();
      case LinkerScriptPackage.MEMORY_COMMAND: return createMemoryCommand();
      case LinkerScriptPackage.MEMORY: return createMemory();
      case LinkerScriptPackage.LEXPRESSION: return createLExpression();
      case LinkerScriptPackage.STATEMENT_ASSIGNMENT: return createStatementAssignment();
      case LinkerScriptPackage.STATEMENT_STARTUP: return createStatementStartup();
      case LinkerScriptPackage.STATEMENT_ENTRY: return createStatementEntry();
      case LinkerScriptPackage.STATEMENT_ASSERT: return createStatementAssert();
      case LinkerScriptPackage.STATEMENT_TARGET: return createStatementTarget();
      case LinkerScriptPackage.STATEMENT_SEARCH_DIR: return createStatementSearchDir();
      case LinkerScriptPackage.STATEMENT_OUTPUT: return createStatementOutput();
      case LinkerScriptPackage.STATEMENT_OUTPUT_FORMAT: return createStatementOutputFormat();
      case LinkerScriptPackage.STATEMENT_OUTPUT_ARCH: return createStatementOutputArch();
      case LinkerScriptPackage.STATEMENT_FORCE_COMMON_ALLOCATION: return createStatementForceCommonAllocation();
      case LinkerScriptPackage.STATEMENT_INHIBIT_COMMON_ALLOCATION: return createStatementInhibitCommonAllocation();
      case LinkerScriptPackage.STATEMENT_INPUT: return createStatementInput();
      case LinkerScriptPackage.STATEMENT_GROUP: return createStatementGroup();
      case LinkerScriptPackage.STATEMENT_MAP: return createStatementMap();
      case LinkerScriptPackage.STATEMENT_NO_CROSS_REFS: return createStatementNoCrossRefs();
      case LinkerScriptPackage.STATEMENT_NO_CROSS_REFS_TO: return createStatementNoCrossRefsTo();
      case LinkerScriptPackage.STATEMENT_EXTERN: return createStatementExtern();
      case LinkerScriptPackage.STATEMENT_INCLUDE: return createStatementInclude();
      case LinkerScriptPackage.STATEMENT_NOP: return createStatementNop();
      case LinkerScriptPackage.OUTPUT_SECTION_ALIGN_EXPRESSION: return createOutputSectionAlignExpression();
      case LinkerScriptPackage.OUTPUT_SECTION_ALIGN_WITH_INPUT: return createOutputSectionAlignWithInput();
      case LinkerScriptPackage.OUTPUT_SECTION_CONSTRAINT_ONLY_IF_RO: return createOutputSectionConstraintOnlyIfRO();
      case LinkerScriptPackage.OUTPUT_SECTION_CONSTRAINT_ONLY_IF_RW: return createOutputSectionConstraintOnlyIfRW();
      case LinkerScriptPackage.OUTPUT_SECTION_CONSTRAINT_SPECIAL: return createOutputSectionConstraintSpecial();
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_NO_LOAD: return createOutputSectionTypeNoLoad();
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_DSECT: return createOutputSectionTypeDSect();
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_COPY: return createOutputSectionTypeCopy();
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_INFO: return createOutputSectionTypeInfo();
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_OVERLAY: return createOutputSectionTypeOverlay();
      case LinkerScriptPackage.STATEMENT_CREATE_OBJECT_SYMBOLS: return createStatementCreateObjectSymbols();
      case LinkerScriptPackage.STATEMENT_CONSTRUCTORS: return createStatementConstructors();
      case LinkerScriptPackage.STATEMENT_CONSTRUCTORS_SORTED: return createStatementConstructorsSorted();
      case LinkerScriptPackage.STATEMENT_DATA: return createStatementData();
      case LinkerScriptPackage.STATEMENT_FILL: return createStatementFill();
      case LinkerScriptPackage.STATEMENT_INPUT_SECTION: return createStatementInputSection();
      case LinkerScriptPackage.ASSIGNMENT_HIDDEN: return createAssignmentHidden();
      case LinkerScriptPackage.ASSIGNMENT_PROVIDE: return createAssignmentProvide();
      case LinkerScriptPackage.ASSIGNMENT_PROVIDE_HIDDEN: return createAssignmentProvideHidden();
      case LinkerScriptPackage.INPUT_SECTION_FILE: return createInputSectionFile();
      case LinkerScriptPackage.INPUT_SECTION_WILD: return createInputSectionWild();
      case LinkerScriptPackage.LTERNARY_OPERATION: return createLTernaryOperation();
      case LinkerScriptPackage.LBINARY_OPERATION: return createLBinaryOperation();
      case LinkerScriptPackage.LUNARY_OPERATION: return createLUnaryOperation();
      case LinkerScriptPackage.LVARIABLE: return createLVariable();
      case LinkerScriptPackage.LPARENTHESIZED_EXPRESSION: return createLParenthesizedExpression();
      case LinkerScriptPackage.LENGTH_CALL: return createLengthCall();
      case LinkerScriptPackage.ORIGIN_CALL: return createOriginCall();
      case LinkerScriptPackage.ALIGN_CALL: return createAlignCall();
      case LinkerScriptPackage.SIZEOF_CALL: return createSizeofCall();
      case LinkerScriptPackage.AT_CALL: return createAtCall();
      case LinkerScriptPackage.LFEATURE_CALL: return createLFeatureCall();
      case LinkerScriptPackage.LNUMBER_LITERAL: return createLNumberLiteral();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LinkerScriptPackage.WILDCARD_SORT:
        return createWildcardSortFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case LinkerScriptPackage.WILDCARD_SORT:
        return convertWildcardSortToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkerScript createLinkerScript()
  {
    LinkerScriptImpl linkerScript = new LinkerScriptImpl();
    return linkerScript;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkerScriptStatement createLinkerScriptStatement()
  {
    LinkerScriptStatementImpl linkerScriptStatement = new LinkerScriptStatementImpl();
    return linkerScriptStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FileList createFileList()
  {
    FileListImpl fileList = new FileListImpl();
    return fileList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FileListName createFileListName()
  {
    FileListNameImpl fileListName = new FileListNameImpl();
    return fileListName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PhdrsCommand createPhdrsCommand()
  {
    PhdrsCommandImpl phdrsCommand = new PhdrsCommandImpl();
    return phdrsCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Phdr createPhdr()
  {
    PhdrImpl phdr = new PhdrImpl();
    return phdr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SectionsCommand createSectionsCommand()
  {
    SectionsCommandImpl sectionsCommand = new SectionsCommandImpl();
    return sectionsCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionCommand createOutputSectionCommand()
  {
    OutputSectionCommandImpl outputSectionCommand = new OutputSectionCommandImpl();
    return outputSectionCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSection createOutputSection()
  {
    OutputSectionImpl outputSection = new OutputSectionImpl();
    return outputSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionAlign createOutputSectionAlign()
  {
    OutputSectionAlignImpl outputSectionAlign = new OutputSectionAlignImpl();
    return outputSectionAlign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionConstraint createOutputSectionConstraint()
  {
    OutputSectionConstraintImpl outputSectionConstraint = new OutputSectionConstraintImpl();
    return outputSectionConstraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionType createOutputSectionType()
  {
    OutputSectionTypeImpl outputSectionType = new OutputSectionTypeImpl();
    return outputSectionType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputSection createInputSection()
  {
    InputSectionImpl inputSection = new InputSectionImpl();
    return inputSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Wildcard createWildcard()
  {
    WildcardImpl wildcard = new WildcardImpl();
    return wildcard;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MemoryCommand createMemoryCommand()
  {
    MemoryCommandImpl memoryCommand = new MemoryCommandImpl();
    return memoryCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Memory createMemory()
  {
    MemoryImpl memory = new MemoryImpl();
    return memory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpression createLExpression()
  {
    LExpressionImpl lExpression = new LExpressionImpl();
    return lExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementAssignment createStatementAssignment()
  {
    StatementAssignmentImpl statementAssignment = new StatementAssignmentImpl();
    return statementAssignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementStartup createStatementStartup()
  {
    StatementStartupImpl statementStartup = new StatementStartupImpl();
    return statementStartup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementEntry createStatementEntry()
  {
    StatementEntryImpl statementEntry = new StatementEntryImpl();
    return statementEntry;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementAssert createStatementAssert()
  {
    StatementAssertImpl statementAssert = new StatementAssertImpl();
    return statementAssert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementTarget createStatementTarget()
  {
    StatementTargetImpl statementTarget = new StatementTargetImpl();
    return statementTarget;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementSearchDir createStatementSearchDir()
  {
    StatementSearchDirImpl statementSearchDir = new StatementSearchDirImpl();
    return statementSearchDir;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementOutput createStatementOutput()
  {
    StatementOutputImpl statementOutput = new StatementOutputImpl();
    return statementOutput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementOutputFormat createStatementOutputFormat()
  {
    StatementOutputFormatImpl statementOutputFormat = new StatementOutputFormatImpl();
    return statementOutputFormat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementOutputArch createStatementOutputArch()
  {
    StatementOutputArchImpl statementOutputArch = new StatementOutputArchImpl();
    return statementOutputArch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementForceCommonAllocation createStatementForceCommonAllocation()
  {
    StatementForceCommonAllocationImpl statementForceCommonAllocation = new StatementForceCommonAllocationImpl();
    return statementForceCommonAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementInhibitCommonAllocation createStatementInhibitCommonAllocation()
  {
    StatementInhibitCommonAllocationImpl statementInhibitCommonAllocation = new StatementInhibitCommonAllocationImpl();
    return statementInhibitCommonAllocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementInput createStatementInput()
  {
    StatementInputImpl statementInput = new StatementInputImpl();
    return statementInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementGroup createStatementGroup()
  {
    StatementGroupImpl statementGroup = new StatementGroupImpl();
    return statementGroup;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementMap createStatementMap()
  {
    StatementMapImpl statementMap = new StatementMapImpl();
    return statementMap;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementNoCrossRefs createStatementNoCrossRefs()
  {
    StatementNoCrossRefsImpl statementNoCrossRefs = new StatementNoCrossRefsImpl();
    return statementNoCrossRefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementNoCrossRefsTo createStatementNoCrossRefsTo()
  {
    StatementNoCrossRefsToImpl statementNoCrossRefsTo = new StatementNoCrossRefsToImpl();
    return statementNoCrossRefsTo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementExtern createStatementExtern()
  {
    StatementExternImpl statementExtern = new StatementExternImpl();
    return statementExtern;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementInclude createStatementInclude()
  {
    StatementIncludeImpl statementInclude = new StatementIncludeImpl();
    return statementInclude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementNop createStatementNop()
  {
    StatementNopImpl statementNop = new StatementNopImpl();
    return statementNop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionAlignExpression createOutputSectionAlignExpression()
  {
    OutputSectionAlignExpressionImpl outputSectionAlignExpression = new OutputSectionAlignExpressionImpl();
    return outputSectionAlignExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionAlignWithInput createOutputSectionAlignWithInput()
  {
    OutputSectionAlignWithInputImpl outputSectionAlignWithInput = new OutputSectionAlignWithInputImpl();
    return outputSectionAlignWithInput;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionConstraintOnlyIfRO createOutputSectionConstraintOnlyIfRO()
  {
    OutputSectionConstraintOnlyIfROImpl outputSectionConstraintOnlyIfRO = new OutputSectionConstraintOnlyIfROImpl();
    return outputSectionConstraintOnlyIfRO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionConstraintOnlyIfRW createOutputSectionConstraintOnlyIfRW()
  {
    OutputSectionConstraintOnlyIfRWImpl outputSectionConstraintOnlyIfRW = new OutputSectionConstraintOnlyIfRWImpl();
    return outputSectionConstraintOnlyIfRW;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionConstraintSpecial createOutputSectionConstraintSpecial()
  {
    OutputSectionConstraintSpecialImpl outputSectionConstraintSpecial = new OutputSectionConstraintSpecialImpl();
    return outputSectionConstraintSpecial;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionTypeNoLoad createOutputSectionTypeNoLoad()
  {
    OutputSectionTypeNoLoadImpl outputSectionTypeNoLoad = new OutputSectionTypeNoLoadImpl();
    return outputSectionTypeNoLoad;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionTypeDSect createOutputSectionTypeDSect()
  {
    OutputSectionTypeDSectImpl outputSectionTypeDSect = new OutputSectionTypeDSectImpl();
    return outputSectionTypeDSect;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionTypeCopy createOutputSectionTypeCopy()
  {
    OutputSectionTypeCopyImpl outputSectionTypeCopy = new OutputSectionTypeCopyImpl();
    return outputSectionTypeCopy;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionTypeInfo createOutputSectionTypeInfo()
  {
    OutputSectionTypeInfoImpl outputSectionTypeInfo = new OutputSectionTypeInfoImpl();
    return outputSectionTypeInfo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionTypeOverlay createOutputSectionTypeOverlay()
  {
    OutputSectionTypeOverlayImpl outputSectionTypeOverlay = new OutputSectionTypeOverlayImpl();
    return outputSectionTypeOverlay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementCreateObjectSymbols createStatementCreateObjectSymbols()
  {
    StatementCreateObjectSymbolsImpl statementCreateObjectSymbols = new StatementCreateObjectSymbolsImpl();
    return statementCreateObjectSymbols;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementConstructors createStatementConstructors()
  {
    StatementConstructorsImpl statementConstructors = new StatementConstructorsImpl();
    return statementConstructors;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementConstructorsSorted createStatementConstructorsSorted()
  {
    StatementConstructorsSortedImpl statementConstructorsSorted = new StatementConstructorsSortedImpl();
    return statementConstructorsSorted;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementData createStatementData()
  {
    StatementDataImpl statementData = new StatementDataImpl();
    return statementData;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementFill createStatementFill()
  {
    StatementFillImpl statementFill = new StatementFillImpl();
    return statementFill;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StatementInputSection createStatementInputSection()
  {
    StatementInputSectionImpl statementInputSection = new StatementInputSectionImpl();
    return statementInputSection;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentHidden createAssignmentHidden()
  {
    AssignmentHiddenImpl assignmentHidden = new AssignmentHiddenImpl();
    return assignmentHidden;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentProvide createAssignmentProvide()
  {
    AssignmentProvideImpl assignmentProvide = new AssignmentProvideImpl();
    return assignmentProvide;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentProvideHidden createAssignmentProvideHidden()
  {
    AssignmentProvideHiddenImpl assignmentProvideHidden = new AssignmentProvideHiddenImpl();
    return assignmentProvideHidden;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputSectionFile createInputSectionFile()
  {
    InputSectionFileImpl inputSectionFile = new InputSectionFileImpl();
    return inputSectionFile;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InputSectionWild createInputSectionWild()
  {
    InputSectionWildImpl inputSectionWild = new InputSectionWildImpl();
    return inputSectionWild;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LTernaryOperation createLTernaryOperation()
  {
    LTernaryOperationImpl lTernaryOperation = new LTernaryOperationImpl();
    return lTernaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LBinaryOperation createLBinaryOperation()
  {
    LBinaryOperationImpl lBinaryOperation = new LBinaryOperationImpl();
    return lBinaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LUnaryOperation createLUnaryOperation()
  {
    LUnaryOperationImpl lUnaryOperation = new LUnaryOperationImpl();
    return lUnaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LVariable createLVariable()
  {
    LVariableImpl lVariable = new LVariableImpl();
    return lVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LParenthesizedExpression createLParenthesizedExpression()
  {
    LParenthesizedExpressionImpl lParenthesizedExpression = new LParenthesizedExpressionImpl();
    return lParenthesizedExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LengthCall createLengthCall()
  {
    LengthCallImpl lengthCall = new LengthCallImpl();
    return lengthCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OriginCall createOriginCall()
  {
    OriginCallImpl originCall = new OriginCallImpl();
    return originCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AlignCall createAlignCall()
  {
    AlignCallImpl alignCall = new AlignCallImpl();
    return alignCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SizeofCall createSizeofCall()
  {
    SizeofCallImpl sizeofCall = new SizeofCallImpl();
    return sizeofCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AtCall createAtCall()
  {
    AtCallImpl atCall = new AtCallImpl();
    return atCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LFeatureCall createLFeatureCall()
  {
    LFeatureCallImpl lFeatureCall = new LFeatureCallImpl();
    return lFeatureCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LNumberLiteral createLNumberLiteral()
  {
    LNumberLiteralImpl lNumberLiteral = new LNumberLiteralImpl();
    return lNumberLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WildcardSort createWildcardSortFromString(EDataType eDataType, String initialValue)
  {
    WildcardSort result = WildcardSort.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertWildcardSortToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkerScriptPackage getLinkerScriptPackage()
  {
    return (LinkerScriptPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static LinkerScriptPackage getPackage()
  {
    return LinkerScriptPackage.eINSTANCE;
  }

} //LinkerScriptFactoryImpl

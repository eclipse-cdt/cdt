/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.cdt.linkerscript.linkerScript.impl;

import org.eclipse.cdt.linkerscript.linkerScript.LinkerScript;
import org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage;
import org.eclipse.cdt.linkerscript.linkerScript.MemoryCommand;
import org.eclipse.cdt.linkerscript.linkerScript.SectionsCommand;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Linker Script</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.LinkerScriptImpl#getMemories <em>Memories</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.LinkerScriptImpl#getSections <em>Sections</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LinkerScriptImpl extends MinimalEObjectImpl.Container implements LinkerScript
{
  /**
   * The cached value of the '{@link #getMemories() <em>Memories</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemories()
   * @generated
   * @ordered
   */
  protected MemoryCommand memories;

  /**
   * The cached value of the '{@link #getSections() <em>Sections</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSections()
   * @generated
   * @ordered
   */
  protected SectionsCommand sections;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LinkerScriptImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LinkerScriptPackage.Literals.LINKER_SCRIPT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MemoryCommand getMemories()
  {
    return memories;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMemories(MemoryCommand newMemories, NotificationChain msgs)
  {
    MemoryCommand oldMemories = memories;
    memories = newMemories;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.LINKER_SCRIPT__MEMORIES, oldMemories, newMemories);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMemories(MemoryCommand newMemories)
  {
    if (newMemories != memories)
    {
      NotificationChain msgs = null;
      if (memories != null)
        msgs = ((InternalEObject)memories).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.LINKER_SCRIPT__MEMORIES, null, msgs);
      if (newMemories != null)
        msgs = ((InternalEObject)newMemories).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.LINKER_SCRIPT__MEMORIES, null, msgs);
      msgs = basicSetMemories(newMemories, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.LINKER_SCRIPT__MEMORIES, newMemories, newMemories));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SectionsCommand getSections()
  {
    return sections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSections(SectionsCommand newSections, NotificationChain msgs)
  {
    SectionsCommand oldSections = sections;
    sections = newSections;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.LINKER_SCRIPT__SECTIONS, oldSections, newSections);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSections(SectionsCommand newSections)
  {
    if (newSections != sections)
    {
      NotificationChain msgs = null;
      if (sections != null)
        msgs = ((InternalEObject)sections).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.LINKER_SCRIPT__SECTIONS, null, msgs);
      if (newSections != null)
        msgs = ((InternalEObject)newSections).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.LINKER_SCRIPT__SECTIONS, null, msgs);
      msgs = basicSetSections(newSections, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.LINKER_SCRIPT__SECTIONS, newSections, newSections));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.LINKER_SCRIPT__MEMORIES:
        return basicSetMemories(null, msgs);
      case LinkerScriptPackage.LINKER_SCRIPT__SECTIONS:
        return basicSetSections(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.LINKER_SCRIPT__MEMORIES:
        return getMemories();
      case LinkerScriptPackage.LINKER_SCRIPT__SECTIONS:
        return getSections();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.LINKER_SCRIPT__MEMORIES:
        setMemories((MemoryCommand)newValue);
        return;
      case LinkerScriptPackage.LINKER_SCRIPT__SECTIONS:
        setSections((SectionsCommand)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.LINKER_SCRIPT__MEMORIES:
        setMemories((MemoryCommand)null);
        return;
      case LinkerScriptPackage.LINKER_SCRIPT__SECTIONS:
        setSections((SectionsCommand)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.LINKER_SCRIPT__MEMORIES:
        return memories != null;
      case LinkerScriptPackage.LINKER_SCRIPT__SECTIONS:
        return sections != null;
    }
    return super.eIsSet(featureID);
  }

} //LinkerScriptImpl

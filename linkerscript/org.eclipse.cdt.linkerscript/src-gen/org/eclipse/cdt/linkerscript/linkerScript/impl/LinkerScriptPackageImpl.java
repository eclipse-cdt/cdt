/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.cdt.linkerscript.linkerScript.impl;

import org.eclipse.cdt.linkerscript.linkerScript.AlignCall;
import org.eclipse.cdt.linkerscript.linkerScript.Assignment;
import org.eclipse.cdt.linkerscript.linkerScript.AssignmentHidden;
import org.eclipse.cdt.linkerscript.linkerScript.AssignmentProvide;
import org.eclipse.cdt.linkerscript.linkerScript.AssignmentProvideHidden;
import org.eclipse.cdt.linkerscript.linkerScript.AtCall;
import org.eclipse.cdt.linkerscript.linkerScript.FileList;
import org.eclipse.cdt.linkerscript.linkerScript.FileListName;
import org.eclipse.cdt.linkerscript.linkerScript.InputSection;
import org.eclipse.cdt.linkerscript.linkerScript.InputSectionFile;
import org.eclipse.cdt.linkerscript.linkerScript.InputSectionFlags;
import org.eclipse.cdt.linkerscript.linkerScript.InputSectionWild;
import org.eclipse.cdt.linkerscript.linkerScript.LBinaryOperation;
import org.eclipse.cdt.linkerscript.linkerScript.LExpression;
import org.eclipse.cdt.linkerscript.linkerScript.LFeatureCall;
import org.eclipse.cdt.linkerscript.linkerScript.LNumberLiteral;
import org.eclipse.cdt.linkerscript.linkerScript.LPostfixOperation;
import org.eclipse.cdt.linkerscript.linkerScript.LTernaryOperation;
import org.eclipse.cdt.linkerscript.linkerScript.LUnaryOperation;
import org.eclipse.cdt.linkerscript.linkerScript.LVariable;
import org.eclipse.cdt.linkerscript.linkerScript.LengthCall;
import org.eclipse.cdt.linkerscript.linkerScript.LinkerScript;
import org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptFactory;
import org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage;
import org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptStatement;
import org.eclipse.cdt.linkerscript.linkerScript.Memory;
import org.eclipse.cdt.linkerscript.linkerScript.MemoryCommand;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSection;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlign;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlignExpression;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlignWithInput;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionCommand;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraint;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintOnlyIfRO;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintOnlyIfRW;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintSpecial;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionType;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeCopy;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeDSect;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeInfo;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeNoLoad;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeOverlay;
import org.eclipse.cdt.linkerscript.linkerScript.Phdr;
import org.eclipse.cdt.linkerscript.linkerScript.PhdrsCommand;
import org.eclipse.cdt.linkerscript.linkerScript.SectionsCommand;
import org.eclipse.cdt.linkerscript.linkerScript.SizeofCall;
import org.eclipse.cdt.linkerscript.linkerScript.Statement;
import org.eclipse.cdt.linkerscript.linkerScript.StatementAssert;
import org.eclipse.cdt.linkerscript.linkerScript.StatementAssignment;
import org.eclipse.cdt.linkerscript.linkerScript.StatementConstructors;
import org.eclipse.cdt.linkerscript.linkerScript.StatementConstructorsSorted;
import org.eclipse.cdt.linkerscript.linkerScript.StatementCreateObjectSymbols;
import org.eclipse.cdt.linkerscript.linkerScript.StatementData;
import org.eclipse.cdt.linkerscript.linkerScript.StatementEntry;
import org.eclipse.cdt.linkerscript.linkerScript.StatementExtern;
import org.eclipse.cdt.linkerscript.linkerScript.StatementFill;
import org.eclipse.cdt.linkerscript.linkerScript.StatementForceCommonAllocation;
import org.eclipse.cdt.linkerscript.linkerScript.StatementGroup;
import org.eclipse.cdt.linkerscript.linkerScript.StatementInclude;
import org.eclipse.cdt.linkerscript.linkerScript.StatementInhibitCommonAllocation;
import org.eclipse.cdt.linkerscript.linkerScript.StatementInput;
import org.eclipse.cdt.linkerscript.linkerScript.StatementInputSection;
import org.eclipse.cdt.linkerscript.linkerScript.StatementMap;
import org.eclipse.cdt.linkerscript.linkerScript.StatementNoCrossRefs;
import org.eclipse.cdt.linkerscript.linkerScript.StatementNoCrossRefsTo;
import org.eclipse.cdt.linkerscript.linkerScript.StatementNop;
import org.eclipse.cdt.linkerscript.linkerScript.StatementOutput;
import org.eclipse.cdt.linkerscript.linkerScript.StatementOutputArch;
import org.eclipse.cdt.linkerscript.linkerScript.StatementOutputFormat;
import org.eclipse.cdt.linkerscript.linkerScript.StatementSearchDir;
import org.eclipse.cdt.linkerscript.linkerScript.StatementStartup;
import org.eclipse.cdt.linkerscript.linkerScript.StatementTarget;
import org.eclipse.cdt.linkerscript.linkerScript.Wildcard;
import org.eclipse.cdt.linkerscript.linkerScript.WildcardSortAlign;
import org.eclipse.cdt.linkerscript.linkerScript.WildcardSortAlignName;
import org.eclipse.cdt.linkerscript.linkerScript.WildcardSortInitPriority;
import org.eclipse.cdt.linkerscript.linkerScript.WildcardSortName;
import org.eclipse.cdt.linkerscript.linkerScript.WildcardSortNameAlign;
import org.eclipse.cdt.linkerscript.linkerScript.WildcardSortNone;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class LinkerScriptPackageImpl extends EPackageImpl implements LinkerScriptPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass linkerScriptEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass linkerScriptStatementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fileListEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass fileListNameEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass phdrsCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass phdrEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sectionsCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionAlignEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionConstraintEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inputSectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inputSectionFlagsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wildcardEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass memoryCommandEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass memoryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementAssignmentEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementStartupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementEntryEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementAssertEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementTargetEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementSearchDirEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementOutputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementOutputFormatEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementOutputArchEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementForceCommonAllocationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementInhibitCommonAllocationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementInputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementGroupEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementMapEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementNoCrossRefsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementNoCrossRefsToEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementExternEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementIncludeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementNopEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionAlignExpressionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionAlignWithInputEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionConstraintOnlyIfROEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionConstraintOnlyIfRWEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionConstraintSpecialEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionTypeNoLoadEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionTypeDSectEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionTypeCopyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionTypeInfoEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass outputSectionTypeOverlayEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementCreateObjectSymbolsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementConstructorsEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementConstructorsSortedEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementDataEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementFillEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass statementInputSectionEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignmentHiddenEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignmentProvideEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass assignmentProvideHiddenEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inputSectionFileEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass inputSectionWildEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wildcardSortNoneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wildcardSortNameEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wildcardSortAlignEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wildcardSortNameAlignEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wildcardSortAlignNameEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass wildcardSortInitPriorityEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lTernaryOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lBinaryOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lUnaryOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lPostfixOperationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lVariableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lengthCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass alignCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sizeofCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass atCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lFeatureCallEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass lNumberLiteralEClass = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private LinkerScriptPackageImpl()
  {
    super(eNS_URI, LinkerScriptFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link LinkerScriptPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static LinkerScriptPackage init()
  {
    if (isInited) return (LinkerScriptPackage)EPackage.Registry.INSTANCE.getEPackage(LinkerScriptPackage.eNS_URI);

    // Obtain or create and register package
    LinkerScriptPackageImpl theLinkerScriptPackage = (LinkerScriptPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof LinkerScriptPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new LinkerScriptPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theLinkerScriptPackage.createPackageContents();

    // Initialize created meta-data
    theLinkerScriptPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theLinkerScriptPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(LinkerScriptPackage.eNS_URI, theLinkerScriptPackage);
    return theLinkerScriptPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLinkerScript()
  {
    return linkerScriptEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLinkerScript_Statements()
  {
    return (EReference)linkerScriptEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLinkerScriptStatement()
  {
    return linkerScriptStatementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatement()
  {
    return statementEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFileList()
  {
    return fileListEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFileList_Files()
  {
    return (EReference)fileListEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFileList_AsNeeded()
  {
    return (EAttribute)fileListEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getFileList_List()
  {
    return (EReference)fileListEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getFileListName()
  {
    return fileListNameEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFileListName_Library()
  {
    return (EAttribute)fileListNameEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getFileListName_Name()
  {
    return (EAttribute)fileListNameEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPhdrsCommand()
  {
    return phdrsCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPhdrsCommand_Phdrs()
  {
    return (EReference)phdrsCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPhdr()
  {
    return phdrEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getPhdr_Name()
  {
    return (EAttribute)phdrEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPhdr_Opts()
  {
    return (EReference)phdrEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSectionsCommand()
  {
    return sectionsCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSectionsCommand_SectionCommands()
  {
    return (EReference)sectionsCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionCommand()
  {
    return outputSectionCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSection()
  {
    return outputSectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getOutputSection_Name()
  {
    return (EAttribute)outputSectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSection_Address()
  {
    return (EReference)outputSectionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSection_Type()
  {
    return (EReference)outputSectionEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSection_At()
  {
    return (EReference)outputSectionEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSection_Align()
  {
    return (EReference)outputSectionEClass.getEStructuralFeatures().get(4);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSection_SubAlign()
  {
    return (EReference)outputSectionEClass.getEStructuralFeatures().get(5);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSection_Constraint()
  {
    return (EReference)outputSectionEClass.getEStructuralFeatures().get(6);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSection_Statements()
  {
    return (EReference)outputSectionEClass.getEStructuralFeatures().get(7);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getOutputSection_Memory()
  {
    return (EAttribute)outputSectionEClass.getEStructuralFeatures().get(8);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getOutputSection_AtMemory()
  {
    return (EAttribute)outputSectionEClass.getEStructuralFeatures().get(9);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getOutputSection_Phdrs()
  {
    return (EAttribute)outputSectionEClass.getEStructuralFeatures().get(10);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSection_Fill()
  {
    return (EReference)outputSectionEClass.getEStructuralFeatures().get(11);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionAlign()
  {
    return outputSectionAlignEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionConstraint()
  {
    return outputSectionConstraintEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionType()
  {
    return outputSectionTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAssignment()
  {
    return assignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAssignment_Name()
  {
    return (EAttribute)assignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getAssignment_Feature()
  {
    return (EAttribute)assignmentEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAssignment_Exp()
  {
    return (EReference)assignmentEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInputSection()
  {
    return inputSectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInputSection_Flags()
  {
    return (EAttribute)inputSectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInputSection_Keep()
  {
    return (EAttribute)inputSectionEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInputSectionFlags()
  {
    return inputSectionFlagsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInputSectionFlags_Flags()
  {
    return (EAttribute)inputSectionFlagsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWildcard()
  {
    return wildcardEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getWildcard_Name()
  {
    return (EAttribute)wildcardEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getWildcard_Excludes()
  {
    return (EAttribute)wildcardEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMemoryCommand()
  {
    return memoryCommandEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMemoryCommand_Memories()
  {
    return (EReference)memoryCommandEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getMemory()
  {
    return memoryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMemory_Name()
  {
    return (EAttribute)memoryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getMemory_Attr()
  {
    return (EAttribute)memoryEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMemory_Origin()
  {
    return (EReference)memoryEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getMemory_Length()
  {
    return (EReference)memoryEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLExpression()
  {
    return lExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementAssignment()
  {
    return statementAssignmentEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStatementAssignment_Assignment()
  {
    return (EReference)statementAssignmentEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementStartup()
  {
    return statementStartupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementStartup_Name()
  {
    return (EAttribute)statementStartupEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementEntry()
  {
    return statementEntryEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementEntry_Name()
  {
    return (EAttribute)statementEntryEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementAssert()
  {
    return statementAssertEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStatementAssert_Exp()
  {
    return (EReference)statementAssertEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementAssert_Message()
  {
    return (EAttribute)statementAssertEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementTarget()
  {
    return statementTargetEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementTarget_Name()
  {
    return (EAttribute)statementTargetEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementSearchDir()
  {
    return statementSearchDirEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementSearchDir_Name()
  {
    return (EAttribute)statementSearchDirEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementOutput()
  {
    return statementOutputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementOutput_Name()
  {
    return (EAttribute)statementOutputEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementOutputFormat()
  {
    return statementOutputFormatEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementOutputFormat_Name()
  {
    return (EAttribute)statementOutputFormatEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementOutputFormat_Big()
  {
    return (EAttribute)statementOutputFormatEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementOutputFormat_Little()
  {
    return (EAttribute)statementOutputFormatEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementOutputArch()
  {
    return statementOutputArchEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementOutputArch_Name()
  {
    return (EAttribute)statementOutputArchEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementForceCommonAllocation()
  {
    return statementForceCommonAllocationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementInhibitCommonAllocation()
  {
    return statementInhibitCommonAllocationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementInput()
  {
    return statementInputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStatementInput_List()
  {
    return (EReference)statementInputEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementGroup()
  {
    return statementGroupEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStatementGroup_Files()
  {
    return (EReference)statementGroupEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementMap()
  {
    return statementMapEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementMap_Name()
  {
    return (EAttribute)statementMapEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementNoCrossRefs()
  {
    return statementNoCrossRefsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementNoCrossRefs_Sections()
  {
    return (EAttribute)statementNoCrossRefsEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementNoCrossRefsTo()
  {
    return statementNoCrossRefsToEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementNoCrossRefsTo_Sections()
  {
    return (EAttribute)statementNoCrossRefsToEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementExtern()
  {
    return statementExternEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementExtern_Sections()
  {
    return (EAttribute)statementExternEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementInclude()
  {
    return statementIncludeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementInclude_Name()
  {
    return (EAttribute)statementIncludeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementInclude_Filename()
  {
    return (EAttribute)statementIncludeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementNop()
  {
    return statementNopEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionAlignExpression()
  {
    return outputSectionAlignExpressionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getOutputSectionAlignExpression_Exp()
  {
    return (EReference)outputSectionAlignExpressionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionAlignWithInput()
  {
    return outputSectionAlignWithInputEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionConstraintOnlyIfRO()
  {
    return outputSectionConstraintOnlyIfROEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionConstraintOnlyIfRW()
  {
    return outputSectionConstraintOnlyIfRWEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionConstraintSpecial()
  {
    return outputSectionConstraintSpecialEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionTypeNoLoad()
  {
    return outputSectionTypeNoLoadEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionTypeDSect()
  {
    return outputSectionTypeDSectEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionTypeCopy()
  {
    return outputSectionTypeCopyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionTypeInfo()
  {
    return outputSectionTypeInfoEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getOutputSectionTypeOverlay()
  {
    return outputSectionTypeOverlayEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementCreateObjectSymbols()
  {
    return statementCreateObjectSymbolsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementConstructors()
  {
    return statementConstructorsEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementConstructorsSorted()
  {
    return statementConstructorsSortedEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementData()
  {
    return statementDataEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getStatementData_Size()
  {
    return (EAttribute)statementDataEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStatementData_Data()
  {
    return (EReference)statementDataEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementFill()
  {
    return statementFillEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStatementFill_Fill()
  {
    return (EReference)statementFillEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getStatementInputSection()
  {
    return statementInputSectionEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getStatementInputSection_Spec()
  {
    return (EReference)statementInputSectionEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAssignmentHidden()
  {
    return assignmentHiddenEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAssignmentProvide()
  {
    return assignmentProvideEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAssignmentProvideHidden()
  {
    return assignmentProvideHiddenEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInputSectionFile()
  {
    return inputSectionFileEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getInputSectionFile_File()
  {
    return (EAttribute)inputSectionFileEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getInputSectionWild()
  {
    return inputSectionWildEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInputSectionWild_WildFile()
  {
    return (EReference)inputSectionWildEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getInputSectionWild_Sections()
  {
    return (EReference)inputSectionWildEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWildcardSortNone()
  {
    return wildcardSortNoneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWildcardSortName()
  {
    return wildcardSortNameEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWildcardSortAlign()
  {
    return wildcardSortAlignEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWildcardSortNameAlign()
  {
    return wildcardSortNameAlignEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWildcardSortAlignName()
  {
    return wildcardSortAlignNameEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getWildcardSortInitPriority()
  {
    return wildcardSortInitPriorityEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLTernaryOperation()
  {
    return lTernaryOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLTernaryOperation_Condition()
  {
    return (EReference)lTernaryOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLTernaryOperation_IfPart()
  {
    return (EReference)lTernaryOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLTernaryOperation_ThenPart()
  {
    return (EReference)lTernaryOperationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLBinaryOperation()
  {
    return lBinaryOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLBinaryOperation_LeftOperand()
  {
    return (EReference)lBinaryOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLBinaryOperation_Feature()
  {
    return (EAttribute)lBinaryOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLBinaryOperation_RightOperand()
  {
    return (EReference)lBinaryOperationEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLUnaryOperation()
  {
    return lUnaryOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLUnaryOperation_Feature()
  {
    return (EAttribute)lUnaryOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLUnaryOperation_Operand()
  {
    return (EReference)lUnaryOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLPostfixOperation()
  {
    return lPostfixOperationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLPostfixOperation_Operand()
  {
    return (EReference)lPostfixOperationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLPostfixOperation_Feature()
  {
    return (EAttribute)lPostfixOperationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLVariable()
  {
    return lVariableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLVariable_Feature()
  {
    return (EAttribute)lVariableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLengthCall()
  {
    return lengthCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLengthCall_Memory()
  {
    return (EAttribute)lengthCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAlignCall()
  {
    return alignCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAlignCall_ExpOrAlign()
  {
    return (EReference)alignCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAlignCall_Align()
  {
    return (EReference)alignCallEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSizeofCall()
  {
    return sizeofCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSizeofCall_Name()
  {
    return (EAttribute)sizeofCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getAtCall()
  {
    return atCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getAtCall_Exp()
  {
    return (EReference)atCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLFeatureCall()
  {
    return lFeatureCallEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLFeatureCall_Feature()
  {
    return (EAttribute)lFeatureCallEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLFeatureCall_ExplicitOperationCall()
  {
    return (EAttribute)lFeatureCallEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getLFeatureCall_FeatureCallArguments()
  {
    return (EReference)lFeatureCallEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getLNumberLiteral()
  {
    return lNumberLiteralEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getLNumberLiteral_Value()
  {
    return (EAttribute)lNumberLiteralEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkerScriptFactory getLinkerScriptFactory()
  {
    return (LinkerScriptFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    linkerScriptEClass = createEClass(LINKER_SCRIPT);
    createEReference(linkerScriptEClass, LINKER_SCRIPT__STATEMENTS);

    linkerScriptStatementEClass = createEClass(LINKER_SCRIPT_STATEMENT);

    statementEClass = createEClass(STATEMENT);

    fileListEClass = createEClass(FILE_LIST);
    createEReference(fileListEClass, FILE_LIST__FILES);
    createEAttribute(fileListEClass, FILE_LIST__AS_NEEDED);
    createEReference(fileListEClass, FILE_LIST__LIST);

    fileListNameEClass = createEClass(FILE_LIST_NAME);
    createEAttribute(fileListNameEClass, FILE_LIST_NAME__LIBRARY);
    createEAttribute(fileListNameEClass, FILE_LIST_NAME__NAME);

    phdrsCommandEClass = createEClass(PHDRS_COMMAND);
    createEReference(phdrsCommandEClass, PHDRS_COMMAND__PHDRS);

    phdrEClass = createEClass(PHDR);
    createEAttribute(phdrEClass, PHDR__NAME);
    createEReference(phdrEClass, PHDR__OPTS);

    sectionsCommandEClass = createEClass(SECTIONS_COMMAND);
    createEReference(sectionsCommandEClass, SECTIONS_COMMAND__SECTION_COMMANDS);

    outputSectionCommandEClass = createEClass(OUTPUT_SECTION_COMMAND);

    outputSectionEClass = createEClass(OUTPUT_SECTION);
    createEAttribute(outputSectionEClass, OUTPUT_SECTION__NAME);
    createEReference(outputSectionEClass, OUTPUT_SECTION__ADDRESS);
    createEReference(outputSectionEClass, OUTPUT_SECTION__TYPE);
    createEReference(outputSectionEClass, OUTPUT_SECTION__AT);
    createEReference(outputSectionEClass, OUTPUT_SECTION__ALIGN);
    createEReference(outputSectionEClass, OUTPUT_SECTION__SUB_ALIGN);
    createEReference(outputSectionEClass, OUTPUT_SECTION__CONSTRAINT);
    createEReference(outputSectionEClass, OUTPUT_SECTION__STATEMENTS);
    createEAttribute(outputSectionEClass, OUTPUT_SECTION__MEMORY);
    createEAttribute(outputSectionEClass, OUTPUT_SECTION__AT_MEMORY);
    createEAttribute(outputSectionEClass, OUTPUT_SECTION__PHDRS);
    createEReference(outputSectionEClass, OUTPUT_SECTION__FILL);

    outputSectionAlignEClass = createEClass(OUTPUT_SECTION_ALIGN);

    outputSectionConstraintEClass = createEClass(OUTPUT_SECTION_CONSTRAINT);

    outputSectionTypeEClass = createEClass(OUTPUT_SECTION_TYPE);

    assignmentEClass = createEClass(ASSIGNMENT);
    createEAttribute(assignmentEClass, ASSIGNMENT__NAME);
    createEAttribute(assignmentEClass, ASSIGNMENT__FEATURE);
    createEReference(assignmentEClass, ASSIGNMENT__EXP);

    inputSectionEClass = createEClass(INPUT_SECTION);
    createEAttribute(inputSectionEClass, INPUT_SECTION__FLAGS);
    createEAttribute(inputSectionEClass, INPUT_SECTION__KEEP);

    inputSectionFlagsEClass = createEClass(INPUT_SECTION_FLAGS);
    createEAttribute(inputSectionFlagsEClass, INPUT_SECTION_FLAGS__FLAGS);

    wildcardEClass = createEClass(WILDCARD);
    createEAttribute(wildcardEClass, WILDCARD__NAME);
    createEAttribute(wildcardEClass, WILDCARD__EXCLUDES);

    memoryCommandEClass = createEClass(MEMORY_COMMAND);
    createEReference(memoryCommandEClass, MEMORY_COMMAND__MEMORIES);

    memoryEClass = createEClass(MEMORY);
    createEAttribute(memoryEClass, MEMORY__NAME);
    createEAttribute(memoryEClass, MEMORY__ATTR);
    createEReference(memoryEClass, MEMORY__ORIGIN);
    createEReference(memoryEClass, MEMORY__LENGTH);

    lExpressionEClass = createEClass(LEXPRESSION);

    statementAssignmentEClass = createEClass(STATEMENT_ASSIGNMENT);
    createEReference(statementAssignmentEClass, STATEMENT_ASSIGNMENT__ASSIGNMENT);

    statementStartupEClass = createEClass(STATEMENT_STARTUP);
    createEAttribute(statementStartupEClass, STATEMENT_STARTUP__NAME);

    statementEntryEClass = createEClass(STATEMENT_ENTRY);
    createEAttribute(statementEntryEClass, STATEMENT_ENTRY__NAME);

    statementAssertEClass = createEClass(STATEMENT_ASSERT);
    createEReference(statementAssertEClass, STATEMENT_ASSERT__EXP);
    createEAttribute(statementAssertEClass, STATEMENT_ASSERT__MESSAGE);

    statementTargetEClass = createEClass(STATEMENT_TARGET);
    createEAttribute(statementTargetEClass, STATEMENT_TARGET__NAME);

    statementSearchDirEClass = createEClass(STATEMENT_SEARCH_DIR);
    createEAttribute(statementSearchDirEClass, STATEMENT_SEARCH_DIR__NAME);

    statementOutputEClass = createEClass(STATEMENT_OUTPUT);
    createEAttribute(statementOutputEClass, STATEMENT_OUTPUT__NAME);

    statementOutputFormatEClass = createEClass(STATEMENT_OUTPUT_FORMAT);
    createEAttribute(statementOutputFormatEClass, STATEMENT_OUTPUT_FORMAT__NAME);
    createEAttribute(statementOutputFormatEClass, STATEMENT_OUTPUT_FORMAT__BIG);
    createEAttribute(statementOutputFormatEClass, STATEMENT_OUTPUT_FORMAT__LITTLE);

    statementOutputArchEClass = createEClass(STATEMENT_OUTPUT_ARCH);
    createEAttribute(statementOutputArchEClass, STATEMENT_OUTPUT_ARCH__NAME);

    statementForceCommonAllocationEClass = createEClass(STATEMENT_FORCE_COMMON_ALLOCATION);

    statementInhibitCommonAllocationEClass = createEClass(STATEMENT_INHIBIT_COMMON_ALLOCATION);

    statementInputEClass = createEClass(STATEMENT_INPUT);
    createEReference(statementInputEClass, STATEMENT_INPUT__LIST);

    statementGroupEClass = createEClass(STATEMENT_GROUP);
    createEReference(statementGroupEClass, STATEMENT_GROUP__FILES);

    statementMapEClass = createEClass(STATEMENT_MAP);
    createEAttribute(statementMapEClass, STATEMENT_MAP__NAME);

    statementNoCrossRefsEClass = createEClass(STATEMENT_NO_CROSS_REFS);
    createEAttribute(statementNoCrossRefsEClass, STATEMENT_NO_CROSS_REFS__SECTIONS);

    statementNoCrossRefsToEClass = createEClass(STATEMENT_NO_CROSS_REFS_TO);
    createEAttribute(statementNoCrossRefsToEClass, STATEMENT_NO_CROSS_REFS_TO__SECTIONS);

    statementExternEClass = createEClass(STATEMENT_EXTERN);
    createEAttribute(statementExternEClass, STATEMENT_EXTERN__SECTIONS);

    statementIncludeEClass = createEClass(STATEMENT_INCLUDE);
    createEAttribute(statementIncludeEClass, STATEMENT_INCLUDE__NAME);
    createEAttribute(statementIncludeEClass, STATEMENT_INCLUDE__FILENAME);

    statementNopEClass = createEClass(STATEMENT_NOP);

    outputSectionAlignExpressionEClass = createEClass(OUTPUT_SECTION_ALIGN_EXPRESSION);
    createEReference(outputSectionAlignExpressionEClass, OUTPUT_SECTION_ALIGN_EXPRESSION__EXP);

    outputSectionAlignWithInputEClass = createEClass(OUTPUT_SECTION_ALIGN_WITH_INPUT);

    outputSectionConstraintOnlyIfROEClass = createEClass(OUTPUT_SECTION_CONSTRAINT_ONLY_IF_RO);

    outputSectionConstraintOnlyIfRWEClass = createEClass(OUTPUT_SECTION_CONSTRAINT_ONLY_IF_RW);

    outputSectionConstraintSpecialEClass = createEClass(OUTPUT_SECTION_CONSTRAINT_SPECIAL);

    outputSectionTypeNoLoadEClass = createEClass(OUTPUT_SECTION_TYPE_NO_LOAD);

    outputSectionTypeDSectEClass = createEClass(OUTPUT_SECTION_TYPE_DSECT);

    outputSectionTypeCopyEClass = createEClass(OUTPUT_SECTION_TYPE_COPY);

    outputSectionTypeInfoEClass = createEClass(OUTPUT_SECTION_TYPE_INFO);

    outputSectionTypeOverlayEClass = createEClass(OUTPUT_SECTION_TYPE_OVERLAY);

    statementCreateObjectSymbolsEClass = createEClass(STATEMENT_CREATE_OBJECT_SYMBOLS);

    statementConstructorsEClass = createEClass(STATEMENT_CONSTRUCTORS);

    statementConstructorsSortedEClass = createEClass(STATEMENT_CONSTRUCTORS_SORTED);

    statementDataEClass = createEClass(STATEMENT_DATA);
    createEAttribute(statementDataEClass, STATEMENT_DATA__SIZE);
    createEReference(statementDataEClass, STATEMENT_DATA__DATA);

    statementFillEClass = createEClass(STATEMENT_FILL);
    createEReference(statementFillEClass, STATEMENT_FILL__FILL);

    statementInputSectionEClass = createEClass(STATEMENT_INPUT_SECTION);
    createEReference(statementInputSectionEClass, STATEMENT_INPUT_SECTION__SPEC);

    assignmentHiddenEClass = createEClass(ASSIGNMENT_HIDDEN);

    assignmentProvideEClass = createEClass(ASSIGNMENT_PROVIDE);

    assignmentProvideHiddenEClass = createEClass(ASSIGNMENT_PROVIDE_HIDDEN);

    inputSectionFileEClass = createEClass(INPUT_SECTION_FILE);
    createEAttribute(inputSectionFileEClass, INPUT_SECTION_FILE__FILE);

    inputSectionWildEClass = createEClass(INPUT_SECTION_WILD);
    createEReference(inputSectionWildEClass, INPUT_SECTION_WILD__WILD_FILE);
    createEReference(inputSectionWildEClass, INPUT_SECTION_WILD__SECTIONS);

    wildcardSortNoneEClass = createEClass(WILDCARD_SORT_NONE);

    wildcardSortNameEClass = createEClass(WILDCARD_SORT_NAME);

    wildcardSortAlignEClass = createEClass(WILDCARD_SORT_ALIGN);

    wildcardSortNameAlignEClass = createEClass(WILDCARD_SORT_NAME_ALIGN);

    wildcardSortAlignNameEClass = createEClass(WILDCARD_SORT_ALIGN_NAME);

    wildcardSortInitPriorityEClass = createEClass(WILDCARD_SORT_INIT_PRIORITY);

    lTernaryOperationEClass = createEClass(LTERNARY_OPERATION);
    createEReference(lTernaryOperationEClass, LTERNARY_OPERATION__CONDITION);
    createEReference(lTernaryOperationEClass, LTERNARY_OPERATION__IF_PART);
    createEReference(lTernaryOperationEClass, LTERNARY_OPERATION__THEN_PART);

    lBinaryOperationEClass = createEClass(LBINARY_OPERATION);
    createEReference(lBinaryOperationEClass, LBINARY_OPERATION__LEFT_OPERAND);
    createEAttribute(lBinaryOperationEClass, LBINARY_OPERATION__FEATURE);
    createEReference(lBinaryOperationEClass, LBINARY_OPERATION__RIGHT_OPERAND);

    lUnaryOperationEClass = createEClass(LUNARY_OPERATION);
    createEAttribute(lUnaryOperationEClass, LUNARY_OPERATION__FEATURE);
    createEReference(lUnaryOperationEClass, LUNARY_OPERATION__OPERAND);

    lPostfixOperationEClass = createEClass(LPOSTFIX_OPERATION);
    createEReference(lPostfixOperationEClass, LPOSTFIX_OPERATION__OPERAND);
    createEAttribute(lPostfixOperationEClass, LPOSTFIX_OPERATION__FEATURE);

    lVariableEClass = createEClass(LVARIABLE);
    createEAttribute(lVariableEClass, LVARIABLE__FEATURE);

    lengthCallEClass = createEClass(LENGTH_CALL);
    createEAttribute(lengthCallEClass, LENGTH_CALL__MEMORY);

    alignCallEClass = createEClass(ALIGN_CALL);
    createEReference(alignCallEClass, ALIGN_CALL__EXP_OR_ALIGN);
    createEReference(alignCallEClass, ALIGN_CALL__ALIGN);

    sizeofCallEClass = createEClass(SIZEOF_CALL);
    createEAttribute(sizeofCallEClass, SIZEOF_CALL__NAME);

    atCallEClass = createEClass(AT_CALL);
    createEReference(atCallEClass, AT_CALL__EXP);

    lFeatureCallEClass = createEClass(LFEATURE_CALL);
    createEAttribute(lFeatureCallEClass, LFEATURE_CALL__FEATURE);
    createEAttribute(lFeatureCallEClass, LFEATURE_CALL__EXPLICIT_OPERATION_CALL);
    createEReference(lFeatureCallEClass, LFEATURE_CALL__FEATURE_CALL_ARGUMENTS);

    lNumberLiteralEClass = createEClass(LNUMBER_LITERAL);
    createEAttribute(lNumberLiteralEClass, LNUMBER_LITERAL__VALUE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    statementEClass.getESuperTypes().add(this.getLinkerScriptStatement());
    statementEClass.getESuperTypes().add(this.getOutputSectionCommand());
    phdrsCommandEClass.getESuperTypes().add(this.getLinkerScriptStatement());
    sectionsCommandEClass.getESuperTypes().add(this.getLinkerScriptStatement());
    outputSectionEClass.getESuperTypes().add(this.getOutputSectionCommand());
    memoryCommandEClass.getESuperTypes().add(this.getLinkerScriptStatement());
    statementAssignmentEClass.getESuperTypes().add(this.getStatement());
    statementStartupEClass.getESuperTypes().add(this.getStatement());
    statementEntryEClass.getESuperTypes().add(this.getStatement());
    statementAssertEClass.getESuperTypes().add(this.getStatement());
    statementTargetEClass.getESuperTypes().add(this.getStatement());
    statementSearchDirEClass.getESuperTypes().add(this.getStatement());
    statementOutputEClass.getESuperTypes().add(this.getStatement());
    statementOutputFormatEClass.getESuperTypes().add(this.getStatement());
    statementOutputArchEClass.getESuperTypes().add(this.getStatement());
    statementForceCommonAllocationEClass.getESuperTypes().add(this.getStatement());
    statementInhibitCommonAllocationEClass.getESuperTypes().add(this.getStatement());
    statementInputEClass.getESuperTypes().add(this.getStatement());
    statementGroupEClass.getESuperTypes().add(this.getStatement());
    statementMapEClass.getESuperTypes().add(this.getStatement());
    statementNoCrossRefsEClass.getESuperTypes().add(this.getStatement());
    statementNoCrossRefsToEClass.getESuperTypes().add(this.getStatement());
    statementExternEClass.getESuperTypes().add(this.getStatement());
    statementIncludeEClass.getESuperTypes().add(this.getStatement());
    statementNopEClass.getESuperTypes().add(this.getStatement());
    outputSectionAlignExpressionEClass.getESuperTypes().add(this.getOutputSectionAlign());
    outputSectionAlignWithInputEClass.getESuperTypes().add(this.getOutputSectionAlign());
    outputSectionConstraintOnlyIfROEClass.getESuperTypes().add(this.getOutputSectionConstraint());
    outputSectionConstraintOnlyIfRWEClass.getESuperTypes().add(this.getOutputSectionConstraint());
    outputSectionConstraintSpecialEClass.getESuperTypes().add(this.getOutputSectionConstraint());
    outputSectionTypeNoLoadEClass.getESuperTypes().add(this.getOutputSectionType());
    outputSectionTypeDSectEClass.getESuperTypes().add(this.getOutputSectionType());
    outputSectionTypeCopyEClass.getESuperTypes().add(this.getOutputSectionType());
    outputSectionTypeInfoEClass.getESuperTypes().add(this.getOutputSectionType());
    outputSectionTypeOverlayEClass.getESuperTypes().add(this.getOutputSectionType());
    statementCreateObjectSymbolsEClass.getESuperTypes().add(this.getStatement());
    statementConstructorsEClass.getESuperTypes().add(this.getStatement());
    statementConstructorsSortedEClass.getESuperTypes().add(this.getStatement());
    statementDataEClass.getESuperTypes().add(this.getStatement());
    statementFillEClass.getESuperTypes().add(this.getStatement());
    statementInputSectionEClass.getESuperTypes().add(this.getStatement());
    assignmentHiddenEClass.getESuperTypes().add(this.getAssignment());
    assignmentProvideEClass.getESuperTypes().add(this.getAssignment());
    assignmentProvideHiddenEClass.getESuperTypes().add(this.getAssignment());
    inputSectionFileEClass.getESuperTypes().add(this.getInputSection());
    inputSectionWildEClass.getESuperTypes().add(this.getInputSection());
    wildcardSortNoneEClass.getESuperTypes().add(this.getWildcard());
    wildcardSortNameEClass.getESuperTypes().add(this.getWildcard());
    wildcardSortAlignEClass.getESuperTypes().add(this.getWildcard());
    wildcardSortNameAlignEClass.getESuperTypes().add(this.getWildcard());
    wildcardSortAlignNameEClass.getESuperTypes().add(this.getWildcard());
    wildcardSortInitPriorityEClass.getESuperTypes().add(this.getWildcard());
    lTernaryOperationEClass.getESuperTypes().add(this.getLExpression());
    lBinaryOperationEClass.getESuperTypes().add(this.getLExpression());
    lUnaryOperationEClass.getESuperTypes().add(this.getLExpression());
    lPostfixOperationEClass.getESuperTypes().add(this.getLExpression());
    lVariableEClass.getESuperTypes().add(this.getLExpression());
    lengthCallEClass.getESuperTypes().add(this.getLExpression());
    alignCallEClass.getESuperTypes().add(this.getLExpression());
    sizeofCallEClass.getESuperTypes().add(this.getLExpression());
    atCallEClass.getESuperTypes().add(this.getLExpression());
    lFeatureCallEClass.getESuperTypes().add(this.getLExpression());
    lNumberLiteralEClass.getESuperTypes().add(this.getLExpression());

    // Initialize classes and features; add operations and parameters
    initEClass(linkerScriptEClass, LinkerScript.class, "LinkerScript", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLinkerScript_Statements(), this.getLinkerScriptStatement(), null, "statements", null, 0, -1, LinkerScript.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(linkerScriptStatementEClass, LinkerScriptStatement.class, "LinkerScriptStatement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementEClass, Statement.class, "Statement", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(fileListEClass, FileList.class, "FileList", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getFileList_Files(), this.getFileListName(), null, "files", null, 0, -1, FileList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFileList_AsNeeded(), ecorePackage.getEBoolean(), "asNeeded", null, 0, 1, FileList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getFileList_List(), this.getFileList(), null, "list", null, 0, 1, FileList.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(fileListNameEClass, FileListName.class, "FileListName", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getFileListName_Library(), ecorePackage.getEBoolean(), "library", null, 0, 1, FileListName.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getFileListName_Name(), ecorePackage.getEString(), "name", null, 0, 1, FileListName.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(phdrsCommandEClass, PhdrsCommand.class, "PhdrsCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPhdrsCommand_Phdrs(), this.getPhdr(), null, "phdrs", null, 0, -1, PhdrsCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(phdrEClass, Phdr.class, "Phdr", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getPhdr_Name(), ecorePackage.getEString(), "name", null, 0, 1, Phdr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getPhdr_Opts(), this.getLExpression(), null, "opts", null, 0, -1, Phdr.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sectionsCommandEClass, SectionsCommand.class, "SectionsCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSectionsCommand_SectionCommands(), this.getOutputSectionCommand(), null, "sectionCommands", null, 0, -1, SectionsCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(outputSectionCommandEClass, OutputSectionCommand.class, "OutputSectionCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionEClass, OutputSection.class, "OutputSection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getOutputSection_Name(), ecorePackage.getEString(), "name", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutputSection_Address(), this.getLExpression(), null, "address", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutputSection_Type(), this.getOutputSectionType(), null, "type", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutputSection_At(), this.getLExpression(), null, "at", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutputSection_Align(), this.getOutputSectionAlign(), null, "align", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutputSection_SubAlign(), this.getLExpression(), null, "subAlign", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutputSection_Constraint(), this.getOutputSectionConstraint(), null, "constraint", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutputSection_Statements(), this.getStatement(), null, "statements", null, 0, -1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOutputSection_Memory(), ecorePackage.getEString(), "memory", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOutputSection_AtMemory(), ecorePackage.getEString(), "atMemory", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getOutputSection_Phdrs(), ecorePackage.getEString(), "phdrs", null, 0, -1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getOutputSection_Fill(), this.getLExpression(), null, "fill", null, 0, 1, OutputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(outputSectionAlignEClass, OutputSectionAlign.class, "OutputSectionAlign", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionConstraintEClass, OutputSectionConstraint.class, "OutputSectionConstraint", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionTypeEClass, OutputSectionType.class, "OutputSectionType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(assignmentEClass, Assignment.class, "Assignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAssignment_Name(), ecorePackage.getEString(), "name", null, 0, 1, Assignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getAssignment_Feature(), ecorePackage.getEString(), "feature", null, 0, 1, Assignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAssignment_Exp(), this.getLExpression(), null, "exp", null, 0, 1, Assignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inputSectionEClass, InputSection.class, "InputSection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInputSection_Flags(), ecorePackage.getEString(), "flags", null, 0, -1, InputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getInputSection_Keep(), ecorePackage.getEBoolean(), "keep", null, 0, 1, InputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inputSectionFlagsEClass, InputSectionFlags.class, "InputSectionFlags", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInputSectionFlags_Flags(), ecorePackage.getEString(), "flags", null, 0, -1, InputSectionFlags.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(wildcardEClass, Wildcard.class, "Wildcard", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getWildcard_Name(), ecorePackage.getEString(), "name", null, 0, 1, Wildcard.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getWildcard_Excludes(), ecorePackage.getEString(), "excludes", null, 0, -1, Wildcard.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(memoryCommandEClass, MemoryCommand.class, "MemoryCommand", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getMemoryCommand_Memories(), this.getMemory(), null, "memories", null, 0, -1, MemoryCommand.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(memoryEClass, Memory.class, "Memory", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getMemory_Name(), ecorePackage.getEString(), "name", null, 0, 1, Memory.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getMemory_Attr(), ecorePackage.getEString(), "attr", null, 0, 1, Memory.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMemory_Origin(), this.getLExpression(), null, "origin", null, 0, 1, Memory.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getMemory_Length(), this.getLExpression(), null, "length", null, 0, 1, Memory.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lExpressionEClass, LExpression.class, "LExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementAssignmentEClass, StatementAssignment.class, "StatementAssignment", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStatementAssignment_Assignment(), this.getAssignment(), null, "assignment", null, 0, 1, StatementAssignment.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementStartupEClass, StatementStartup.class, "StatementStartup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementStartup_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementStartup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementEntryEClass, StatementEntry.class, "StatementEntry", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementEntry_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementEntry.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementAssertEClass, StatementAssert.class, "StatementAssert", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStatementAssert_Exp(), this.getLExpression(), null, "exp", null, 0, 1, StatementAssert.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStatementAssert_Message(), ecorePackage.getEString(), "message", null, 0, 1, StatementAssert.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementTargetEClass, StatementTarget.class, "StatementTarget", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementTarget_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementTarget.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementSearchDirEClass, StatementSearchDir.class, "StatementSearchDir", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementSearchDir_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementSearchDir.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementOutputEClass, StatementOutput.class, "StatementOutput", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementOutput_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementOutput.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementOutputFormatEClass, StatementOutputFormat.class, "StatementOutputFormat", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementOutputFormat_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementOutputFormat.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStatementOutputFormat_Big(), ecorePackage.getEString(), "big", null, 0, 1, StatementOutputFormat.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStatementOutputFormat_Little(), ecorePackage.getEString(), "little", null, 0, 1, StatementOutputFormat.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementOutputArchEClass, StatementOutputArch.class, "StatementOutputArch", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementOutputArch_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementOutputArch.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementForceCommonAllocationEClass, StatementForceCommonAllocation.class, "StatementForceCommonAllocation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementInhibitCommonAllocationEClass, StatementInhibitCommonAllocation.class, "StatementInhibitCommonAllocation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementInputEClass, StatementInput.class, "StatementInput", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStatementInput_List(), this.getFileList(), null, "list", null, 0, 1, StatementInput.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementGroupEClass, StatementGroup.class, "StatementGroup", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStatementGroup_Files(), this.getFileListName(), null, "files", null, 0, -1, StatementGroup.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementMapEClass, StatementMap.class, "StatementMap", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementMap_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementMap.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementNoCrossRefsEClass, StatementNoCrossRefs.class, "StatementNoCrossRefs", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementNoCrossRefs_Sections(), ecorePackage.getEString(), "sections", null, 0, -1, StatementNoCrossRefs.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementNoCrossRefsToEClass, StatementNoCrossRefsTo.class, "StatementNoCrossRefsTo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementNoCrossRefsTo_Sections(), ecorePackage.getEString(), "sections", null, 0, -1, StatementNoCrossRefsTo.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementExternEClass, StatementExtern.class, "StatementExtern", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementExtern_Sections(), ecorePackage.getEString(), "sections", null, 0, -1, StatementExtern.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementIncludeEClass, StatementInclude.class, "StatementInclude", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementInclude_Name(), ecorePackage.getEString(), "name", null, 0, 1, StatementInclude.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getStatementInclude_Filename(), ecorePackage.getEString(), "filename", null, 0, 1, StatementInclude.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementNopEClass, StatementNop.class, "StatementNop", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionAlignExpressionEClass, OutputSectionAlignExpression.class, "OutputSectionAlignExpression", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getOutputSectionAlignExpression_Exp(), this.getLExpression(), null, "exp", null, 0, 1, OutputSectionAlignExpression.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(outputSectionAlignWithInputEClass, OutputSectionAlignWithInput.class, "OutputSectionAlignWithInput", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionConstraintOnlyIfROEClass, OutputSectionConstraintOnlyIfRO.class, "OutputSectionConstraintOnlyIfRO", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionConstraintOnlyIfRWEClass, OutputSectionConstraintOnlyIfRW.class, "OutputSectionConstraintOnlyIfRW", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionConstraintSpecialEClass, OutputSectionConstraintSpecial.class, "OutputSectionConstraintSpecial", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionTypeNoLoadEClass, OutputSectionTypeNoLoad.class, "OutputSectionTypeNoLoad", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionTypeDSectEClass, OutputSectionTypeDSect.class, "OutputSectionTypeDSect", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionTypeCopyEClass, OutputSectionTypeCopy.class, "OutputSectionTypeCopy", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionTypeInfoEClass, OutputSectionTypeInfo.class, "OutputSectionTypeInfo", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(outputSectionTypeOverlayEClass, OutputSectionTypeOverlay.class, "OutputSectionTypeOverlay", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementCreateObjectSymbolsEClass, StatementCreateObjectSymbols.class, "StatementCreateObjectSymbols", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementConstructorsEClass, StatementConstructors.class, "StatementConstructors", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementConstructorsSortedEClass, StatementConstructorsSorted.class, "StatementConstructorsSorted", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(statementDataEClass, StatementData.class, "StatementData", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getStatementData_Size(), ecorePackage.getEString(), "size", null, 0, 1, StatementData.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getStatementData_Data(), this.getLExpression(), null, "data", null, 0, 1, StatementData.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementFillEClass, StatementFill.class, "StatementFill", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStatementFill_Fill(), this.getLExpression(), null, "fill", null, 0, 1, StatementFill.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(statementInputSectionEClass, StatementInputSection.class, "StatementInputSection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getStatementInputSection_Spec(), this.getInputSection(), null, "spec", null, 0, 1, StatementInputSection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(assignmentHiddenEClass, AssignmentHidden.class, "AssignmentHidden", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(assignmentProvideEClass, AssignmentProvide.class, "AssignmentProvide", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(assignmentProvideHiddenEClass, AssignmentProvideHidden.class, "AssignmentProvideHidden", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(inputSectionFileEClass, InputSectionFile.class, "InputSectionFile", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getInputSectionFile_File(), ecorePackage.getEString(), "file", null, 0, 1, InputSectionFile.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(inputSectionWildEClass, InputSectionWild.class, "InputSectionWild", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getInputSectionWild_WildFile(), this.getWildcard(), null, "wildFile", null, 0, 1, InputSectionWild.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getInputSectionWild_Sections(), this.getWildcard(), null, "sections", null, 0, -1, InputSectionWild.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(wildcardSortNoneEClass, WildcardSortNone.class, "WildcardSortNone", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(wildcardSortNameEClass, WildcardSortName.class, "WildcardSortName", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(wildcardSortAlignEClass, WildcardSortAlign.class, "WildcardSortAlign", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(wildcardSortNameAlignEClass, WildcardSortNameAlign.class, "WildcardSortNameAlign", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(wildcardSortAlignNameEClass, WildcardSortAlignName.class, "WildcardSortAlignName", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(wildcardSortInitPriorityEClass, WildcardSortInitPriority.class, "WildcardSortInitPriority", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(lTernaryOperationEClass, LTernaryOperation.class, "LTernaryOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLTernaryOperation_Condition(), this.getLExpression(), null, "condition", null, 0, 1, LTernaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLTernaryOperation_IfPart(), this.getLExpression(), null, "ifPart", null, 0, 1, LTernaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLTernaryOperation_ThenPart(), this.getLExpression(), null, "thenPart", null, 0, 1, LTernaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lBinaryOperationEClass, LBinaryOperation.class, "LBinaryOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLBinaryOperation_LeftOperand(), this.getLExpression(), null, "leftOperand", null, 0, 1, LBinaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLBinaryOperation_Feature(), ecorePackage.getEString(), "feature", null, 0, 1, LBinaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLBinaryOperation_RightOperand(), this.getLExpression(), null, "rightOperand", null, 0, 1, LBinaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lUnaryOperationEClass, LUnaryOperation.class, "LUnaryOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLUnaryOperation_Feature(), ecorePackage.getEString(), "feature", null, 0, 1, LUnaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLUnaryOperation_Operand(), this.getLExpression(), null, "operand", null, 0, 1, LUnaryOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lPostfixOperationEClass, LPostfixOperation.class, "LPostfixOperation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getLPostfixOperation_Operand(), this.getLExpression(), null, "operand", null, 0, 1, LPostfixOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLPostfixOperation_Feature(), ecorePackage.getEString(), "feature", null, 0, 1, LPostfixOperation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lVariableEClass, LVariable.class, "LVariable", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLVariable_Feature(), ecorePackage.getEString(), "feature", null, 0, 1, LVariable.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lengthCallEClass, LengthCall.class, "LengthCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLengthCall_Memory(), ecorePackage.getEString(), "memory", null, 0, 1, LengthCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(alignCallEClass, AlignCall.class, "AlignCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAlignCall_ExpOrAlign(), this.getLExpression(), null, "expOrAlign", null, 0, 1, AlignCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getAlignCall_Align(), this.getLExpression(), null, "align", null, 0, 1, AlignCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sizeofCallEClass, SizeofCall.class, "SizeofCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSizeofCall_Name(), ecorePackage.getEString(), "name", null, 0, 1, SizeofCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(atCallEClass, AtCall.class, "AtCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getAtCall_Exp(), this.getLExpression(), null, "exp", null, 0, 1, AtCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lFeatureCallEClass, LFeatureCall.class, "LFeatureCall", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLFeatureCall_Feature(), ecorePackage.getEString(), "feature", null, 0, 1, LFeatureCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getLFeatureCall_ExplicitOperationCall(), ecorePackage.getEBoolean(), "explicitOperationCall", null, 0, 1, LFeatureCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLFeatureCall_FeatureCallArguments(), this.getLExpression(), null, "featureCallArguments", null, 0, -1, LFeatureCall.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(lNumberLiteralEClass, LNumberLiteral.class, "LNumberLiteral", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLNumberLiteral_Value(), ecorePackage.getELongObject(), "value", null, 0, 1, LNumberLiteral.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Create resource
    createResource(eNS_URI);
  }

} //LinkerScriptPackageImpl

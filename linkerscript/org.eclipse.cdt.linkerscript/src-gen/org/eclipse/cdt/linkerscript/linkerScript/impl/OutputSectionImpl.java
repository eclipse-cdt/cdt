/**
 * generated by Xtext 2.10.0
 */
package org.eclipse.cdt.linkerscript.linkerScript.impl;

import java.util.Collection;

import org.eclipse.cdt.linkerscript.linkerScript.LExpression;
import org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSection;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlign;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraint;
import org.eclipse.cdt.linkerscript.linkerScript.OutputSectionType;
import org.eclipse.cdt.linkerscript.linkerScript.Statement;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Output Section</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getAddress <em>Address</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getAt <em>At</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getAlign <em>Align</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getSubAlign <em>Sub Align</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getConstraint <em>Constraint</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getStatements <em>Statements</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getMemory <em>Memory</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getAtMemory <em>At Memory</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getPhdrs <em>Phdrs</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.OutputSectionImpl#getFill <em>Fill</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OutputSectionImpl extends OutputSectionCommandImpl implements OutputSection
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAddress() <em>Address</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAddress()
   * @generated
   * @ordered
   */
  protected LExpression address;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected OutputSectionType type;

  /**
   * The cached value of the '{@link #getAt() <em>At</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAt()
   * @generated
   * @ordered
   */
  protected LExpression at;

  /**
   * The cached value of the '{@link #getAlign() <em>Align</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlign()
   * @generated
   * @ordered
   */
  protected OutputSectionAlign align;

  /**
   * The cached value of the '{@link #getSubAlign() <em>Sub Align</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubAlign()
   * @generated
   * @ordered
   */
  protected LExpression subAlign;

  /**
   * The cached value of the '{@link #getConstraint() <em>Constraint</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraint()
   * @generated
   * @ordered
   */
  protected OutputSectionConstraint constraint;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> statements;

  /**
   * The default value of the '{@link #getMemory() <em>Memory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemory()
   * @generated
   * @ordered
   */
  protected static final String MEMORY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMemory() <em>Memory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMemory()
   * @generated
   * @ordered
   */
  protected String memory = MEMORY_EDEFAULT;

  /**
   * The default value of the '{@link #getAtMemory() <em>At Memory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtMemory()
   * @generated
   * @ordered
   */
  protected static final String AT_MEMORY_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getAtMemory() <em>At Memory</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAtMemory()
   * @generated
   * @ordered
   */
  protected String atMemory = AT_MEMORY_EDEFAULT;

  /**
   * The cached value of the '{@link #getPhdrs() <em>Phdrs</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhdrs()
   * @generated
   * @ordered
   */
  protected EList<String> phdrs;

  /**
   * The cached value of the '{@link #getFill() <em>Fill</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFill()
   * @generated
   * @ordered
   */
  protected LExpression fill;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OutputSectionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LinkerScriptPackage.Literals.OUTPUT_SECTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpression getAddress()
  {
    return address;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAddress(LExpression newAddress, NotificationChain msgs)
  {
    LExpression oldAddress = address;
    address = newAddress;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__ADDRESS, oldAddress, newAddress);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAddress(LExpression newAddress)
  {
    if (newAddress != address)
    {
      NotificationChain msgs = null;
      if (address != null)
        msgs = ((InternalEObject)address).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__ADDRESS, null, msgs);
      if (newAddress != null)
        msgs = ((InternalEObject)newAddress).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__ADDRESS, null, msgs);
      msgs = basicSetAddress(newAddress, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__ADDRESS, newAddress, newAddress));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionType getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetType(OutputSectionType newType, NotificationChain msgs)
  {
    OutputSectionType oldType = type;
    type = newType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__TYPE, oldType, newType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setType(OutputSectionType newType)
  {
    if (newType != type)
    {
      NotificationChain msgs = null;
      if (type != null)
        msgs = ((InternalEObject)type).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__TYPE, null, msgs);
      if (newType != null)
        msgs = ((InternalEObject)newType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__TYPE, null, msgs);
      msgs = basicSetType(newType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__TYPE, newType, newType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpression getAt()
  {
    return at;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAt(LExpression newAt, NotificationChain msgs)
  {
    LExpression oldAt = at;
    at = newAt;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__AT, oldAt, newAt);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAt(LExpression newAt)
  {
    if (newAt != at)
    {
      NotificationChain msgs = null;
      if (at != null)
        msgs = ((InternalEObject)at).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__AT, null, msgs);
      if (newAt != null)
        msgs = ((InternalEObject)newAt).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__AT, null, msgs);
      msgs = basicSetAt(newAt, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__AT, newAt, newAt));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionAlign getAlign()
  {
    return align;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlign(OutputSectionAlign newAlign, NotificationChain msgs)
  {
    OutputSectionAlign oldAlign = align;
    align = newAlign;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__ALIGN, oldAlign, newAlign);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlign(OutputSectionAlign newAlign)
  {
    if (newAlign != align)
    {
      NotificationChain msgs = null;
      if (align != null)
        msgs = ((InternalEObject)align).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__ALIGN, null, msgs);
      if (newAlign != null)
        msgs = ((InternalEObject)newAlign).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__ALIGN, null, msgs);
      msgs = basicSetAlign(newAlign, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__ALIGN, newAlign, newAlign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpression getSubAlign()
  {
    return subAlign;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubAlign(LExpression newSubAlign, NotificationChain msgs)
  {
    LExpression oldSubAlign = subAlign;
    subAlign = newSubAlign;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN, oldSubAlign, newSubAlign);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSubAlign(LExpression newSubAlign)
  {
    if (newSubAlign != subAlign)
    {
      NotificationChain msgs = null;
      if (subAlign != null)
        msgs = ((InternalEObject)subAlign).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN, null, msgs);
      if (newSubAlign != null)
        msgs = ((InternalEObject)newSubAlign).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN, null, msgs);
      msgs = basicSetSubAlign(newSubAlign, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN, newSubAlign, newSubAlign));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OutputSectionConstraint getConstraint()
  {
    return constraint;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConstraint(OutputSectionConstraint newConstraint, NotificationChain msgs)
  {
    OutputSectionConstraint oldConstraint = constraint;
    constraint = newConstraint;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT, oldConstraint, newConstraint);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setConstraint(OutputSectionConstraint newConstraint)
  {
    if (newConstraint != constraint)
    {
      NotificationChain msgs = null;
      if (constraint != null)
        msgs = ((InternalEObject)constraint).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT, null, msgs);
      if (newConstraint != null)
        msgs = ((InternalEObject)newConstraint).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT, null, msgs);
      msgs = basicSetConstraint(newConstraint, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT, newConstraint, newConstraint));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Statement> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<Statement>(Statement.class, this, LinkerScriptPackage.OUTPUT_SECTION__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMemory()
  {
    return memory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMemory(String newMemory)
  {
    String oldMemory = memory;
    memory = newMemory;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__MEMORY, oldMemory, memory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getAtMemory()
  {
    return atMemory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAtMemory(String newAtMemory)
  {
    String oldAtMemory = atMemory;
    atMemory = newAtMemory;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__AT_MEMORY, oldAtMemory, atMemory));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getPhdrs()
  {
    if (phdrs == null)
    {
      phdrs = new EDataTypeEList<String>(String.class, this, LinkerScriptPackage.OUTPUT_SECTION__PHDRS);
    }
    return phdrs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LExpression getFill()
  {
    return fill;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFill(LExpression newFill, NotificationChain msgs)
  {
    LExpression oldFill = fill;
    fill = newFill;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__FILL, oldFill, newFill);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFill(LExpression newFill)
  {
    if (newFill != fill)
    {
      NotificationChain msgs = null;
      if (fill != null)
        msgs = ((InternalEObject)fill).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__FILL, null, msgs);
      if (newFill != null)
        msgs = ((InternalEObject)newFill).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LinkerScriptPackage.OUTPUT_SECTION__FILL, null, msgs);
      msgs = basicSetFill(newFill, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.OUTPUT_SECTION__FILL, newFill, newFill));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.OUTPUT_SECTION__ADDRESS:
        return basicSetAddress(null, msgs);
      case LinkerScriptPackage.OUTPUT_SECTION__TYPE:
        return basicSetType(null, msgs);
      case LinkerScriptPackage.OUTPUT_SECTION__AT:
        return basicSetAt(null, msgs);
      case LinkerScriptPackage.OUTPUT_SECTION__ALIGN:
        return basicSetAlign(null, msgs);
      case LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN:
        return basicSetSubAlign(null, msgs);
      case LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT:
        return basicSetConstraint(null, msgs);
      case LinkerScriptPackage.OUTPUT_SECTION__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
      case LinkerScriptPackage.OUTPUT_SECTION__FILL:
        return basicSetFill(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.OUTPUT_SECTION__NAME:
        return getName();
      case LinkerScriptPackage.OUTPUT_SECTION__ADDRESS:
        return getAddress();
      case LinkerScriptPackage.OUTPUT_SECTION__TYPE:
        return getType();
      case LinkerScriptPackage.OUTPUT_SECTION__AT:
        return getAt();
      case LinkerScriptPackage.OUTPUT_SECTION__ALIGN:
        return getAlign();
      case LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN:
        return getSubAlign();
      case LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT:
        return getConstraint();
      case LinkerScriptPackage.OUTPUT_SECTION__STATEMENTS:
        return getStatements();
      case LinkerScriptPackage.OUTPUT_SECTION__MEMORY:
        return getMemory();
      case LinkerScriptPackage.OUTPUT_SECTION__AT_MEMORY:
        return getAtMemory();
      case LinkerScriptPackage.OUTPUT_SECTION__PHDRS:
        return getPhdrs();
      case LinkerScriptPackage.OUTPUT_SECTION__FILL:
        return getFill();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.OUTPUT_SECTION__NAME:
        setName((String)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__ADDRESS:
        setAddress((LExpression)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__TYPE:
        setType((OutputSectionType)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__AT:
        setAt((LExpression)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__ALIGN:
        setAlign((OutputSectionAlign)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN:
        setSubAlign((LExpression)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT:
        setConstraint((OutputSectionConstraint)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends Statement>)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__MEMORY:
        setMemory((String)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__AT_MEMORY:
        setAtMemory((String)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__PHDRS:
        getPhdrs().clear();
        getPhdrs().addAll((Collection<? extends String>)newValue);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__FILL:
        setFill((LExpression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.OUTPUT_SECTION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__ADDRESS:
        setAddress((LExpression)null);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__TYPE:
        setType((OutputSectionType)null);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__AT:
        setAt((LExpression)null);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__ALIGN:
        setAlign((OutputSectionAlign)null);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN:
        setSubAlign((LExpression)null);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT:
        setConstraint((OutputSectionConstraint)null);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__STATEMENTS:
        getStatements().clear();
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__MEMORY:
        setMemory(MEMORY_EDEFAULT);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__AT_MEMORY:
        setAtMemory(AT_MEMORY_EDEFAULT);
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__PHDRS:
        getPhdrs().clear();
        return;
      case LinkerScriptPackage.OUTPUT_SECTION__FILL:
        setFill((LExpression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.OUTPUT_SECTION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LinkerScriptPackage.OUTPUT_SECTION__ADDRESS:
        return address != null;
      case LinkerScriptPackage.OUTPUT_SECTION__TYPE:
        return type != null;
      case LinkerScriptPackage.OUTPUT_SECTION__AT:
        return at != null;
      case LinkerScriptPackage.OUTPUT_SECTION__ALIGN:
        return align != null;
      case LinkerScriptPackage.OUTPUT_SECTION__SUB_ALIGN:
        return subAlign != null;
      case LinkerScriptPackage.OUTPUT_SECTION__CONSTRAINT:
        return constraint != null;
      case LinkerScriptPackage.OUTPUT_SECTION__STATEMENTS:
        return statements != null && !statements.isEmpty();
      case LinkerScriptPackage.OUTPUT_SECTION__MEMORY:
        return MEMORY_EDEFAULT == null ? memory != null : !MEMORY_EDEFAULT.equals(memory);
      case LinkerScriptPackage.OUTPUT_SECTION__AT_MEMORY:
        return AT_MEMORY_EDEFAULT == null ? atMemory != null : !AT_MEMORY_EDEFAULT.equals(atMemory);
      case LinkerScriptPackage.OUTPUT_SECTION__PHDRS:
        return phdrs != null && !phdrs.isEmpty();
      case LinkerScriptPackage.OUTPUT_SECTION__FILL:
        return fill != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", memory: ");
    result.append(memory);
    result.append(", atMemory: ");
    result.append(atMemory);
    result.append(", phdrs: ");
    result.append(phdrs);
    result.append(')');
    return result.toString();
  }

} //OutputSectionImpl

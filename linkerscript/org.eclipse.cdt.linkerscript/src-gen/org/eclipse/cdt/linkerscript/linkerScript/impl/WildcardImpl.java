/**
 * ******************************************************************************
 * Copyright (c) 2016, 2017 Kichwa Coders Ltd (https://kichwacoders.com/) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  ******************************************************************************
 * 
 * 
 * generated by Xtext 2.10.0
 * Copyright header generated by GenerateLinkerScript.mwe2
 */
package org.eclipse.cdt.linkerscript.linkerScript.impl;

import java.util.Collection;

import org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage;
import org.eclipse.cdt.linkerscript.linkerScript.Wildcard;
import org.eclipse.cdt.linkerscript.linkerScript.WildcardSort;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Wildcard</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.WildcardImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.WildcardImpl#getExcludes <em>Excludes</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.WildcardImpl#getPrimarySort <em>Primary Sort</em>}</li>
 *   <li>{@link org.eclipse.cdt.linkerscript.linkerScript.impl.WildcardImpl#getSecondarySort <em>Secondary Sort</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WildcardImpl extends MinimalEObjectImpl.Container implements Wildcard
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getExcludes() <em>Excludes</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExcludes()
   * @generated
   * @ordered
   */
  protected EList<String> excludes;

  /**
   * The default value of the '{@link #getPrimarySort() <em>Primary Sort</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimarySort()
   * @generated
   * @ordered
   */
  protected static final WildcardSort PRIMARY_SORT_EDEFAULT = WildcardSort.SORT_NONE;

  /**
   * The cached value of the '{@link #getPrimarySort() <em>Primary Sort</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPrimarySort()
   * @generated
   * @ordered
   */
  protected WildcardSort primarySort = PRIMARY_SORT_EDEFAULT;

  /**
   * The default value of the '{@link #getSecondarySort() <em>Secondary Sort</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecondarySort()
   * @generated
   * @ordered
   */
  protected static final WildcardSort SECONDARY_SORT_EDEFAULT = WildcardSort.SORT_NONE;

  /**
   * The cached value of the '{@link #getSecondarySort() <em>Secondary Sort</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSecondarySort()
   * @generated
   * @ordered
   */
  protected WildcardSort secondarySort = SECONDARY_SORT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WildcardImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LinkerScriptPackage.Literals.WILDCARD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.WILDCARD__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<String> getExcludes()
  {
    if (excludes == null)
    {
      excludes = new EDataTypeEList<String>(String.class, this, LinkerScriptPackage.WILDCARD__EXCLUDES);
    }
    return excludes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WildcardSort getPrimarySort()
  {
    return primarySort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPrimarySort(WildcardSort newPrimarySort)
  {
    WildcardSort oldPrimarySort = primarySort;
    primarySort = newPrimarySort == null ? PRIMARY_SORT_EDEFAULT : newPrimarySort;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.WILDCARD__PRIMARY_SORT, oldPrimarySort, primarySort));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WildcardSort getSecondarySort()
  {
    return secondarySort;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSecondarySort(WildcardSort newSecondarySort)
  {
    WildcardSort oldSecondarySort = secondarySort;
    secondarySort = newSecondarySort == null ? SECONDARY_SORT_EDEFAULT : newSecondarySort;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LinkerScriptPackage.WILDCARD__SECONDARY_SORT, oldSecondarySort, secondarySort));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.WILDCARD__NAME:
        return getName();
      case LinkerScriptPackage.WILDCARD__EXCLUDES:
        return getExcludes();
      case LinkerScriptPackage.WILDCARD__PRIMARY_SORT:
        return getPrimarySort();
      case LinkerScriptPackage.WILDCARD__SECONDARY_SORT:
        return getSecondarySort();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.WILDCARD__NAME:
        setName((String)newValue);
        return;
      case LinkerScriptPackage.WILDCARD__EXCLUDES:
        getExcludes().clear();
        getExcludes().addAll((Collection<? extends String>)newValue);
        return;
      case LinkerScriptPackage.WILDCARD__PRIMARY_SORT:
        setPrimarySort((WildcardSort)newValue);
        return;
      case LinkerScriptPackage.WILDCARD__SECONDARY_SORT:
        setSecondarySort((WildcardSort)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.WILDCARD__NAME:
        setName(NAME_EDEFAULT);
        return;
      case LinkerScriptPackage.WILDCARD__EXCLUDES:
        getExcludes().clear();
        return;
      case LinkerScriptPackage.WILDCARD__PRIMARY_SORT:
        setPrimarySort(PRIMARY_SORT_EDEFAULT);
        return;
      case LinkerScriptPackage.WILDCARD__SECONDARY_SORT:
        setSecondarySort(SECONDARY_SORT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LinkerScriptPackage.WILDCARD__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case LinkerScriptPackage.WILDCARD__EXCLUDES:
        return excludes != null && !excludes.isEmpty();
      case LinkerScriptPackage.WILDCARD__PRIMARY_SORT:
        return primarySort != PRIMARY_SORT_EDEFAULT;
      case LinkerScriptPackage.WILDCARD__SECONDARY_SORT:
        return secondarySort != SECONDARY_SORT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", excludes: ");
    result.append(excludes);
    result.append(", primarySort: ");
    result.append(primarySort);
    result.append(", secondarySort: ");
    result.append(secondarySort);
    result.append(')');
    return result.toString();
  }

} //WildcardImpl

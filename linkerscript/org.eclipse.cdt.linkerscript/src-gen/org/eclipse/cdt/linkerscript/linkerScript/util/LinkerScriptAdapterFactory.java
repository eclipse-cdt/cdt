/**
 * ******************************************************************************
 * Copyright (c) 2016, 2017 Kichwa Coders Ltd (https://kichwacoders.com/) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  ******************************************************************************
 * 
 * 
 * generated by Xtext 2.10.0
 * Copyright header generated by GenerateLinkerScript.mwe2
 */
package org.eclipse.cdt.linkerscript.linkerScript.util;

import org.eclipse.cdt.linkerscript.linkerScript.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage
 * @generated
 */
public class LinkerScriptAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LinkerScriptPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkerScriptAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = LinkerScriptPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LinkerScriptSwitch<Adapter> modelSwitch =
    new LinkerScriptSwitch<Adapter>()
    {
      @Override
      public Adapter caseLinkerScript(LinkerScript object)
      {
        return createLinkerScriptAdapter();
      }
      @Override
      public Adapter caseLinkerScriptStatement(LinkerScriptStatement object)
      {
        return createLinkerScriptStatementAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseFileList(FileList object)
      {
        return createFileListAdapter();
      }
      @Override
      public Adapter caseFileListName(FileListName object)
      {
        return createFileListNameAdapter();
      }
      @Override
      public Adapter casePhdrsCommand(PhdrsCommand object)
      {
        return createPhdrsCommandAdapter();
      }
      @Override
      public Adapter casePhdr(Phdr object)
      {
        return createPhdrAdapter();
      }
      @Override
      public Adapter caseSectionsCommand(SectionsCommand object)
      {
        return createSectionsCommandAdapter();
      }
      @Override
      public Adapter caseOutputSectionCommand(OutputSectionCommand object)
      {
        return createOutputSectionCommandAdapter();
      }
      @Override
      public Adapter caseOutputSection(OutputSection object)
      {
        return createOutputSectionAdapter();
      }
      @Override
      public Adapter caseOutputSectionAlign(OutputSectionAlign object)
      {
        return createOutputSectionAlignAdapter();
      }
      @Override
      public Adapter caseOutputSectionConstraint(OutputSectionConstraint object)
      {
        return createOutputSectionConstraintAdapter();
      }
      @Override
      public Adapter caseOutputSectionType(OutputSectionType object)
      {
        return createOutputSectionTypeAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseInputSection(InputSection object)
      {
        return createInputSectionAdapter();
      }
      @Override
      public Adapter caseWildcard(Wildcard object)
      {
        return createWildcardAdapter();
      }
      @Override
      public Adapter caseMemoryCommand(MemoryCommand object)
      {
        return createMemoryCommandAdapter();
      }
      @Override
      public Adapter caseMemory(Memory object)
      {
        return createMemoryAdapter();
      }
      @Override
      public Adapter caseLExpression(LExpression object)
      {
        return createLExpressionAdapter();
      }
      @Override
      public Adapter caseStatementAssignment(StatementAssignment object)
      {
        return createStatementAssignmentAdapter();
      }
      @Override
      public Adapter caseStatementStartup(StatementStartup object)
      {
        return createStatementStartupAdapter();
      }
      @Override
      public Adapter caseStatementEntry(StatementEntry object)
      {
        return createStatementEntryAdapter();
      }
      @Override
      public Adapter caseStatementAssert(StatementAssert object)
      {
        return createStatementAssertAdapter();
      }
      @Override
      public Adapter caseStatementTarget(StatementTarget object)
      {
        return createStatementTargetAdapter();
      }
      @Override
      public Adapter caseStatementSearchDir(StatementSearchDir object)
      {
        return createStatementSearchDirAdapter();
      }
      @Override
      public Adapter caseStatementOutput(StatementOutput object)
      {
        return createStatementOutputAdapter();
      }
      @Override
      public Adapter caseStatementOutputFormat(StatementOutputFormat object)
      {
        return createStatementOutputFormatAdapter();
      }
      @Override
      public Adapter caseStatementOutputArch(StatementOutputArch object)
      {
        return createStatementOutputArchAdapter();
      }
      @Override
      public Adapter caseStatementForceCommonAllocation(StatementForceCommonAllocation object)
      {
        return createStatementForceCommonAllocationAdapter();
      }
      @Override
      public Adapter caseStatementInhibitCommonAllocation(StatementInhibitCommonAllocation object)
      {
        return createStatementInhibitCommonAllocationAdapter();
      }
      @Override
      public Adapter caseStatementInput(StatementInput object)
      {
        return createStatementInputAdapter();
      }
      @Override
      public Adapter caseStatementGroup(StatementGroup object)
      {
        return createStatementGroupAdapter();
      }
      @Override
      public Adapter caseStatementMap(StatementMap object)
      {
        return createStatementMapAdapter();
      }
      @Override
      public Adapter caseStatementNoCrossRefs(StatementNoCrossRefs object)
      {
        return createStatementNoCrossRefsAdapter();
      }
      @Override
      public Adapter caseStatementNoCrossRefsTo(StatementNoCrossRefsTo object)
      {
        return createStatementNoCrossRefsToAdapter();
      }
      @Override
      public Adapter caseStatementExtern(StatementExtern object)
      {
        return createStatementExternAdapter();
      }
      @Override
      public Adapter caseStatementInclude(StatementInclude object)
      {
        return createStatementIncludeAdapter();
      }
      @Override
      public Adapter caseStatementNop(StatementNop object)
      {
        return createStatementNopAdapter();
      }
      @Override
      public Adapter caseOutputSectionAlignExpression(OutputSectionAlignExpression object)
      {
        return createOutputSectionAlignExpressionAdapter();
      }
      @Override
      public Adapter caseOutputSectionAlignWithInput(OutputSectionAlignWithInput object)
      {
        return createOutputSectionAlignWithInputAdapter();
      }
      @Override
      public Adapter caseOutputSectionConstraintOnlyIfRO(OutputSectionConstraintOnlyIfRO object)
      {
        return createOutputSectionConstraintOnlyIfROAdapter();
      }
      @Override
      public Adapter caseOutputSectionConstraintOnlyIfRW(OutputSectionConstraintOnlyIfRW object)
      {
        return createOutputSectionConstraintOnlyIfRWAdapter();
      }
      @Override
      public Adapter caseOutputSectionConstraintSpecial(OutputSectionConstraintSpecial object)
      {
        return createOutputSectionConstraintSpecialAdapter();
      }
      @Override
      public Adapter caseOutputSectionTypeNoLoad(OutputSectionTypeNoLoad object)
      {
        return createOutputSectionTypeNoLoadAdapter();
      }
      @Override
      public Adapter caseOutputSectionTypeDSect(OutputSectionTypeDSect object)
      {
        return createOutputSectionTypeDSectAdapter();
      }
      @Override
      public Adapter caseOutputSectionTypeCopy(OutputSectionTypeCopy object)
      {
        return createOutputSectionTypeCopyAdapter();
      }
      @Override
      public Adapter caseOutputSectionTypeInfo(OutputSectionTypeInfo object)
      {
        return createOutputSectionTypeInfoAdapter();
      }
      @Override
      public Adapter caseOutputSectionTypeOverlay(OutputSectionTypeOverlay object)
      {
        return createOutputSectionTypeOverlayAdapter();
      }
      @Override
      public Adapter caseStatementCreateObjectSymbols(StatementCreateObjectSymbols object)
      {
        return createStatementCreateObjectSymbolsAdapter();
      }
      @Override
      public Adapter caseStatementConstructors(StatementConstructors object)
      {
        return createStatementConstructorsAdapter();
      }
      @Override
      public Adapter caseStatementConstructorsSorted(StatementConstructorsSorted object)
      {
        return createStatementConstructorsSortedAdapter();
      }
      @Override
      public Adapter caseStatementData(StatementData object)
      {
        return createStatementDataAdapter();
      }
      @Override
      public Adapter caseStatementFill(StatementFill object)
      {
        return createStatementFillAdapter();
      }
      @Override
      public Adapter caseStatementInputSection(StatementInputSection object)
      {
        return createStatementInputSectionAdapter();
      }
      @Override
      public Adapter caseAssignmentHidden(AssignmentHidden object)
      {
        return createAssignmentHiddenAdapter();
      }
      @Override
      public Adapter caseAssignmentProvide(AssignmentProvide object)
      {
        return createAssignmentProvideAdapter();
      }
      @Override
      public Adapter caseAssignmentProvideHidden(AssignmentProvideHidden object)
      {
        return createAssignmentProvideHiddenAdapter();
      }
      @Override
      public Adapter caseInputSectionFile(InputSectionFile object)
      {
        return createInputSectionFileAdapter();
      }
      @Override
      public Adapter caseInputSectionWild(InputSectionWild object)
      {
        return createInputSectionWildAdapter();
      }
      @Override
      public Adapter caseLTernaryOperation(LTernaryOperation object)
      {
        return createLTernaryOperationAdapter();
      }
      @Override
      public Adapter caseLBinaryOperation(LBinaryOperation object)
      {
        return createLBinaryOperationAdapter();
      }
      @Override
      public Adapter caseLUnaryOperation(LUnaryOperation object)
      {
        return createLUnaryOperationAdapter();
      }
      @Override
      public Adapter caseLVariable(LVariable object)
      {
        return createLVariableAdapter();
      }
      @Override
      public Adapter caseLParenthesizedExpression(LParenthesizedExpression object)
      {
        return createLParenthesizedExpressionAdapter();
      }
      @Override
      public Adapter caseLengthCall(LengthCall object)
      {
        return createLengthCallAdapter();
      }
      @Override
      public Adapter caseOriginCall(OriginCall object)
      {
        return createOriginCallAdapter();
      }
      @Override
      public Adapter caseAlignCall(AlignCall object)
      {
        return createAlignCallAdapter();
      }
      @Override
      public Adapter caseSizeofCall(SizeofCall object)
      {
        return createSizeofCallAdapter();
      }
      @Override
      public Adapter caseAtCall(AtCall object)
      {
        return createAtCallAdapter();
      }
      @Override
      public Adapter caseLFeatureCall(LFeatureCall object)
      {
        return createLFeatureCallAdapter();
      }
      @Override
      public Adapter caseLNumberLiteral(LNumberLiteral object)
      {
        return createLNumberLiteralAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LinkerScript <em>Linker Script</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LinkerScript
   * @generated
   */
  public Adapter createLinkerScriptAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptStatement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptStatement
   * @generated
   */
  public Adapter createLinkerScriptStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.FileList <em>File List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.FileList
   * @generated
   */
  public Adapter createFileListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.FileListName <em>File List Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.FileListName
   * @generated
   */
  public Adapter createFileListNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.PhdrsCommand <em>Phdrs Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.PhdrsCommand
   * @generated
   */
  public Adapter createPhdrsCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.Phdr <em>Phdr</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.Phdr
   * @generated
   */
  public Adapter createPhdrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.SectionsCommand <em>Sections Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.SectionsCommand
   * @generated
   */
  public Adapter createSectionsCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionCommand <em>Output Section Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionCommand
   * @generated
   */
  public Adapter createOutputSectionCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSection <em>Output Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSection
   * @generated
   */
  public Adapter createOutputSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlign <em>Output Section Align</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlign
   * @generated
   */
  public Adapter createOutputSectionAlignAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraint <em>Output Section Constraint</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraint
   * @generated
   */
  public Adapter createOutputSectionConstraintAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionType <em>Output Section Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionType
   * @generated
   */
  public Adapter createOutputSectionTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.InputSection <em>Input Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.InputSection
   * @generated
   */
  public Adapter createInputSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.Wildcard <em>Wildcard</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.Wildcard
   * @generated
   */
  public Adapter createWildcardAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.MemoryCommand <em>Memory Command</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.MemoryCommand
   * @generated
   */
  public Adapter createMemoryCommandAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.Memory <em>Memory</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.Memory
   * @generated
   */
  public Adapter createMemoryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LExpression <em>LExpression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LExpression
   * @generated
   */
  public Adapter createLExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementAssignment <em>Statement Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementAssignment
   * @generated
   */
  public Adapter createStatementAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementStartup <em>Statement Startup</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementStartup
   * @generated
   */
  public Adapter createStatementStartupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementEntry <em>Statement Entry</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementEntry
   * @generated
   */
  public Adapter createStatementEntryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementAssert <em>Statement Assert</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementAssert
   * @generated
   */
  public Adapter createStatementAssertAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementTarget <em>Statement Target</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementTarget
   * @generated
   */
  public Adapter createStatementTargetAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementSearchDir <em>Statement Search Dir</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementSearchDir
   * @generated
   */
  public Adapter createStatementSearchDirAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementOutput <em>Statement Output</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementOutput
   * @generated
   */
  public Adapter createStatementOutputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementOutputFormat <em>Statement Output Format</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementOutputFormat
   * @generated
   */
  public Adapter createStatementOutputFormatAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementOutputArch <em>Statement Output Arch</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementOutputArch
   * @generated
   */
  public Adapter createStatementOutputArchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementForceCommonAllocation <em>Statement Force Common Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementForceCommonAllocation
   * @generated
   */
  public Adapter createStatementForceCommonAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementInhibitCommonAllocation <em>Statement Inhibit Common Allocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementInhibitCommonAllocation
   * @generated
   */
  public Adapter createStatementInhibitCommonAllocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementInput <em>Statement Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementInput
   * @generated
   */
  public Adapter createStatementInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementGroup <em>Statement Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementGroup
   * @generated
   */
  public Adapter createStatementGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementMap <em>Statement Map</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementMap
   * @generated
   */
  public Adapter createStatementMapAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementNoCrossRefs <em>Statement No Cross Refs</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementNoCrossRefs
   * @generated
   */
  public Adapter createStatementNoCrossRefsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementNoCrossRefsTo <em>Statement No Cross Refs To</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementNoCrossRefsTo
   * @generated
   */
  public Adapter createStatementNoCrossRefsToAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementExtern <em>Statement Extern</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementExtern
   * @generated
   */
  public Adapter createStatementExternAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementInclude <em>Statement Include</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementInclude
   * @generated
   */
  public Adapter createStatementIncludeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementNop <em>Statement Nop</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementNop
   * @generated
   */
  public Adapter createStatementNopAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlignExpression <em>Output Section Align Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlignExpression
   * @generated
   */
  public Adapter createOutputSectionAlignExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlignWithInput <em>Output Section Align With Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionAlignWithInput
   * @generated
   */
  public Adapter createOutputSectionAlignWithInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintOnlyIfRO <em>Output Section Constraint Only If RO</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintOnlyIfRO
   * @generated
   */
  public Adapter createOutputSectionConstraintOnlyIfROAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintOnlyIfRW <em>Output Section Constraint Only If RW</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintOnlyIfRW
   * @generated
   */
  public Adapter createOutputSectionConstraintOnlyIfRWAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintSpecial <em>Output Section Constraint Special</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionConstraintSpecial
   * @generated
   */
  public Adapter createOutputSectionConstraintSpecialAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeNoLoad <em>Output Section Type No Load</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeNoLoad
   * @generated
   */
  public Adapter createOutputSectionTypeNoLoadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeDSect <em>Output Section Type DSect</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeDSect
   * @generated
   */
  public Adapter createOutputSectionTypeDSectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeCopy <em>Output Section Type Copy</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeCopy
   * @generated
   */
  public Adapter createOutputSectionTypeCopyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeInfo <em>Output Section Type Info</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeInfo
   * @generated
   */
  public Adapter createOutputSectionTypeInfoAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeOverlay <em>Output Section Type Overlay</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OutputSectionTypeOverlay
   * @generated
   */
  public Adapter createOutputSectionTypeOverlayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementCreateObjectSymbols <em>Statement Create Object Symbols</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementCreateObjectSymbols
   * @generated
   */
  public Adapter createStatementCreateObjectSymbolsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementConstructors <em>Statement Constructors</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementConstructors
   * @generated
   */
  public Adapter createStatementConstructorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementConstructorsSorted <em>Statement Constructors Sorted</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementConstructorsSorted
   * @generated
   */
  public Adapter createStatementConstructorsSortedAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementData <em>Statement Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementData
   * @generated
   */
  public Adapter createStatementDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementFill <em>Statement Fill</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementFill
   * @generated
   */
  public Adapter createStatementFillAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.StatementInputSection <em>Statement Input Section</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.StatementInputSection
   * @generated
   */
  public Adapter createStatementInputSectionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.AssignmentHidden <em>Assignment Hidden</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.AssignmentHidden
   * @generated
   */
  public Adapter createAssignmentHiddenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.AssignmentProvide <em>Assignment Provide</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.AssignmentProvide
   * @generated
   */
  public Adapter createAssignmentProvideAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.AssignmentProvideHidden <em>Assignment Provide Hidden</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.AssignmentProvideHidden
   * @generated
   */
  public Adapter createAssignmentProvideHiddenAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.InputSectionFile <em>Input Section File</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.InputSectionFile
   * @generated
   */
  public Adapter createInputSectionFileAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.InputSectionWild <em>Input Section Wild</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.InputSectionWild
   * @generated
   */
  public Adapter createInputSectionWildAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LTernaryOperation <em>LTernary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LTernaryOperation
   * @generated
   */
  public Adapter createLTernaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LBinaryOperation <em>LBinary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LBinaryOperation
   * @generated
   */
  public Adapter createLBinaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LUnaryOperation <em>LUnary Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LUnaryOperation
   * @generated
   */
  public Adapter createLUnaryOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LVariable <em>LVariable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LVariable
   * @generated
   */
  public Adapter createLVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LParenthesizedExpression <em>LParenthesized Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LParenthesizedExpression
   * @generated
   */
  public Adapter createLParenthesizedExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LengthCall <em>Length Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LengthCall
   * @generated
   */
  public Adapter createLengthCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.OriginCall <em>Origin Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.OriginCall
   * @generated
   */
  public Adapter createOriginCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.AlignCall <em>Align Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.AlignCall
   * @generated
   */
  public Adapter createAlignCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.SizeofCall <em>Sizeof Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.SizeofCall
   * @generated
   */
  public Adapter createSizeofCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.AtCall <em>At Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.AtCall
   * @generated
   */
  public Adapter createAtCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LFeatureCall <em>LFeature Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LFeatureCall
   * @generated
   */
  public Adapter createLFeatureCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.eclipse.cdt.linkerscript.linkerScript.LNumberLiteral <em>LNumber Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.eclipse.cdt.linkerscript.linkerScript.LNumberLiteral
   * @generated
   */
  public Adapter createLNumberLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //LinkerScriptAdapterFactory

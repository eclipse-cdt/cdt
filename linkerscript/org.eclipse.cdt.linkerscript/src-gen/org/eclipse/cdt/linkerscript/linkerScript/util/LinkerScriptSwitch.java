/**
 * ******************************************************************************
 * Copyright (c) 2016, 2017 Kichwa Coders Ltd (https://kichwacoders.com/) and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  ******************************************************************************
 * 
 * 
 * generated by Xtext 2.10.0
 * Copyright header generated by GenerateLinkerScript.mwe2
 */
package org.eclipse.cdt.linkerscript.linkerScript.util;

import org.eclipse.cdt.linkerscript.linkerScript.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.eclipse.cdt.linkerscript.linkerScript.LinkerScriptPackage
 * @generated
 */
public class LinkerScriptSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static LinkerScriptPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LinkerScriptSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = LinkerScriptPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case LinkerScriptPackage.LINKER_SCRIPT:
      {
        LinkerScript linkerScript = (LinkerScript)theEObject;
        T result = caseLinkerScript(linkerScript);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LINKER_SCRIPT_STATEMENT:
      {
        LinkerScriptStatement linkerScriptStatement = (LinkerScriptStatement)theEObject;
        T result = caseLinkerScriptStatement(linkerScriptStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = caseLinkerScriptStatement(statement);
        if (result == null) result = caseOutputSectionCommand(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.FILE_LIST:
      {
        FileList fileList = (FileList)theEObject;
        T result = caseFileList(fileList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.FILE_LIST_NAME:
      {
        FileListName fileListName = (FileListName)theEObject;
        T result = caseFileListName(fileListName);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.PHDRS_COMMAND:
      {
        PhdrsCommand phdrsCommand = (PhdrsCommand)theEObject;
        T result = casePhdrsCommand(phdrsCommand);
        if (result == null) result = caseLinkerScriptStatement(phdrsCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.PHDR:
      {
        Phdr phdr = (Phdr)theEObject;
        T result = casePhdr(phdr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.SECTIONS_COMMAND:
      {
        SectionsCommand sectionsCommand = (SectionsCommand)theEObject;
        T result = caseSectionsCommand(sectionsCommand);
        if (result == null) result = caseLinkerScriptStatement(sectionsCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_COMMAND:
      {
        OutputSectionCommand outputSectionCommand = (OutputSectionCommand)theEObject;
        T result = caseOutputSectionCommand(outputSectionCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION:
      {
        OutputSection outputSection = (OutputSection)theEObject;
        T result = caseOutputSection(outputSection);
        if (result == null) result = caseOutputSectionCommand(outputSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_ALIGN:
      {
        OutputSectionAlign outputSectionAlign = (OutputSectionAlign)theEObject;
        T result = caseOutputSectionAlign(outputSectionAlign);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_CONSTRAINT:
      {
        OutputSectionConstraint outputSectionConstraint = (OutputSectionConstraint)theEObject;
        T result = caseOutputSectionConstraint(outputSectionConstraint);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE:
      {
        OutputSectionType outputSectionType = (OutputSectionType)theEObject;
        T result = caseOutputSectionType(outputSectionType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.INPUT_SECTION:
      {
        InputSection inputSection = (InputSection)theEObject;
        T result = caseInputSection(inputSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.WILDCARD:
      {
        Wildcard wildcard = (Wildcard)theEObject;
        T result = caseWildcard(wildcard);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.MEMORY_COMMAND:
      {
        MemoryCommand memoryCommand = (MemoryCommand)theEObject;
        T result = caseMemoryCommand(memoryCommand);
        if (result == null) result = caseLinkerScriptStatement(memoryCommand);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.MEMORY:
      {
        Memory memory = (Memory)theEObject;
        T result = caseMemory(memory);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LEXPRESSION:
      {
        LExpression lExpression = (LExpression)theEObject;
        T result = caseLExpression(lExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_ASSIGNMENT:
      {
        StatementAssignment statementAssignment = (StatementAssignment)theEObject;
        T result = caseStatementAssignment(statementAssignment);
        if (result == null) result = caseStatement(statementAssignment);
        if (result == null) result = caseLinkerScriptStatement(statementAssignment);
        if (result == null) result = caseOutputSectionCommand(statementAssignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_STARTUP:
      {
        StatementStartup statementStartup = (StatementStartup)theEObject;
        T result = caseStatementStartup(statementStartup);
        if (result == null) result = caseStatement(statementStartup);
        if (result == null) result = caseLinkerScriptStatement(statementStartup);
        if (result == null) result = caseOutputSectionCommand(statementStartup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_ENTRY:
      {
        StatementEntry statementEntry = (StatementEntry)theEObject;
        T result = caseStatementEntry(statementEntry);
        if (result == null) result = caseStatement(statementEntry);
        if (result == null) result = caseLinkerScriptStatement(statementEntry);
        if (result == null) result = caseOutputSectionCommand(statementEntry);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_ASSERT:
      {
        StatementAssert statementAssert = (StatementAssert)theEObject;
        T result = caseStatementAssert(statementAssert);
        if (result == null) result = caseStatement(statementAssert);
        if (result == null) result = caseLinkerScriptStatement(statementAssert);
        if (result == null) result = caseOutputSectionCommand(statementAssert);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_TARGET:
      {
        StatementTarget statementTarget = (StatementTarget)theEObject;
        T result = caseStatementTarget(statementTarget);
        if (result == null) result = caseStatement(statementTarget);
        if (result == null) result = caseLinkerScriptStatement(statementTarget);
        if (result == null) result = caseOutputSectionCommand(statementTarget);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_SEARCH_DIR:
      {
        StatementSearchDir statementSearchDir = (StatementSearchDir)theEObject;
        T result = caseStatementSearchDir(statementSearchDir);
        if (result == null) result = caseStatement(statementSearchDir);
        if (result == null) result = caseLinkerScriptStatement(statementSearchDir);
        if (result == null) result = caseOutputSectionCommand(statementSearchDir);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_OUTPUT:
      {
        StatementOutput statementOutput = (StatementOutput)theEObject;
        T result = caseStatementOutput(statementOutput);
        if (result == null) result = caseStatement(statementOutput);
        if (result == null) result = caseLinkerScriptStatement(statementOutput);
        if (result == null) result = caseOutputSectionCommand(statementOutput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_OUTPUT_FORMAT:
      {
        StatementOutputFormat statementOutputFormat = (StatementOutputFormat)theEObject;
        T result = caseStatementOutputFormat(statementOutputFormat);
        if (result == null) result = caseStatement(statementOutputFormat);
        if (result == null) result = caseLinkerScriptStatement(statementOutputFormat);
        if (result == null) result = caseOutputSectionCommand(statementOutputFormat);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_OUTPUT_ARCH:
      {
        StatementOutputArch statementOutputArch = (StatementOutputArch)theEObject;
        T result = caseStatementOutputArch(statementOutputArch);
        if (result == null) result = caseStatement(statementOutputArch);
        if (result == null) result = caseLinkerScriptStatement(statementOutputArch);
        if (result == null) result = caseOutputSectionCommand(statementOutputArch);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_FORCE_COMMON_ALLOCATION:
      {
        StatementForceCommonAllocation statementForceCommonAllocation = (StatementForceCommonAllocation)theEObject;
        T result = caseStatementForceCommonAllocation(statementForceCommonAllocation);
        if (result == null) result = caseStatement(statementForceCommonAllocation);
        if (result == null) result = caseLinkerScriptStatement(statementForceCommonAllocation);
        if (result == null) result = caseOutputSectionCommand(statementForceCommonAllocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_INHIBIT_COMMON_ALLOCATION:
      {
        StatementInhibitCommonAllocation statementInhibitCommonAllocation = (StatementInhibitCommonAllocation)theEObject;
        T result = caseStatementInhibitCommonAllocation(statementInhibitCommonAllocation);
        if (result == null) result = caseStatement(statementInhibitCommonAllocation);
        if (result == null) result = caseLinkerScriptStatement(statementInhibitCommonAllocation);
        if (result == null) result = caseOutputSectionCommand(statementInhibitCommonAllocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_INPUT:
      {
        StatementInput statementInput = (StatementInput)theEObject;
        T result = caseStatementInput(statementInput);
        if (result == null) result = caseStatement(statementInput);
        if (result == null) result = caseLinkerScriptStatement(statementInput);
        if (result == null) result = caseOutputSectionCommand(statementInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_GROUP:
      {
        StatementGroup statementGroup = (StatementGroup)theEObject;
        T result = caseStatementGroup(statementGroup);
        if (result == null) result = caseStatement(statementGroup);
        if (result == null) result = caseLinkerScriptStatement(statementGroup);
        if (result == null) result = caseOutputSectionCommand(statementGroup);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_MAP:
      {
        StatementMap statementMap = (StatementMap)theEObject;
        T result = caseStatementMap(statementMap);
        if (result == null) result = caseStatement(statementMap);
        if (result == null) result = caseLinkerScriptStatement(statementMap);
        if (result == null) result = caseOutputSectionCommand(statementMap);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_NO_CROSS_REFS:
      {
        StatementNoCrossRefs statementNoCrossRefs = (StatementNoCrossRefs)theEObject;
        T result = caseStatementNoCrossRefs(statementNoCrossRefs);
        if (result == null) result = caseStatement(statementNoCrossRefs);
        if (result == null) result = caseLinkerScriptStatement(statementNoCrossRefs);
        if (result == null) result = caseOutputSectionCommand(statementNoCrossRefs);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_NO_CROSS_REFS_TO:
      {
        StatementNoCrossRefsTo statementNoCrossRefsTo = (StatementNoCrossRefsTo)theEObject;
        T result = caseStatementNoCrossRefsTo(statementNoCrossRefsTo);
        if (result == null) result = caseStatement(statementNoCrossRefsTo);
        if (result == null) result = caseLinkerScriptStatement(statementNoCrossRefsTo);
        if (result == null) result = caseOutputSectionCommand(statementNoCrossRefsTo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_EXTERN:
      {
        StatementExtern statementExtern = (StatementExtern)theEObject;
        T result = caseStatementExtern(statementExtern);
        if (result == null) result = caseStatement(statementExtern);
        if (result == null) result = caseLinkerScriptStatement(statementExtern);
        if (result == null) result = caseOutputSectionCommand(statementExtern);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_INCLUDE:
      {
        StatementInclude statementInclude = (StatementInclude)theEObject;
        T result = caseStatementInclude(statementInclude);
        if (result == null) result = caseStatement(statementInclude);
        if (result == null) result = caseLinkerScriptStatement(statementInclude);
        if (result == null) result = caseOutputSectionCommand(statementInclude);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_NOP:
      {
        StatementNop statementNop = (StatementNop)theEObject;
        T result = caseStatementNop(statementNop);
        if (result == null) result = caseStatement(statementNop);
        if (result == null) result = caseLinkerScriptStatement(statementNop);
        if (result == null) result = caseOutputSectionCommand(statementNop);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_ALIGN_EXPRESSION:
      {
        OutputSectionAlignExpression outputSectionAlignExpression = (OutputSectionAlignExpression)theEObject;
        T result = caseOutputSectionAlignExpression(outputSectionAlignExpression);
        if (result == null) result = caseOutputSectionAlign(outputSectionAlignExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_ALIGN_WITH_INPUT:
      {
        OutputSectionAlignWithInput outputSectionAlignWithInput = (OutputSectionAlignWithInput)theEObject;
        T result = caseOutputSectionAlignWithInput(outputSectionAlignWithInput);
        if (result == null) result = caseOutputSectionAlign(outputSectionAlignWithInput);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_CONSTRAINT_ONLY_IF_RO:
      {
        OutputSectionConstraintOnlyIfRO outputSectionConstraintOnlyIfRO = (OutputSectionConstraintOnlyIfRO)theEObject;
        T result = caseOutputSectionConstraintOnlyIfRO(outputSectionConstraintOnlyIfRO);
        if (result == null) result = caseOutputSectionConstraint(outputSectionConstraintOnlyIfRO);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_CONSTRAINT_ONLY_IF_RW:
      {
        OutputSectionConstraintOnlyIfRW outputSectionConstraintOnlyIfRW = (OutputSectionConstraintOnlyIfRW)theEObject;
        T result = caseOutputSectionConstraintOnlyIfRW(outputSectionConstraintOnlyIfRW);
        if (result == null) result = caseOutputSectionConstraint(outputSectionConstraintOnlyIfRW);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_CONSTRAINT_SPECIAL:
      {
        OutputSectionConstraintSpecial outputSectionConstraintSpecial = (OutputSectionConstraintSpecial)theEObject;
        T result = caseOutputSectionConstraintSpecial(outputSectionConstraintSpecial);
        if (result == null) result = caseOutputSectionConstraint(outputSectionConstraintSpecial);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_NO_LOAD:
      {
        OutputSectionTypeNoLoad outputSectionTypeNoLoad = (OutputSectionTypeNoLoad)theEObject;
        T result = caseOutputSectionTypeNoLoad(outputSectionTypeNoLoad);
        if (result == null) result = caseOutputSectionType(outputSectionTypeNoLoad);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_DSECT:
      {
        OutputSectionTypeDSect outputSectionTypeDSect = (OutputSectionTypeDSect)theEObject;
        T result = caseOutputSectionTypeDSect(outputSectionTypeDSect);
        if (result == null) result = caseOutputSectionType(outputSectionTypeDSect);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_COPY:
      {
        OutputSectionTypeCopy outputSectionTypeCopy = (OutputSectionTypeCopy)theEObject;
        T result = caseOutputSectionTypeCopy(outputSectionTypeCopy);
        if (result == null) result = caseOutputSectionType(outputSectionTypeCopy);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_INFO:
      {
        OutputSectionTypeInfo outputSectionTypeInfo = (OutputSectionTypeInfo)theEObject;
        T result = caseOutputSectionTypeInfo(outputSectionTypeInfo);
        if (result == null) result = caseOutputSectionType(outputSectionTypeInfo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.OUTPUT_SECTION_TYPE_OVERLAY:
      {
        OutputSectionTypeOverlay outputSectionTypeOverlay = (OutputSectionTypeOverlay)theEObject;
        T result = caseOutputSectionTypeOverlay(outputSectionTypeOverlay);
        if (result == null) result = caseOutputSectionType(outputSectionTypeOverlay);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_CREATE_OBJECT_SYMBOLS:
      {
        StatementCreateObjectSymbols statementCreateObjectSymbols = (StatementCreateObjectSymbols)theEObject;
        T result = caseStatementCreateObjectSymbols(statementCreateObjectSymbols);
        if (result == null) result = caseStatement(statementCreateObjectSymbols);
        if (result == null) result = caseLinkerScriptStatement(statementCreateObjectSymbols);
        if (result == null) result = caseOutputSectionCommand(statementCreateObjectSymbols);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_CONSTRUCTORS:
      {
        StatementConstructors statementConstructors = (StatementConstructors)theEObject;
        T result = caseStatementConstructors(statementConstructors);
        if (result == null) result = caseStatement(statementConstructors);
        if (result == null) result = caseLinkerScriptStatement(statementConstructors);
        if (result == null) result = caseOutputSectionCommand(statementConstructors);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_CONSTRUCTORS_SORTED:
      {
        StatementConstructorsSorted statementConstructorsSorted = (StatementConstructorsSorted)theEObject;
        T result = caseStatementConstructorsSorted(statementConstructorsSorted);
        if (result == null) result = caseStatement(statementConstructorsSorted);
        if (result == null) result = caseLinkerScriptStatement(statementConstructorsSorted);
        if (result == null) result = caseOutputSectionCommand(statementConstructorsSorted);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_DATA:
      {
        StatementData statementData = (StatementData)theEObject;
        T result = caseStatementData(statementData);
        if (result == null) result = caseStatement(statementData);
        if (result == null) result = caseLinkerScriptStatement(statementData);
        if (result == null) result = caseOutputSectionCommand(statementData);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_FILL:
      {
        StatementFill statementFill = (StatementFill)theEObject;
        T result = caseStatementFill(statementFill);
        if (result == null) result = caseStatement(statementFill);
        if (result == null) result = caseLinkerScriptStatement(statementFill);
        if (result == null) result = caseOutputSectionCommand(statementFill);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.STATEMENT_INPUT_SECTION:
      {
        StatementInputSection statementInputSection = (StatementInputSection)theEObject;
        T result = caseStatementInputSection(statementInputSection);
        if (result == null) result = caseStatement(statementInputSection);
        if (result == null) result = caseLinkerScriptStatement(statementInputSection);
        if (result == null) result = caseOutputSectionCommand(statementInputSection);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.ASSIGNMENT_HIDDEN:
      {
        AssignmentHidden assignmentHidden = (AssignmentHidden)theEObject;
        T result = caseAssignmentHidden(assignmentHidden);
        if (result == null) result = caseAssignment(assignmentHidden);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.ASSIGNMENT_PROVIDE:
      {
        AssignmentProvide assignmentProvide = (AssignmentProvide)theEObject;
        T result = caseAssignmentProvide(assignmentProvide);
        if (result == null) result = caseAssignment(assignmentProvide);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.ASSIGNMENT_PROVIDE_HIDDEN:
      {
        AssignmentProvideHidden assignmentProvideHidden = (AssignmentProvideHidden)theEObject;
        T result = caseAssignmentProvideHidden(assignmentProvideHidden);
        if (result == null) result = caseAssignment(assignmentProvideHidden);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.INPUT_SECTION_FILE:
      {
        InputSectionFile inputSectionFile = (InputSectionFile)theEObject;
        T result = caseInputSectionFile(inputSectionFile);
        if (result == null) result = caseInputSection(inputSectionFile);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.INPUT_SECTION_WILD:
      {
        InputSectionWild inputSectionWild = (InputSectionWild)theEObject;
        T result = caseInputSectionWild(inputSectionWild);
        if (result == null) result = caseInputSection(inputSectionWild);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LTERNARY_OPERATION:
      {
        LTernaryOperation lTernaryOperation = (LTernaryOperation)theEObject;
        T result = caseLTernaryOperation(lTernaryOperation);
        if (result == null) result = caseLExpression(lTernaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LBINARY_OPERATION:
      {
        LBinaryOperation lBinaryOperation = (LBinaryOperation)theEObject;
        T result = caseLBinaryOperation(lBinaryOperation);
        if (result == null) result = caseLExpression(lBinaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LUNARY_OPERATION:
      {
        LUnaryOperation lUnaryOperation = (LUnaryOperation)theEObject;
        T result = caseLUnaryOperation(lUnaryOperation);
        if (result == null) result = caseLExpression(lUnaryOperation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LVARIABLE:
      {
        LVariable lVariable = (LVariable)theEObject;
        T result = caseLVariable(lVariable);
        if (result == null) result = caseLExpression(lVariable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LPARENTHESIZED_EXPRESSION:
      {
        LParenthesizedExpression lParenthesizedExpression = (LParenthesizedExpression)theEObject;
        T result = caseLParenthesizedExpression(lParenthesizedExpression);
        if (result == null) result = caseLExpression(lParenthesizedExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LENGTH_CALL:
      {
        LengthCall lengthCall = (LengthCall)theEObject;
        T result = caseLengthCall(lengthCall);
        if (result == null) result = caseLExpression(lengthCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.ORIGIN_CALL:
      {
        OriginCall originCall = (OriginCall)theEObject;
        T result = caseOriginCall(originCall);
        if (result == null) result = caseLExpression(originCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.ALIGN_CALL:
      {
        AlignCall alignCall = (AlignCall)theEObject;
        T result = caseAlignCall(alignCall);
        if (result == null) result = caseLExpression(alignCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.SIZEOF_CALL:
      {
        SizeofCall sizeofCall = (SizeofCall)theEObject;
        T result = caseSizeofCall(sizeofCall);
        if (result == null) result = caseLExpression(sizeofCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.AT_CALL:
      {
        AtCall atCall = (AtCall)theEObject;
        T result = caseAtCall(atCall);
        if (result == null) result = caseLExpression(atCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LFEATURE_CALL:
      {
        LFeatureCall lFeatureCall = (LFeatureCall)theEObject;
        T result = caseLFeatureCall(lFeatureCall);
        if (result == null) result = caseLExpression(lFeatureCall);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case LinkerScriptPackage.LNUMBER_LITERAL:
      {
        LNumberLiteral lNumberLiteral = (LNumberLiteral)theEObject;
        T result = caseLNumberLiteral(lNumberLiteral);
        if (result == null) result = caseLExpression(lNumberLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Linker Script</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Linker Script</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLinkerScript(LinkerScript object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLinkerScriptStatement(LinkerScriptStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFileList(FileList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>File List Name</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>File List Name</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFileListName(FileListName object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Phdrs Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Phdrs Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhdrsCommand(PhdrsCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Phdr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Phdr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePhdr(Phdr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sections Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sections Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSectionsCommand(SectionsCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionCommand(OutputSectionCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSection(OutputSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Align</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Align</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionAlign(OutputSectionAlign object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Constraint</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Constraint</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionConstraint(OutputSectionConstraint object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionType(OutputSectionType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputSection(InputSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Wildcard</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Wildcard</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWildcard(Wildcard object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memory Command</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memory Command</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemoryCommand(MemoryCommand object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Memory</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Memory</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMemory(Memory object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LExpression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LExpression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLExpression(LExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementAssignment(StatementAssignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Startup</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Startup</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementStartup(StatementStartup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Entry</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Entry</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementEntry(StatementEntry object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Assert</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Assert</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementAssert(StatementAssert object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Target</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Target</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementTarget(StatementTarget object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Search Dir</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Search Dir</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementSearchDir(StatementSearchDir object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Output</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Output</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementOutput(StatementOutput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Output Format</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Output Format</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementOutputFormat(StatementOutputFormat object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Output Arch</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Output Arch</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementOutputArch(StatementOutputArch object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Force Common Allocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Force Common Allocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementForceCommonAllocation(StatementForceCommonAllocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Inhibit Common Allocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Inhibit Common Allocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementInhibitCommonAllocation(StatementInhibitCommonAllocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementInput(StatementInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Group</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Group</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementGroup(StatementGroup object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Map</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Map</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementMap(StatementMap object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement No Cross Refs</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement No Cross Refs</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementNoCrossRefs(StatementNoCrossRefs object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement No Cross Refs To</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement No Cross Refs To</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementNoCrossRefsTo(StatementNoCrossRefsTo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Extern</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Extern</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementExtern(StatementExtern object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Include</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Include</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementInclude(StatementInclude object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Nop</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Nop</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementNop(StatementNop object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Align Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Align Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionAlignExpression(OutputSectionAlignExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Align With Input</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Align With Input</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionAlignWithInput(OutputSectionAlignWithInput object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Constraint Only If RO</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Constraint Only If RO</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionConstraintOnlyIfRO(OutputSectionConstraintOnlyIfRO object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Constraint Only If RW</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Constraint Only If RW</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionConstraintOnlyIfRW(OutputSectionConstraintOnlyIfRW object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Constraint Special</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Constraint Special</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionConstraintSpecial(OutputSectionConstraintSpecial object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Type No Load</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Type No Load</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionTypeNoLoad(OutputSectionTypeNoLoad object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Type DSect</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Type DSect</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionTypeDSect(OutputSectionTypeDSect object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Type Copy</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Type Copy</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionTypeCopy(OutputSectionTypeCopy object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Type Info</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Type Info</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionTypeInfo(OutputSectionTypeInfo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Output Section Type Overlay</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Output Section Type Overlay</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOutputSectionTypeOverlay(OutputSectionTypeOverlay object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Create Object Symbols</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Create Object Symbols</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementCreateObjectSymbols(StatementCreateObjectSymbols object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Constructors</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Constructors</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementConstructors(StatementConstructors object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Constructors Sorted</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Constructors Sorted</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementConstructorsSorted(StatementConstructorsSorted object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Data</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Data</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementData(StatementData object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Fill</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Fill</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementFill(StatementFill object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement Input Section</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement Input Section</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatementInputSection(StatementInputSection object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment Hidden</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment Hidden</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignmentHidden(AssignmentHidden object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment Provide</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment Provide</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignmentProvide(AssignmentProvide object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment Provide Hidden</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment Provide Hidden</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignmentProvideHidden(AssignmentProvideHidden object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Section File</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Section File</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputSectionFile(InputSectionFile object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Input Section Wild</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Input Section Wild</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInputSectionWild(InputSectionWild object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LTernary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LTernary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLTernaryOperation(LTernaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LBinary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LBinary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLBinaryOperation(LBinaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LUnary Operation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LUnary Operation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLUnaryOperation(LUnaryOperation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LVariable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LVariable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLVariable(LVariable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LParenthesized Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LParenthesized Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLParenthesizedExpression(LParenthesizedExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Length Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Length Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLengthCall(LengthCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Origin Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Origin Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOriginCall(OriginCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Align Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Align Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAlignCall(AlignCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sizeof Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sizeof Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSizeofCall(SizeofCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>At Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>At Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtCall(AtCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LFeature Call</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LFeature Call</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLFeatureCall(LFeatureCall object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>LNumber Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>LNumber Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLNumberLiteral(LNumberLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //LinkerScriptSwitch

/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.cdt.linkerscript.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.cdt.linkerscript.services.LinkerScriptGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LinkerScriptSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LinkerScriptGrammarAccess grammarAccess;
	protected AbstractElementAlias match_InputSection_CommaKeyword_1_5_0_q;
	protected AbstractElementAlias match_InputSection_CommaKeyword_3_7_0_q;
	protected AbstractElementAlias match_LParenthesizedExpression_LeftParenthesisKeyword_0_a;
	protected AbstractElementAlias match_LParenthesizedExpression_LeftParenthesisKeyword_0_p;
	protected AbstractElementAlias match_Memory_LENGTHKeyword_7_0_or_LKeyword_7_2_or_LenKeyword_7_1;
	protected AbstractElementAlias match_Memory_OKeyword_3_2_or_ORIGINKeyword_3_0_or_OrgKeyword_3_1;
	protected AbstractElementAlias match_OutputSection_CommaKeyword_15_q;
	protected AbstractElementAlias match_Statement_CommaKeyword_0_2_0_or_SemicolonKeyword_0_2_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LinkerScriptGrammarAccess) access;
		match_InputSection_CommaKeyword_1_5_0_q = new TokenAlias(false, true, grammarAccess.getInputSectionAccess().getCommaKeyword_1_5_0());
		match_InputSection_CommaKeyword_3_7_0_q = new TokenAlias(false, true, grammarAccess.getInputSectionAccess().getCommaKeyword_3_7_0());
		match_LParenthesizedExpression_LeftParenthesisKeyword_0_a = new TokenAlias(true, true, grammarAccess.getLParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_LParenthesizedExpression_LeftParenthesisKeyword_0_p = new TokenAlias(true, false, grammarAccess.getLParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
		match_Memory_LENGTHKeyword_7_0_or_LKeyword_7_2_or_LenKeyword_7_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMemoryAccess().getLENGTHKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getMemoryAccess().getLKeyword_7_2()), new TokenAlias(false, false, grammarAccess.getMemoryAccess().getLenKeyword_7_1()));
		match_Memory_OKeyword_3_2_or_ORIGINKeyword_3_0_or_OrgKeyword_3_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getMemoryAccess().getOKeyword_3_2()), new TokenAlias(false, false, grammarAccess.getMemoryAccess().getORIGINKeyword_3_0()), new TokenAlias(false, false, grammarAccess.getMemoryAccess().getOrgKeyword_3_1()));
		match_OutputSection_CommaKeyword_15_q = new TokenAlias(false, true, grammarAccess.getOutputSectionAccess().getCommaKeyword_15());
		match_Statement_CommaKeyword_0_2_0_or_SemicolonKeyword_0_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getCommaKeyword_0_2_0()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_0_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSORT_BY_NAMERule())
			return getSORT_BY_NAMEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * SORT_BY_NAME:
	 * 	'SORT' | 'SORT_BY_NAME';
	 */
	protected String getSORT_BY_NAMEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "SORT";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_InputSection_CommaKeyword_1_5_0_q.equals(syntax))
				emit_InputSection_CommaKeyword_1_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_InputSection_CommaKeyword_3_7_0_q.equals(syntax))
				emit_InputSection_CommaKeyword_3_7_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LParenthesizedExpression_LeftParenthesisKeyword_0_a.equals(syntax))
				emit_LParenthesizedExpression_LeftParenthesisKeyword_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LParenthesizedExpression_LeftParenthesisKeyword_0_p.equals(syntax))
				emit_LParenthesizedExpression_LeftParenthesisKeyword_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Memory_LENGTHKeyword_7_0_or_LKeyword_7_2_or_LenKeyword_7_1.equals(syntax))
				emit_Memory_LENGTHKeyword_7_0_or_LKeyword_7_2_or_LenKeyword_7_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Memory_OKeyword_3_2_or_ORIGINKeyword_3_0_or_OrgKeyword_3_1.equals(syntax))
				emit_Memory_OKeyword_3_2_or_ORIGINKeyword_3_0_or_OrgKeyword_3_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_OutputSection_CommaKeyword_15_q.equals(syntax))
				emit_OutputSection_CommaKeyword_15_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Statement_CommaKeyword_0_2_0_or_SemicolonKeyword_0_2_1.equals(syntax))
				emit_Statement_CommaKeyword_0_2_0_or_SemicolonKeyword_0_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     sections+=WildcardRule (ambiguity) sections+=WildcardRule
	 */
	protected void emit_InputSection_CommaKeyword_1_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     sections+=WildcardRule (ambiguity) sections+=WildcardRule
	 */
	protected void emit_InputSection_CommaKeyword_3_7_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'ALIGN' '(' expOrAlign=LExpression
	 *     (rule start) (ambiguity) 'LENGTH' '(' memory=ValidID
	 *     (rule start) (ambiguity) feature=OpUnary
	 *     (rule start) (ambiguity) feature=ValidID
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) {LBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {LPostfixOperation.operand=}
	 */
	protected void emit_LParenthesizedExpression_LeftParenthesisKeyword_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'ALIGN' '(' expOrAlign=LExpression
	 *     (rule start) (ambiguity) 'LENGTH' '(' memory=ValidID
	 *     (rule start) (ambiguity) feature=OpUnary
	 *     (rule start) (ambiguity) feature=ValidID
	 *     (rule start) (ambiguity) value=Number
	 *     (rule start) (ambiguity) {LBinaryOperation.leftOperand=}
	 *     (rule start) (ambiguity) {LPostfixOperation.operand=}
	 */
	protected void emit_LParenthesizedExpression_LeftParenthesisKeyword_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'LENGTH' | 'len' | 'l'
	 *
	 * This ambiguous syntax occurs at:
	 *     origin=LExpression ',' (ambiguity) '=' length=LExpression
	 */
	protected void emit_Memory_LENGTHKeyword_7_0_or_LKeyword_7_2_or_LenKeyword_7_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'ORIGIN' | 'org' | 'o'
	 *
	 * This ambiguous syntax occurs at:
	 *     attr=MemoryAttribute ':' (ambiguity) '=' origin=LExpression
	 *     name=MemoryName ':' (ambiguity) '=' origin=LExpression
	 */
	protected void emit_Memory_OKeyword_3_2_or_ORIGINKeyword_3_0_or_OrgKeyword_3_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     address=LExpression ':' '{' '}' (ambiguity) (rule end)
	 *     align=OutputSectionAlign '{' '}' (ambiguity) (rule end)
	 *     at=LExpression ')' '{' '}' (ambiguity) (rule end)
	 *     atMemory=ValidID (ambiguity) (rule end)
	 *     constraint=OutputSectionConstraint '{' '}' (ambiguity) (rule end)
	 *     fill=LExpression (ambiguity) (rule end)
	 *     memory=ValidID (ambiguity) (rule end)
	 *     name=ValidID ':' '{' '}' (ambiguity) (rule end)
	 *     phdrs+=ValidID (ambiguity) (rule end)
	 *     statements+=Statement '}' (ambiguity) (rule end)
	 *     subAlign=LExpression ')' '{' '}' (ambiguity) (rule end)
	 *     type=OutputSectionType ')' ':' '{' '}' (ambiguity) (rule end)
	 */
	protected void emit_OutputSection_CommaKeyword_15_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ',' | ';'
	 *
	 * This ambiguous syntax occurs at:
	 *     assignment=AssignmentRule (ambiguity) (rule end)
	 */
	protected void emit_Statement_CommaKeyword_0_2_0_or_SemicolonKeyword_0_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

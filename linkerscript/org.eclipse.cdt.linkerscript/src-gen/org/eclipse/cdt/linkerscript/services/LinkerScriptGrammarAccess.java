/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.cdt.linkerscript.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LinkerScriptGrammarAccess extends AbstractGrammarElementFinder {
	
	public class LinkerScriptElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LinkerScript");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsLinkerScriptStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		/// *
		// * Big TOOD list:
		// * Semantic highlight of keywords used as ID: https://blogs.itemis.com/en/xtext-hint-identifiers-conflicting-with-keywords
		// * INCLUDE does not actually parse nested INPUT, but ctrl-click on INCLUDE file would be nice
		// *
		// * Multi-page editor things:
		// *
		// * - Layout of memories needs revisiting - it does not grow properly,
		// *   or is too small, sometimes if table control too big no vertical
		// *   scroll bar on form page
		// * - Layout of memories does not fill width of editor
		// * - Need test for changing the file outside of the editor while
		// *   editor is open and separate test for when dirty
		// * - Icon on each row of memory view
		// * - Check selecting multiple rows UX
		// *
		// * Serializer:
		// *
		// * - The serializer can omit whitespace sometimes. For example you can get:
		// *    MEMORY { RAM : ORIGIN = 0, LENGTH = 0ROM : ORIGIN 1, LENGTH = 1 }
		// *   in the output
		// * / LinkerScript:
		//	statements+=LinkerScriptStatement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=LinkerScriptStatement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//LinkerScriptStatement
		public RuleCall getStatementsLinkerScriptStatementParserRuleCall_0() { return cStatementsLinkerScriptStatementParserRuleCall_0; }
	}
	public class LinkerScriptStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LinkerScriptStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMemoryCommandParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSectionsCommandParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPhdrsCommandParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStatementCommandParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		/// **
		//	 * TODO: Handle VERSION statements,
		// * XXX: There is some legacy stuff that GNU ld supports in the language, but actually
		// * ignores, sometimes silently, sometimes with a warning. We simply don't support those statements. (e.g. HLL, SYSLIB, FLOAT, NOFLOAT,
		// * / LinkerScriptStatement:
		//	MemoryCommand
		//	| SectionsCommand
		//	| PhdrsCommand
		//	| StatementCommand;
		@Override public ParserRule getRule() { return rule; }
		
		//MemoryCommand | SectionsCommand | PhdrsCommand | StatementCommand
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MemoryCommand
		public RuleCall getMemoryCommandParserRuleCall_0() { return cMemoryCommandParserRuleCall_0; }
		
		//SectionsCommand
		public RuleCall getSectionsCommandParserRuleCall_1() { return cSectionsCommandParserRuleCall_1; }
		
		//PhdrsCommand
		public RuleCall getPhdrsCommandParserRuleCall_2() { return cPhdrsCommandParserRuleCall_2; }
		
		//StatementCommand
		public RuleCall getStatementCommandParserRuleCall_3() { return cStatementCommandParserRuleCall_3; }
	}
	public class StatementCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.StatementCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAssignmentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAssignmentAssignmentRuleParserRuleCall_0_1_0 = (RuleCall)cAssignmentAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2_1 = (Keyword)cAlternatives_0_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStatementStartupAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSTARTUPKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameWildIDParserRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStatementEntryAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cENTRYKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_2_3_0 = (RuleCall)cNameAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStatementAssertAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cASSERTKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cExpAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cExpLExpressionParserRuleCall_3_3_0 = (RuleCall)cExpAssignment_3_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cMessageAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cMessageValidIDParserRuleCall_3_5_0 = (RuleCall)cMessageAssignment_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cStatementTargetAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cTARGETKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cNameAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_4_3_0 = (RuleCall)cNameAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cStatementSearchDirAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cSEARCH_DIRKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cNameAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_5_3_0 = (RuleCall)cNameAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStatementOutputAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cOUTPUTKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cNameAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_6_3_0 = (RuleCall)cNameAssignment_6_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cStatementOutputFormatAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cOUTPUT_FORMATKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Assignment cNameAssignment_7_3 = (Assignment)cGroup_7.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_7_3_0 = (RuleCall)cNameAssignment_7_3.eContents().get(0);
		private final Group cGroup_7_4 = (Group)cGroup_7.eContents().get(4);
		private final Keyword cCommaKeyword_7_4_0 = (Keyword)cGroup_7_4.eContents().get(0);
		private final Assignment cBigAssignment_7_4_1 = (Assignment)cGroup_7_4.eContents().get(1);
		private final RuleCall cBigValidIDParserRuleCall_7_4_1_0 = (RuleCall)cBigAssignment_7_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_7_4_2 = (Keyword)cGroup_7_4.eContents().get(2);
		private final Assignment cLittleAssignment_7_4_3 = (Assignment)cGroup_7_4.eContents().get(3);
		private final RuleCall cLittleValidIDParserRuleCall_7_4_3_0 = (RuleCall)cLittleAssignment_7_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_5 = (Keyword)cGroup_7.eContents().get(5);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cStatementOutputArchAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cOUTPUT_ARCHKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Assignment cNameAssignment_8_3 = (Assignment)cGroup_8.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_8_3_0 = (RuleCall)cNameAssignment_8_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cStatementForceCommonAllocationAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cFORCE_COMMON_ALLOCATIONKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cStatementInhibitCommonAllocationAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cINHIBIT_COMMON_ALLOCATIONKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cStatementInputAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Keyword cINPUTKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_11_2 = (Keyword)cGroup_11.eContents().get(2);
		private final Assignment cListAssignment_11_3 = (Assignment)cGroup_11.eContents().get(3);
		private final RuleCall cListFileListParserRuleCall_11_3_0 = (RuleCall)cListAssignment_11_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_4 = (Keyword)cGroup_11.eContents().get(4);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cStatementGroupAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Keyword cGROUPKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_12_2 = (Keyword)cGroup_12.eContents().get(2);
		private final Assignment cFilesAssignment_12_3 = (Assignment)cGroup_12.eContents().get(3);
		private final RuleCall cFilesFileListNameParserRuleCall_12_3_0 = (RuleCall)cFilesAssignment_12_3.eContents().get(0);
		private final Group cGroup_12_4 = (Group)cGroup_12.eContents().get(4);
		private final Keyword cCommaKeyword_12_4_0 = (Keyword)cGroup_12_4.eContents().get(0);
		private final Assignment cFilesAssignment_12_4_1 = (Assignment)cGroup_12_4.eContents().get(1);
		private final RuleCall cFilesFileListNameParserRuleCall_12_4_1_0 = (RuleCall)cFilesAssignment_12_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_5 = (Keyword)cGroup_12.eContents().get(5);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cStatementMapAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Keyword cMAPKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_13_2 = (Keyword)cGroup_13.eContents().get(2);
		private final Assignment cNameAssignment_13_3 = (Assignment)cGroup_13.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_13_3_0 = (RuleCall)cNameAssignment_13_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_4 = (Keyword)cGroup_13.eContents().get(4);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cStatementNoCrossRefsAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Keyword cNOCROSSREFSKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_14_2 = (Keyword)cGroup_14.eContents().get(2);
		private final Assignment cSectionsAssignment_14_3 = (Assignment)cGroup_14.eContents().get(3);
		private final RuleCall cSectionsValidIDParserRuleCall_14_3_0 = (RuleCall)cSectionsAssignment_14_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_4 = (Keyword)cGroup_14.eContents().get(4);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cStatementNoCrossRefsToAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cNOCROSSREFS_TOKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_15_2 = (Keyword)cGroup_15.eContents().get(2);
		private final Assignment cSectionsAssignment_15_3 = (Assignment)cGroup_15.eContents().get(3);
		private final RuleCall cSectionsValidIDParserRuleCall_15_3_0 = (RuleCall)cSectionsAssignment_15_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_4 = (Keyword)cGroup_15.eContents().get(4);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Action cStatementExternAction_16_0 = (Action)cGroup_16.eContents().get(0);
		private final Keyword cEXTERNKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_16_2 = (Keyword)cGroup_16.eContents().get(2);
		private final Assignment cSectionsAssignment_16_3 = (Assignment)cGroup_16.eContents().get(3);
		private final RuleCall cSectionsValidIDParserRuleCall_16_3_0 = (RuleCall)cSectionsAssignment_16_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16_4 = (Keyword)cGroup_16.eContents().get(4);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Action cStatementIncludeAction_17_0 = (Action)cGroup_17.eContents().get(0);
		private final Keyword cINCLUDEKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Assignment cNameAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_17_2_0 = (RuleCall)cNameAssignment_17_2.eContents().get(0);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Action cStatementNopAction_18_0 = (Action)cGroup_18.eContents().get(0);
		private final Keyword cSemicolonKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		
		//StatementCommand Statement:
		//	{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementStartup} 'STARTUP' '(' name=WildID ')'
		//	| {StatementEntry} 'ENTRY' '(' name=ValidID ')'
		//	| {StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
		//	| {StatementTarget} 'TARGET' '(' name=ValidID ')'
		//	| {StatementSearchDir} 'SEARCH_DIR' '(' name=ValidID ')'
		//	| {StatementOutput} 'OUTPUT' '(' name=ValidID ')'
		//	| {StatementOutputFormat} 'OUTPUT_FORMAT' '(' name=ValidID (',' big=ValidID ',' little=ValidID)? ')'
		//	| {StatementOutputArch} 'OUTPUT_ARCH' '(' name=ValidID ')'
		//	| {StatementForceCommonAllocation} 'FORCE_COMMON_ALLOCATION'
		//	| {StatementInhibitCommonAllocation} 'INHIBIT_COMMON_ALLOCATION'
		//	| {StatementInput} 'INPUT' '(' list=FileList ')'
		//	| {StatementGroup} 'GROUP' '(' files+=FileListName (','? files+=FileListName)* ')'
		//	| {StatementMap} 'MAP' '(' name=ValidID ')'
		//	| {StatementNoCrossRefs} 'NOCROSSREFS' '(' sections+=ValidID* ')'
		//	| {StatementNoCrossRefsTo} 'NOCROSSREFS_TO' '(' sections+=ValidID* ')'
		//	| {StatementExtern} 'EXTERN' '(' sections+=ValidID* ')'
		//	| {StatementInclude} 'INCLUDE' name=ValidID
		//	| {StatementNop} ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementStartup} 'STARTUP' '(' name=WildID ')' |
		//{StatementEntry} 'ENTRY' '(' name=ValidID ')' | {StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
		//| {StatementTarget} 'TARGET' '(' name=ValidID ')' | {StatementSearchDir} 'SEARCH_DIR' '(' name=ValidID ')' |
		//{StatementOutput} 'OUTPUT' '(' name=ValidID ')' | {StatementOutputFormat} 'OUTPUT_FORMAT' '(' name=ValidID (','
		//big=ValidID ',' little=ValidID)? ')' | {StatementOutputArch} 'OUTPUT_ARCH' '(' name=ValidID ')' |
		//{StatementForceCommonAllocation} 'FORCE_COMMON_ALLOCATION' | {StatementInhibitCommonAllocation}
		//'INHIBIT_COMMON_ALLOCATION' | {StatementInput} 'INPUT' '(' list=FileList ')' | {StatementGroup} 'GROUP' '('
		//files+=FileListName (','? files+=FileListName)* ')' | {StatementMap} 'MAP' '(' name=ValidID ')' |
		//{StatementNoCrossRefs} 'NOCROSSREFS' '(' sections+=ValidID* ')' | {StatementNoCrossRefsTo} 'NOCROSSREFS_TO' '('
		//sections+=ValidID* ')' | {StatementExtern} 'EXTERN' '(' sections+=ValidID* ')' | {StatementInclude} 'INCLUDE'
		//name=ValidID | {StatementNop} ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StatementAssignment} assignment=AssignmentRule (',' | ';')
		public Group getGroup_0() { return cGroup_0; }
		
		//{StatementAssignment}
		public Action getStatementAssignmentAction_0_0() { return cStatementAssignmentAction_0_0; }
		
		//assignment=AssignmentRule
		public Assignment getAssignmentAssignment_0_1() { return cAssignmentAssignment_0_1; }
		
		//AssignmentRule
		public RuleCall getAssignmentAssignmentRuleParserRuleCall_0_1_0() { return cAssignmentAssignmentRuleParserRuleCall_0_1_0; }
		
		//(',' | ';')
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2_1() { return cSemicolonKeyword_0_2_1; }
		
		//{StatementStartup} 'STARTUP' '(' name=WildID ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StatementStartup}
		public Action getStatementStartupAction_1_0() { return cStatementStartupAction_1_0; }
		
		//'STARTUP'
		public Keyword getSTARTUPKeyword_1_1() { return cSTARTUPKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//name=WildID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_1_3_0() { return cNameWildIDParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//{StatementEntry} 'ENTRY' '(' name=ValidID ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{StatementEntry}
		public Action getStatementEntryAction_2_0() { return cStatementEntryAction_2_0; }
		
		//'ENTRY'
		public Keyword getENTRYKeyword_2_1() { return cENTRYKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_2_3() { return cNameAssignment_2_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_3_0() { return cNameValidIDParserRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//{StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{StatementAssert}
		public Action getStatementAssertAction_3_0() { return cStatementAssertAction_3_0; }
		
		//'ASSERT'
		public Keyword getASSERTKeyword_3_1() { return cASSERTKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//exp=LExpression
		public Assignment getExpAssignment_3_3() { return cExpAssignment_3_3; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_3_3_0() { return cExpLExpressionParserRuleCall_3_3_0; }
		
		//','
		public Keyword getCommaKeyword_3_4() { return cCommaKeyword_3_4; }
		
		//message=ValidID
		public Assignment getMessageAssignment_3_5() { return cMessageAssignment_3_5; }
		
		//ValidID
		public RuleCall getMessageValidIDParserRuleCall_3_5_0() { return cMessageValidIDParserRuleCall_3_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_6() { return cRightParenthesisKeyword_3_6; }
		
		//{StatementTarget} 'TARGET' '(' name=ValidID ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{StatementTarget}
		public Action getStatementTargetAction_4_0() { return cStatementTargetAction_4_0; }
		
		//'TARGET'
		public Keyword getTARGETKeyword_4_1() { return cTARGETKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_4_3() { return cNameAssignment_4_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_3_0() { return cNameValidIDParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{StatementSearchDir} 'SEARCH_DIR' '(' name=ValidID ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//{StatementSearchDir}
		public Action getStatementSearchDirAction_5_0() { return cStatementSearchDirAction_5_0; }
		
		//'SEARCH_DIR'
		public Keyword getSEARCH_DIRKeyword_5_1() { return cSEARCH_DIRKeyword_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_5_3() { return cNameAssignment_5_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_5_3_0() { return cNameValidIDParserRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//{StatementOutput} 'OUTPUT' '(' name=ValidID ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{StatementOutput}
		public Action getStatementOutputAction_6_0() { return cStatementOutputAction_6_0; }
		
		//'OUTPUT'
		public Keyword getOUTPUTKeyword_6_1() { return cOUTPUTKeyword_6_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_6_3() { return cNameAssignment_6_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_6_3_0() { return cNameValidIDParserRuleCall_6_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//{StatementOutputFormat} 'OUTPUT_FORMAT' '(' name=ValidID (',' big=ValidID ',' little=ValidID)? ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{StatementOutputFormat}
		public Action getStatementOutputFormatAction_7_0() { return cStatementOutputFormatAction_7_0; }
		
		//'OUTPUT_FORMAT'
		public Keyword getOUTPUT_FORMATKeyword_7_1() { return cOUTPUT_FORMATKeyword_7_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_7_3() { return cNameAssignment_7_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_7_3_0() { return cNameValidIDParserRuleCall_7_3_0; }
		
		//(',' big=ValidID ',' little=ValidID)?
		public Group getGroup_7_4() { return cGroup_7_4; }
		
		//','
		public Keyword getCommaKeyword_7_4_0() { return cCommaKeyword_7_4_0; }
		
		//big=ValidID
		public Assignment getBigAssignment_7_4_1() { return cBigAssignment_7_4_1; }
		
		//ValidID
		public RuleCall getBigValidIDParserRuleCall_7_4_1_0() { return cBigValidIDParserRuleCall_7_4_1_0; }
		
		//','
		public Keyword getCommaKeyword_7_4_2() { return cCommaKeyword_7_4_2; }
		
		//little=ValidID
		public Assignment getLittleAssignment_7_4_3() { return cLittleAssignment_7_4_3; }
		
		//ValidID
		public RuleCall getLittleValidIDParserRuleCall_7_4_3_0() { return cLittleValidIDParserRuleCall_7_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_5() { return cRightParenthesisKeyword_7_5; }
		
		//{StatementOutputArch} 'OUTPUT_ARCH' '(' name=ValidID ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{StatementOutputArch}
		public Action getStatementOutputArchAction_8_0() { return cStatementOutputArchAction_8_0; }
		
		//'OUTPUT_ARCH'
		public Keyword getOUTPUT_ARCHKeyword_8_1() { return cOUTPUT_ARCHKeyword_8_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_8_3() { return cNameAssignment_8_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_8_3_0() { return cNameValidIDParserRuleCall_8_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_4() { return cRightParenthesisKeyword_8_4; }
		
		//{StatementForceCommonAllocation} 'FORCE_COMMON_ALLOCATION'
		public Group getGroup_9() { return cGroup_9; }
		
		//{StatementForceCommonAllocation}
		public Action getStatementForceCommonAllocationAction_9_0() { return cStatementForceCommonAllocationAction_9_0; }
		
		//'FORCE_COMMON_ALLOCATION'
		public Keyword getFORCE_COMMON_ALLOCATIONKeyword_9_1() { return cFORCE_COMMON_ALLOCATIONKeyword_9_1; }
		
		//{StatementInhibitCommonAllocation} 'INHIBIT_COMMON_ALLOCATION'
		public Group getGroup_10() { return cGroup_10; }
		
		//{StatementInhibitCommonAllocation}
		public Action getStatementInhibitCommonAllocationAction_10_0() { return cStatementInhibitCommonAllocationAction_10_0; }
		
		//'INHIBIT_COMMON_ALLOCATION'
		public Keyword getINHIBIT_COMMON_ALLOCATIONKeyword_10_1() { return cINHIBIT_COMMON_ALLOCATIONKeyword_10_1; }
		
		//{StatementInput} 'INPUT' '(' list=FileList ')'
		public Group getGroup_11() { return cGroup_11; }
		
		//{StatementInput}
		public Action getStatementInputAction_11_0() { return cStatementInputAction_11_0; }
		
		//'INPUT'
		public Keyword getINPUTKeyword_11_1() { return cINPUTKeyword_11_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_11_2() { return cLeftParenthesisKeyword_11_2; }
		
		//list=FileList
		public Assignment getListAssignment_11_3() { return cListAssignment_11_3; }
		
		//FileList
		public RuleCall getListFileListParserRuleCall_11_3_0() { return cListFileListParserRuleCall_11_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11_4() { return cRightParenthesisKeyword_11_4; }
		
		//{StatementGroup} 'GROUP' '(' files+=FileListName (','? files+=FileListName)* ')'
		public Group getGroup_12() { return cGroup_12; }
		
		//{StatementGroup}
		public Action getStatementGroupAction_12_0() { return cStatementGroupAction_12_0; }
		
		//'GROUP'
		public Keyword getGROUPKeyword_12_1() { return cGROUPKeyword_12_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_12_2() { return cLeftParenthesisKeyword_12_2; }
		
		//files+=FileListName
		public Assignment getFilesAssignment_12_3() { return cFilesAssignment_12_3; }
		
		//FileListName
		public RuleCall getFilesFileListNameParserRuleCall_12_3_0() { return cFilesFileListNameParserRuleCall_12_3_0; }
		
		//(','? files+=FileListName)*
		public Group getGroup_12_4() { return cGroup_12_4; }
		
		//','?
		public Keyword getCommaKeyword_12_4_0() { return cCommaKeyword_12_4_0; }
		
		//files+=FileListName
		public Assignment getFilesAssignment_12_4_1() { return cFilesAssignment_12_4_1; }
		
		//FileListName
		public RuleCall getFilesFileListNameParserRuleCall_12_4_1_0() { return cFilesFileListNameParserRuleCall_12_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_12_5() { return cRightParenthesisKeyword_12_5; }
		
		//{StatementMap} 'MAP' '(' name=ValidID ')'
		public Group getGroup_13() { return cGroup_13; }
		
		//{StatementMap}
		public Action getStatementMapAction_13_0() { return cStatementMapAction_13_0; }
		
		//'MAP'
		public Keyword getMAPKeyword_13_1() { return cMAPKeyword_13_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_13_2() { return cLeftParenthesisKeyword_13_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_13_3() { return cNameAssignment_13_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_13_3_0() { return cNameValidIDParserRuleCall_13_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13_4() { return cRightParenthesisKeyword_13_4; }
		
		//{StatementNoCrossRefs} 'NOCROSSREFS' '(' sections+=ValidID* ')'
		public Group getGroup_14() { return cGroup_14; }
		
		//{StatementNoCrossRefs}
		public Action getStatementNoCrossRefsAction_14_0() { return cStatementNoCrossRefsAction_14_0; }
		
		//'NOCROSSREFS'
		public Keyword getNOCROSSREFSKeyword_14_1() { return cNOCROSSREFSKeyword_14_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_14_2() { return cLeftParenthesisKeyword_14_2; }
		
		//sections+=ValidID*
		public Assignment getSectionsAssignment_14_3() { return cSectionsAssignment_14_3; }
		
		//ValidID
		public RuleCall getSectionsValidIDParserRuleCall_14_3_0() { return cSectionsValidIDParserRuleCall_14_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_14_4() { return cRightParenthesisKeyword_14_4; }
		
		//{StatementNoCrossRefsTo} 'NOCROSSREFS_TO' '(' sections+=ValidID* ')'
		public Group getGroup_15() { return cGroup_15; }
		
		//{StatementNoCrossRefsTo}
		public Action getStatementNoCrossRefsToAction_15_0() { return cStatementNoCrossRefsToAction_15_0; }
		
		//'NOCROSSREFS_TO'
		public Keyword getNOCROSSREFS_TOKeyword_15_1() { return cNOCROSSREFS_TOKeyword_15_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_15_2() { return cLeftParenthesisKeyword_15_2; }
		
		//sections+=ValidID*
		public Assignment getSectionsAssignment_15_3() { return cSectionsAssignment_15_3; }
		
		//ValidID
		public RuleCall getSectionsValidIDParserRuleCall_15_3_0() { return cSectionsValidIDParserRuleCall_15_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15_4() { return cRightParenthesisKeyword_15_4; }
		
		//{StatementExtern} 'EXTERN' '(' sections+=ValidID* ')'
		public Group getGroup_16() { return cGroup_16; }
		
		//{StatementExtern}
		public Action getStatementExternAction_16_0() { return cStatementExternAction_16_0; }
		
		//'EXTERN'
		public Keyword getEXTERNKeyword_16_1() { return cEXTERNKeyword_16_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_16_2() { return cLeftParenthesisKeyword_16_2; }
		
		//sections+=ValidID*
		public Assignment getSectionsAssignment_16_3() { return cSectionsAssignment_16_3; }
		
		//ValidID
		public RuleCall getSectionsValidIDParserRuleCall_16_3_0() { return cSectionsValidIDParserRuleCall_16_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_16_4() { return cRightParenthesisKeyword_16_4; }
		
		//{StatementInclude} 'INCLUDE' name=ValidID
		public Group getGroup_17() { return cGroup_17; }
		
		//{StatementInclude}
		public Action getStatementIncludeAction_17_0() { return cStatementIncludeAction_17_0; }
		
		//'INCLUDE'
		public Keyword getINCLUDEKeyword_17_1() { return cINCLUDEKeyword_17_1; }
		
		//name=ValidID
		public Assignment getNameAssignment_17_2() { return cNameAssignment_17_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_17_2_0() { return cNameValidIDParserRuleCall_17_2_0; }
		
		//{StatementNop} ';'
		public Group getGroup_18() { return cGroup_18; }
		
		//{StatementNop}
		public Action getStatementNopAction_18_0() { return cStatementNopAction_18_0; }
		
		//';'
		public Keyword getSemicolonKeyword_18_1() { return cSemicolonKeyword_18_1; }
	}
	public class FileListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.FileList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFilesAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFilesFileListNameParserRuleCall_0_0_0 = (RuleCall)cFilesAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cFilesAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cFilesFileListNameParserRuleCall_0_1_1_0 = (RuleCall)cFilesAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cAsNeededAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cAsNeededAS_NEEDEDKeyword_1_0_0 = (Keyword)cAsNeededAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cListFileListParserRuleCall_1_2_0 = (RuleCall)cListAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//FileList:
		//	files+=FileListName (','? files+=FileListName)*
		//	| asNeeded?='AS_NEEDED' '(' list=FileList ')';
		@Override public ParserRule getRule() { return rule; }
		
		//files+=FileListName (','? files+=FileListName)* | asNeeded?='AS_NEEDED' '(' list=FileList ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//files+=FileListName (','? files+=FileListName)*
		public Group getGroup_0() { return cGroup_0; }
		
		//files+=FileListName
		public Assignment getFilesAssignment_0_0() { return cFilesAssignment_0_0; }
		
		//FileListName
		public RuleCall getFilesFileListNameParserRuleCall_0_0_0() { return cFilesFileListNameParserRuleCall_0_0_0; }
		
		//(','? files+=FileListName)*
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//','?
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }
		
		//files+=FileListName
		public Assignment getFilesAssignment_0_1_1() { return cFilesAssignment_0_1_1; }
		
		//FileListName
		public RuleCall getFilesFileListNameParserRuleCall_0_1_1_0() { return cFilesFileListNameParserRuleCall_0_1_1_0; }
		
		//asNeeded?='AS_NEEDED' '(' list=FileList ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//asNeeded?='AS_NEEDED'
		public Assignment getAsNeededAssignment_1_0() { return cAsNeededAssignment_1_0; }
		
		//'AS_NEEDED'
		public Keyword getAsNeededAS_NEEDEDKeyword_1_0_0() { return cAsNeededAS_NEEDEDKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//list=FileList
		public Assignment getListAssignment_1_2() { return cListAssignment_1_2; }
		
		//FileList
		public RuleCall getListFileListParserRuleCall_1_2_0() { return cListFileListParserRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class FileListNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.FileListName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLibraryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cLibraryLKeyword_0_0 = (Keyword)cLibraryAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//FileListName hidden():
		//	library?='-l'? name=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//library?='-l'? name=ValidID
		public Group getGroup() { return cGroup; }
		
		//library?='-l'?
		public Assignment getLibraryAssignment_0() { return cLibraryAssignment_0; }
		
		//'-l'
		public Keyword getLibraryLKeyword_0_0() { return cLibraryLKeyword_0_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
	}
	public class PhdrsCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.PhdrsCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPhdrsCommandAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPHDRSKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPhdrsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPhdrsPhdrParserRuleCall_3_0 = (RuleCall)cPhdrsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PhdrsCommand:
		//	{PhdrsCommand} 'PHDRS' '{' phdrs+=Phdr* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{PhdrsCommand} 'PHDRS' '{' phdrs+=Phdr* '}'
		public Group getGroup() { return cGroup; }
		
		//{PhdrsCommand}
		public Action getPhdrsCommandAction_0() { return cPhdrsCommandAction_0; }
		
		//'PHDRS'
		public Keyword getPHDRSKeyword_1() { return cPHDRSKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//phdrs+=Phdr*
		public Assignment getPhdrsAssignment_3() { return cPhdrsAssignment_3; }
		
		//Phdr
		public RuleCall getPhdrsPhdrParserRuleCall_3_0() { return cPhdrsPhdrParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PhdrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.Phdr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOptsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptsLExpressionParserRuleCall_1_0 = (RuleCall)cOptsAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		/// * TODO There is secondary validation on what is allowed
		//	 * as opts here.
		// * XXX: This relies on AtCall being an LExpression
		// * / Phdr:
		//	name=ValidID opts+=LExpression* ';';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID opts+=LExpression* ';'
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//opts+=LExpression*
		public Assignment getOptsAssignment_1() { return cOptsAssignment_1; }
		
		//LExpression
		public RuleCall getOptsLExpressionParserRuleCall_1_0() { return cOptsLExpressionParserRuleCall_1_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class SectionsCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.SectionsCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSECTIONSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cSectionsCommandAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cSectionCommandsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSectionCommandsOutputSectionCommandParserRuleCall_3_0 = (RuleCall)cSectionCommandsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SectionsCommand:
		//	'SECTIONS' '{' {SectionsCommand} sectionCommands+=OutputSectionCommand*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'SECTIONS' '{' {SectionsCommand} sectionCommands+=OutputSectionCommand* '}'
		public Group getGroup() { return cGroup; }
		
		//'SECTIONS'
		public Keyword getSECTIONSKeyword_0() { return cSECTIONSKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//{SectionsCommand}
		public Action getSectionsCommandAction_2() { return cSectionsCommandAction_2; }
		
		//sectionCommands+=OutputSectionCommand*
		public Assignment getSectionCommandsAssignment_3() { return cSectionCommandsAssignment_3; }
		
		//OutputSectionCommand
		public RuleCall getSectionCommandsOutputSectionCommandParserRuleCall_3_0() { return cSectionCommandsOutputSectionCommandParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OutputSectionCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OutputSectionCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOutputSectionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementAnywhereParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OutputSectionCommand:
		//	OutputSection
		//	| StatementAnywhere;
		@Override public ParserRule getRule() { return rule; }
		
		//OutputSection | StatementAnywhere
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OutputSection
		public RuleCall getOutputSectionParserRuleCall_0() { return cOutputSectionParserRuleCall_0; }
		
		//StatementAnywhere
		public RuleCall getStatementAnywhereParserRuleCall_1() { return cStatementAnywhereParserRuleCall_1; }
	}
	public class OutputSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OutputSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAddressAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddressLExpressionParserRuleCall_1_0 = (RuleCall)cAddressAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTypeOutputSectionTypeParserRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cATKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAtAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAtLExpressionParserRuleCall_4_2_0 = (RuleCall)cAtAssignment_4_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cAlignAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAlignOutputSectionAlignParserRuleCall_5_0 = (RuleCall)cAlignAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cSUBALIGNKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cSubAlignAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cSubAlignLExpressionParserRuleCall_6_2_0 = (RuleCall)cSubAlignAssignment_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cConstraintAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstraintOutputSectionConstraintParserRuleCall_7_0 = (RuleCall)cConstraintAssignment_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cStatementsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cStatementsStatementParserRuleCall_9_0 = (RuleCall)cStatementsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cGreaterThanSignKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cMemoryAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cMemoryValidIDParserRuleCall_11_1_0 = (RuleCall)cMemoryAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cATKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cAtMemoryAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cAtMemoryValidIDParserRuleCall_12_2_0 = (RuleCall)cAtMemoryAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cColonKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cPhdrsAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cPhdrsValidIDParserRuleCall_13_1_0 = (RuleCall)cPhdrsAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cEqualsSignKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cFillAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cFillLExpressionParserRuleCall_14_1_0 = (RuleCall)cFillAssignment_14_1.eContents().get(0);
		private final Keyword cCommaKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//OutputSection:
		//	name=ValidID address=LExpression? ('(' type=OutputSectionType ')')? ':' ('AT' '(' at=LExpression ')')?
		//	align=OutputSectionAlign? ('SUBALIGN' '(' subAlign=LExpression ')')?
		//	constraint=OutputSectionConstraint?
		//	'{'
		//	statements+=Statement*
		//	'}' ('>' memory=ValidID)? ('AT' '>' atMemory=ValidID)? (':' phdrs+=ValidID)* ('=' fill=LExpression)?
		//	','?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ValidID address=LExpression? ('(' type=OutputSectionType ')')? ':' ('AT' '(' at=LExpression ')')?
		//align=OutputSectionAlign? ('SUBALIGN' '(' subAlign=LExpression ')')? constraint=OutputSectionConstraint? '{'
		//statements+=Statement* '}' ('>' memory=ValidID)? ('AT' '>' atMemory=ValidID)? (':' phdrs+=ValidID)* ('='
		//fill=LExpression)? ','?
		public Group getGroup() { return cGroup; }
		
		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }
		
		//address=LExpression?
		public Assignment getAddressAssignment_1() { return cAddressAssignment_1; }
		
		//LExpression
		public RuleCall getAddressLExpressionParserRuleCall_1_0() { return cAddressLExpressionParserRuleCall_1_0; }
		
		//('(' type=OutputSectionType ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//type=OutputSectionType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }
		
		//OutputSectionType
		public RuleCall getTypeOutputSectionTypeParserRuleCall_2_1_0() { return cTypeOutputSectionTypeParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//('AT' '(' at=LExpression ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'AT'
		public Keyword getATKeyword_4_0() { return cATKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//at=LExpression
		public Assignment getAtAssignment_4_2() { return cAtAssignment_4_2; }
		
		//LExpression
		public RuleCall getAtLExpressionParserRuleCall_4_2_0() { return cAtLExpressionParserRuleCall_4_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//align=OutputSectionAlign?
		public Assignment getAlignAssignment_5() { return cAlignAssignment_5; }
		
		//OutputSectionAlign
		public RuleCall getAlignOutputSectionAlignParserRuleCall_5_0() { return cAlignOutputSectionAlignParserRuleCall_5_0; }
		
		//('SUBALIGN' '(' subAlign=LExpression ')')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'SUBALIGN'
		public Keyword getSUBALIGNKeyword_6_0() { return cSUBALIGNKeyword_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//subAlign=LExpression
		public Assignment getSubAlignAssignment_6_2() { return cSubAlignAssignment_6_2; }
		
		//LExpression
		public RuleCall getSubAlignLExpressionParserRuleCall_6_2_0() { return cSubAlignLExpressionParserRuleCall_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_3() { return cRightParenthesisKeyword_6_3; }
		
		//constraint=OutputSectionConstraint?
		public Assignment getConstraintAssignment_7() { return cConstraintAssignment_7; }
		
		//OutputSectionConstraint
		public RuleCall getConstraintOutputSectionConstraintParserRuleCall_7_0() { return cConstraintOutputSectionConstraintParserRuleCall_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_9() { return cStatementsAssignment_9; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_9_0() { return cStatementsStatementParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//('>' memory=ValidID)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_11_0() { return cGreaterThanSignKeyword_11_0; }
		
		//memory=ValidID
		public Assignment getMemoryAssignment_11_1() { return cMemoryAssignment_11_1; }
		
		//ValidID
		public RuleCall getMemoryValidIDParserRuleCall_11_1_0() { return cMemoryValidIDParserRuleCall_11_1_0; }
		
		//('AT' '>' atMemory=ValidID)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'AT'
		public Keyword getATKeyword_12_0() { return cATKeyword_12_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_12_1() { return cGreaterThanSignKeyword_12_1; }
		
		//atMemory=ValidID
		public Assignment getAtMemoryAssignment_12_2() { return cAtMemoryAssignment_12_2; }
		
		//ValidID
		public RuleCall getAtMemoryValidIDParserRuleCall_12_2_0() { return cAtMemoryValidIDParserRuleCall_12_2_0; }
		
		//(':' phdrs+=ValidID)*
		public Group getGroup_13() { return cGroup_13; }
		
		//':'
		public Keyword getColonKeyword_13_0() { return cColonKeyword_13_0; }
		
		//phdrs+=ValidID
		public Assignment getPhdrsAssignment_13_1() { return cPhdrsAssignment_13_1; }
		
		//ValidID
		public RuleCall getPhdrsValidIDParserRuleCall_13_1_0() { return cPhdrsValidIDParserRuleCall_13_1_0; }
		
		//('=' fill=LExpression)?
		public Group getGroup_14() { return cGroup_14; }
		
		//'='
		public Keyword getEqualsSignKeyword_14_0() { return cEqualsSignKeyword_14_0; }
		
		//fill=LExpression
		public Assignment getFillAssignment_14_1() { return cFillAssignment_14_1; }
		
		//LExpression
		public RuleCall getFillLExpressionParserRuleCall_14_1_0() { return cFillLExpressionParserRuleCall_14_1_0; }
		
		//','?
		public Keyword getCommaKeyword_15() { return cCommaKeyword_15; }
	}
	public class OutputSectionAlignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OutputSectionAlign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputSectionAlignExpressionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cALIGNKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpLExpressionParserRuleCall_0_3_0 = (RuleCall)cExpAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputSectionAlignWithInputAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cALIGN_WITH_INPUTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//OutputSectionAlign:
		//	{OutputSectionAlignExpression} 'ALIGN' '(' exp=LExpression ')'
		//	| {OutputSectionAlignWithInput} 'ALIGN_WITH_INPUT';
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputSectionAlignExpression} 'ALIGN' '(' exp=LExpression ')' | {OutputSectionAlignWithInput} 'ALIGN_WITH_INPUT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OutputSectionAlignExpression} 'ALIGN' '(' exp=LExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{OutputSectionAlignExpression}
		public Action getOutputSectionAlignExpressionAction_0_0() { return cOutputSectionAlignExpressionAction_0_0; }
		
		//'ALIGN'
		public Keyword getALIGNKeyword_0_1() { return cALIGNKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//exp=LExpression
		public Assignment getExpAssignment_0_3() { return cExpAssignment_0_3; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_0_3_0() { return cExpLExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//{OutputSectionAlignWithInput} 'ALIGN_WITH_INPUT'
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutputSectionAlignWithInput}
		public Action getOutputSectionAlignWithInputAction_1_0() { return cOutputSectionAlignWithInputAction_1_0; }
		
		//'ALIGN_WITH_INPUT'
		public Keyword getALIGN_WITH_INPUTKeyword_1_1() { return cALIGN_WITH_INPUTKeyword_1_1; }
	}
	public class OutputSectionConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OutputSectionConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputSectionConstraintOnlyIfROAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cONLY_IF_ROKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputSectionConstraintOnlyIfRWAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cONLY_IF_RWKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOutputSectionConstraintSpecialAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSPECIALKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//OutputSectionConstraint:
		//	{OutputSectionConstraintOnlyIfRO} 'ONLY_IF_RO'
		//	| {OutputSectionConstraintOnlyIfRW} 'ONLY_IF_RW'
		//	| {OutputSectionConstraintSpecial} 'SPECIAL';
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputSectionConstraintOnlyIfRO} 'ONLY_IF_RO' | {OutputSectionConstraintOnlyIfRW} 'ONLY_IF_RW' |
		//{OutputSectionConstraintSpecial} 'SPECIAL'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OutputSectionConstraintOnlyIfRO} 'ONLY_IF_RO'
		public Group getGroup_0() { return cGroup_0; }
		
		//{OutputSectionConstraintOnlyIfRO}
		public Action getOutputSectionConstraintOnlyIfROAction_0_0() { return cOutputSectionConstraintOnlyIfROAction_0_0; }
		
		//'ONLY_IF_RO'
		public Keyword getONLY_IF_ROKeyword_0_1() { return cONLY_IF_ROKeyword_0_1; }
		
		//{OutputSectionConstraintOnlyIfRW} 'ONLY_IF_RW'
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutputSectionConstraintOnlyIfRW}
		public Action getOutputSectionConstraintOnlyIfRWAction_1_0() { return cOutputSectionConstraintOnlyIfRWAction_1_0; }
		
		//'ONLY_IF_RW'
		public Keyword getONLY_IF_RWKeyword_1_1() { return cONLY_IF_RWKeyword_1_1; }
		
		//{OutputSectionConstraintSpecial} 'SPECIAL'
		public Group getGroup_2() { return cGroup_2; }
		
		//{OutputSectionConstraintSpecial}
		public Action getOutputSectionConstraintSpecialAction_2_0() { return cOutputSectionConstraintSpecialAction_2_0; }
		
		//'SPECIAL'
		public Keyword getSPECIALKeyword_2_1() { return cSPECIALKeyword_2_1; }
	}
	public class OutputSectionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OutputSectionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cOutputSectionTypeNoLoadAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cNOLOADKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cOutputSectionTypeDSectAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDSECTKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cOutputSectionTypeCopyAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCOPYKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cOutputSectionTypeInfoAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cINFOKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cOutputSectionTypeOverlayAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cOVERLAYKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//OutputSectionType:
		//	{OutputSectionTypeNoLoad} 'NOLOAD'
		//	| {OutputSectionTypeDSect} 'DSECT'
		//	| {OutputSectionTypeCopy} 'COPY'
		//	| {OutputSectionTypeInfo} 'INFO'
		//	| {OutputSectionTypeOverlay} 'OVERLAY';
		@Override public ParserRule getRule() { return rule; }
		
		//{OutputSectionTypeNoLoad} 'NOLOAD' | {OutputSectionTypeDSect} 'DSECT' | {OutputSectionTypeCopy} 'COPY' |
		//{OutputSectionTypeInfo} 'INFO' | {OutputSectionTypeOverlay} 'OVERLAY'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{OutputSectionTypeNoLoad} 'NOLOAD'
		public Group getGroup_0() { return cGroup_0; }
		
		//{OutputSectionTypeNoLoad}
		public Action getOutputSectionTypeNoLoadAction_0_0() { return cOutputSectionTypeNoLoadAction_0_0; }
		
		//'NOLOAD'
		public Keyword getNOLOADKeyword_0_1() { return cNOLOADKeyword_0_1; }
		
		//{OutputSectionTypeDSect} 'DSECT'
		public Group getGroup_1() { return cGroup_1; }
		
		//{OutputSectionTypeDSect}
		public Action getOutputSectionTypeDSectAction_1_0() { return cOutputSectionTypeDSectAction_1_0; }
		
		//'DSECT'
		public Keyword getDSECTKeyword_1_1() { return cDSECTKeyword_1_1; }
		
		//{OutputSectionTypeCopy} 'COPY'
		public Group getGroup_2() { return cGroup_2; }
		
		//{OutputSectionTypeCopy}
		public Action getOutputSectionTypeCopyAction_2_0() { return cOutputSectionTypeCopyAction_2_0; }
		
		//'COPY'
		public Keyword getCOPYKeyword_2_1() { return cCOPYKeyword_2_1; }
		
		//{OutputSectionTypeInfo} 'INFO'
		public Group getGroup_3() { return cGroup_3; }
		
		//{OutputSectionTypeInfo}
		public Action getOutputSectionTypeInfoAction_3_0() { return cOutputSectionTypeInfoAction_3_0; }
		
		//'INFO'
		public Keyword getINFOKeyword_3_1() { return cINFOKeyword_3_1; }
		
		//{OutputSectionTypeOverlay} 'OVERLAY'
		public Group getGroup_4() { return cGroup_4; }
		
		//{OutputSectionTypeOverlay}
		public Action getOutputSectionTypeOverlayAction_4_0() { return cOutputSectionTypeOverlayAction_4_0; }
		
		//'OVERLAY'
		public Keyword getOVERLAYKeyword_4_1() { return cOVERLAYKeyword_4_1; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAssignmentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAssignmentAssignmentRuleParserRuleCall_0_1_0 = (RuleCall)cAssignmentAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2_1 = (Keyword)cAlternatives_0_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStatementCreateObjectSymbolsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCREATE_OBJECT_SYMBOLSKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStatementConstructorsAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cCONSTRUCTORSKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStatementConstructorsSortedAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSORT_BY_NAMEKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cCONSTRUCTORSKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cStatementDataAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cSizeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSizeStatementDataSizeParserRuleCall_4_1_0 = (RuleCall)cSizeAssignment_4_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cDataAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cDataLExpressionParserRuleCall_4_3_0 = (RuleCall)cDataAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cStatementFillAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cFILLKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Assignment cFillAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cFillLExpressionParserRuleCall_5_3_0 = (RuleCall)cFillAssignment_5_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cStatementAssertAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cASSERTKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cExpAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cExpLExpressionParserRuleCall_6_3_0 = (RuleCall)cExpAssignment_6_3.eContents().get(0);
		private final Keyword cCommaKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cMessageAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cMessageValidIDParserRuleCall_6_5_0 = (RuleCall)cMessageAssignment_6_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cStatementIncludeAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cINCLUDEKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFilenameAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFilenameWildIDParserRuleCall_7_2_0 = (RuleCall)cFilenameAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cStatementInputSectionAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Assignment cSpecAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSpecInputSectionParserRuleCall_8_1_0 = (RuleCall)cSpecAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cStatementNopAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		
		//Statement:
		//	{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementCreateObjectSymbols} 'CREATE_OBJECT_SYMBOLS'
		//	| {StatementConstructors} 'CONSTRUCTORS'
		//	| {StatementConstructorsSorted} 'SORT_BY_NAME' '(' 'CONSTRUCTORS' ')'
		//	| {StatementData} size=StatementDataSize '(' data=LExpression ')'
		//	| {StatementFill} 'FILL' '(' fill=LExpression ')'
		//	| {StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
		//	| {StatementInclude} 'INCLUDE' filename=WildID
		//	| {StatementInputSection} spec=InputSection
		//	| {StatementNop} ';' // TODO don't create object for lone ;
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementCreateObjectSymbols} 'CREATE_OBJECT_SYMBOLS' |
		//{StatementConstructors} 'CONSTRUCTORS' | {StatementConstructorsSorted} 'SORT_BY_NAME' '(' 'CONSTRUCTORS' ')' |
		//{StatementData} size=StatementDataSize '(' data=LExpression ')' | {StatementFill} 'FILL' '(' fill=LExpression ')' |
		//{StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')' | {StatementInclude} 'INCLUDE' filename=WildID |
		//{StatementInputSection} spec=InputSection | {StatementNop} ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StatementAssignment} assignment=AssignmentRule (',' | ';')
		public Group getGroup_0() { return cGroup_0; }
		
		//{StatementAssignment}
		public Action getStatementAssignmentAction_0_0() { return cStatementAssignmentAction_0_0; }
		
		//assignment=AssignmentRule
		public Assignment getAssignmentAssignment_0_1() { return cAssignmentAssignment_0_1; }
		
		//AssignmentRule
		public RuleCall getAssignmentAssignmentRuleParserRuleCall_0_1_0() { return cAssignmentAssignmentRuleParserRuleCall_0_1_0; }
		
		//(',' | ';')
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2_1() { return cSemicolonKeyword_0_2_1; }
		
		//{StatementCreateObjectSymbols} 'CREATE_OBJECT_SYMBOLS'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StatementCreateObjectSymbols}
		public Action getStatementCreateObjectSymbolsAction_1_0() { return cStatementCreateObjectSymbolsAction_1_0; }
		
		//'CREATE_OBJECT_SYMBOLS'
		public Keyword getCREATE_OBJECT_SYMBOLSKeyword_1_1() { return cCREATE_OBJECT_SYMBOLSKeyword_1_1; }
		
		//{StatementConstructors} 'CONSTRUCTORS'
		public Group getGroup_2() { return cGroup_2; }
		
		//{StatementConstructors}
		public Action getStatementConstructorsAction_2_0() { return cStatementConstructorsAction_2_0; }
		
		//'CONSTRUCTORS'
		public Keyword getCONSTRUCTORSKeyword_2_1() { return cCONSTRUCTORSKeyword_2_1; }
		
		//{StatementConstructorsSorted} 'SORT_BY_NAME' '(' 'CONSTRUCTORS' ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{StatementConstructorsSorted}
		public Action getStatementConstructorsSortedAction_3_0() { return cStatementConstructorsSortedAction_3_0; }
		
		//'SORT_BY_NAME'
		public Keyword getSORT_BY_NAMEKeyword_3_1() { return cSORT_BY_NAMEKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//'CONSTRUCTORS'
		public Keyword getCONSTRUCTORSKeyword_3_3() { return cCONSTRUCTORSKeyword_3_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//{StatementData} size=StatementDataSize '(' data=LExpression ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{StatementData}
		public Action getStatementDataAction_4_0() { return cStatementDataAction_4_0; }
		
		//size=StatementDataSize
		public Assignment getSizeAssignment_4_1() { return cSizeAssignment_4_1; }
		
		//StatementDataSize
		public RuleCall getSizeStatementDataSizeParserRuleCall_4_1_0() { return cSizeStatementDataSizeParserRuleCall_4_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//data=LExpression
		public Assignment getDataAssignment_4_3() { return cDataAssignment_4_3; }
		
		//LExpression
		public RuleCall getDataLExpressionParserRuleCall_4_3_0() { return cDataLExpressionParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{StatementFill} 'FILL' '(' fill=LExpression ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//{StatementFill}
		public Action getStatementFillAction_5_0() { return cStatementFillAction_5_0; }
		
		//'FILL'
		public Keyword getFILLKeyword_5_1() { return cFILLKeyword_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//fill=LExpression
		public Assignment getFillAssignment_5_3() { return cFillAssignment_5_3; }
		
		//LExpression
		public RuleCall getFillLExpressionParserRuleCall_5_3_0() { return cFillLExpressionParserRuleCall_5_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//{StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{StatementAssert}
		public Action getStatementAssertAction_6_0() { return cStatementAssertAction_6_0; }
		
		//'ASSERT'
		public Keyword getASSERTKeyword_6_1() { return cASSERTKeyword_6_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//exp=LExpression
		public Assignment getExpAssignment_6_3() { return cExpAssignment_6_3; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_6_3_0() { return cExpLExpressionParserRuleCall_6_3_0; }
		
		//','
		public Keyword getCommaKeyword_6_4() { return cCommaKeyword_6_4; }
		
		//message=ValidID
		public Assignment getMessageAssignment_6_5() { return cMessageAssignment_6_5; }
		
		//ValidID
		public RuleCall getMessageValidIDParserRuleCall_6_5_0() { return cMessageValidIDParserRuleCall_6_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }
		
		//{StatementInclude} 'INCLUDE' filename=WildID
		public Group getGroup_7() { return cGroup_7; }
		
		//{StatementInclude}
		public Action getStatementIncludeAction_7_0() { return cStatementIncludeAction_7_0; }
		
		//'INCLUDE'
		public Keyword getINCLUDEKeyword_7_1() { return cINCLUDEKeyword_7_1; }
		
		//filename=WildID
		public Assignment getFilenameAssignment_7_2() { return cFilenameAssignment_7_2; }
		
		//WildID
		public RuleCall getFilenameWildIDParserRuleCall_7_2_0() { return cFilenameWildIDParserRuleCall_7_2_0; }
		
		//{StatementInputSection} spec=InputSection
		public Group getGroup_8() { return cGroup_8; }
		
		//{StatementInputSection}
		public Action getStatementInputSectionAction_8_0() { return cStatementInputSectionAction_8_0; }
		
		//spec=InputSection
		public Assignment getSpecAssignment_8_1() { return cSpecAssignment_8_1; }
		
		//InputSection
		public RuleCall getSpecInputSectionParserRuleCall_8_1_0() { return cSpecInputSectionParserRuleCall_8_1_0; }
		
		//{StatementNop} ';'
		public Group getGroup_9() { return cGroup_9; }
		
		//{StatementNop}
		public Action getStatementNopAction_9_0() { return cStatementNopAction_9_0; }
		
		//';'
		public Keyword getSemicolonKeyword_9_1() { return cSemicolonKeyword_9_1; }
	}
	public class StatementAnywhereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.StatementAnywhere");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cStatementAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cAssignmentAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cAssignmentAssignmentRuleParserRuleCall_0_1_0 = (RuleCall)cAssignmentAssignment_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_2 = (Alternatives)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cAlternatives_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2_1 = (Keyword)cAlternatives_0_2.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cStatementEntryAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cENTRYKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStatementAssertAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cASSERTKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cExpAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cExpLExpressionParserRuleCall_2_3_0 = (RuleCall)cExpAssignment_2_3.eContents().get(0);
		private final Keyword cCommaKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cMessageAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cMessageValidIDParserRuleCall_2_5_0 = (RuleCall)cMessageAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cStatementNopAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//StatementAnywhere Statement:
		//	{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementEntry} 'ENTRY' '(' name=ValidID ')'
		//	| {StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
		//	| {StatementNop} ';'
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementEntry} 'ENTRY' '(' name=ValidID ')' |
		//{StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')' | {StatementNop} ';'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{StatementAssignment} assignment=AssignmentRule (',' | ';')
		public Group getGroup_0() { return cGroup_0; }
		
		//{StatementAssignment}
		public Action getStatementAssignmentAction_0_0() { return cStatementAssignmentAction_0_0; }
		
		//assignment=AssignmentRule
		public Assignment getAssignmentAssignment_0_1() { return cAssignmentAssignment_0_1; }
		
		//AssignmentRule
		public RuleCall getAssignmentAssignmentRuleParserRuleCall_0_1_0() { return cAssignmentAssignmentRuleParserRuleCall_0_1_0; }
		
		//(',' | ';')
		public Alternatives getAlternatives_0_2() { return cAlternatives_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_0_2_1() { return cSemicolonKeyword_0_2_1; }
		
		//{StatementEntry} 'ENTRY' '(' name=ValidID ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{StatementEntry}
		public Action getStatementEntryAction_1_0() { return cStatementEntryAction_1_0; }
		
		//'ENTRY'
		public Keyword getENTRYKeyword_1_1() { return cENTRYKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_3_0() { return cNameValidIDParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//{StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{StatementAssert}
		public Action getStatementAssertAction_2_0() { return cStatementAssertAction_2_0; }
		
		//'ASSERT'
		public Keyword getASSERTKeyword_2_1() { return cASSERTKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//exp=LExpression
		public Assignment getExpAssignment_2_3() { return cExpAssignment_2_3; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_2_3_0() { return cExpLExpressionParserRuleCall_2_3_0; }
		
		//','
		public Keyword getCommaKeyword_2_4() { return cCommaKeyword_2_4; }
		
		//message=ValidID
		public Assignment getMessageAssignment_2_5() { return cMessageAssignment_2_5; }
		
		//ValidID
		public RuleCall getMessageValidIDParserRuleCall_2_5_0() { return cMessageValidIDParserRuleCall_2_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
		
		//{StatementNop} ';'
		public Group getGroup_3() { return cGroup_3; }
		
		//{StatementNop}
		public Action getStatementNopAction_3_0() { return cStatementNopAction_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class StatementDataSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.StatementDataSize");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBYTEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSHORTKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLONGKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cQUADKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSQUADKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		
		//StatementDataSize:
		//	'BYTE' | 'SHORT' | 'LONG' | 'QUAD' | 'SQUAD';
		@Override public ParserRule getRule() { return rule; }
		
		//'BYTE' | 'SHORT' | 'LONG' | 'QUAD' | 'SQUAD'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'BYTE'
		public Keyword getBYTEKeyword_0() { return cBYTEKeyword_0; }
		
		//'SHORT'
		public Keyword getSHORTKeyword_1() { return cSHORTKeyword_1; }
		
		//'LONG'
		public Keyword getLONGKeyword_2() { return cLONGKeyword_2; }
		
		//'QUAD'
		public Keyword getQUADKeyword_3() { return cQUADKeyword_3; }
		
		//'SQUAD'
		public Keyword getSQUADKeyword_4() { return cSQUADKeyword_4; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameWildIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureOpAssignParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpLExpressionParserRuleCall_2_0 = (RuleCall)cExpAssignment_2.eContents().get(0);
		
		//Assignment:
		//	name=WildID feature=OpAssign exp=LExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=WildID feature=OpAssign exp=LExpression
		public Group getGroup() { return cGroup; }
		
		//name=WildID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_0_0() { return cNameWildIDParserRuleCall_0_0; }
		
		//feature=OpAssign
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//OpAssign
		public RuleCall getFeatureOpAssignParserRuleCall_1_0() { return cFeatureOpAssignParserRuleCall_1_0; }
		
		//exp=LExpression
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_2_0() { return cExpLExpressionParserRuleCall_2_0; }
	}
	public class AssignmentRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.AssignmentRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAssignmentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameWildIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Assignment cFeatureAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFeatureOpAssignParserRuleCall_0_2_0 = (RuleCall)cFeatureAssignment_0_2.eContents().get(0);
		private final Assignment cExpAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpLExpressionParserRuleCall_0_3_0 = (RuleCall)cExpAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAssignmentHiddenAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHIDDENKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cNameWildIDParserRuleCall_1_3_0 = (RuleCall)cNameAssignment_1_3.eContents().get(0);
		private final Assignment cFeatureAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final Keyword cFeatureEqualsSignKeyword_1_4_0 = (Keyword)cFeatureAssignment_1_4.eContents().get(0);
		private final Assignment cExpAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cExpLExpressionParserRuleCall_1_5_0 = (RuleCall)cExpAssignment_1_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cAssignmentProvideAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cPROVIDEKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameWildIDParserRuleCall_2_3_0 = (RuleCall)cNameAssignment_2_3.eContents().get(0);
		private final Assignment cFeatureAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final Keyword cFeatureEqualsSignKeyword_2_4_0 = (Keyword)cFeatureAssignment_2_4.eContents().get(0);
		private final Assignment cExpAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cExpLExpressionParserRuleCall_2_5_0 = (RuleCall)cExpAssignment_2_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_6 = (Keyword)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cAssignmentProvideHiddenAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cPROVIDE_HIDDENKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNameAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNameWildIDParserRuleCall_3_3_0 = (RuleCall)cNameAssignment_3_3.eContents().get(0);
		private final Assignment cFeatureAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final Keyword cFeatureEqualsSignKeyword_3_4_0 = (Keyword)cFeatureAssignment_3_4.eContents().get(0);
		private final Assignment cExpAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cExpLExpressionParserRuleCall_3_5_0 = (RuleCall)cExpAssignment_3_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_6 = (Keyword)cGroup_3.eContents().get(6);
		
		//AssignmentRule Assignment:
		//	{Assignment} name=WildID feature=OpAssign exp=LExpression
		//	| {AssignmentHidden} 'HIDDEN' '(' name=WildID feature='=' exp=LExpression ')'
		//	| {AssignmentProvide} 'PROVIDE' '(' name=WildID feature='=' exp=LExpression ')'
		//	| {AssignmentProvideHidden} 'PROVIDE_HIDDEN' '(' name=WildID feature='=' exp=LExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{Assignment} name=WildID feature=OpAssign exp=LExpression | {AssignmentHidden} 'HIDDEN' '(' name=WildID feature='='
		//exp=LExpression ')' | {AssignmentProvide} 'PROVIDE' '(' name=WildID feature='=' exp=LExpression ')' |
		//{AssignmentProvideHidden} 'PROVIDE_HIDDEN' '(' name=WildID feature='=' exp=LExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Assignment} name=WildID feature=OpAssign exp=LExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//{Assignment}
		public Action getAssignmentAction_0_0() { return cAssignmentAction_0_0; }
		
		//name=WildID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_0_1_0() { return cNameWildIDParserRuleCall_0_1_0; }
		
		//feature=OpAssign
		public Assignment getFeatureAssignment_0_2() { return cFeatureAssignment_0_2; }
		
		//OpAssign
		public RuleCall getFeatureOpAssignParserRuleCall_0_2_0() { return cFeatureOpAssignParserRuleCall_0_2_0; }
		
		//exp=LExpression
		public Assignment getExpAssignment_0_3() { return cExpAssignment_0_3; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_0_3_0() { return cExpLExpressionParserRuleCall_0_3_0; }
		
		//{AssignmentHidden} 'HIDDEN' '(' name=WildID feature='=' exp=LExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{AssignmentHidden}
		public Action getAssignmentHiddenAction_1_0() { return cAssignmentHiddenAction_1_0; }
		
		//'HIDDEN'
		public Keyword getHIDDENKeyword_1_1() { return cHIDDENKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//name=WildID
		public Assignment getNameAssignment_1_3() { return cNameAssignment_1_3; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_1_3_0() { return cNameWildIDParserRuleCall_1_3_0; }
		
		//feature='='
		public Assignment getFeatureAssignment_1_4() { return cFeatureAssignment_1_4; }
		
		//'='
		public Keyword getFeatureEqualsSignKeyword_1_4_0() { return cFeatureEqualsSignKeyword_1_4_0; }
		
		//exp=LExpression
		public Assignment getExpAssignment_1_5() { return cExpAssignment_1_5; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_1_5_0() { return cExpLExpressionParserRuleCall_1_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//{AssignmentProvide} 'PROVIDE' '(' name=WildID feature='=' exp=LExpression ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{AssignmentProvide}
		public Action getAssignmentProvideAction_2_0() { return cAssignmentProvideAction_2_0; }
		
		//'PROVIDE'
		public Keyword getPROVIDEKeyword_2_1() { return cPROVIDEKeyword_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//name=WildID
		public Assignment getNameAssignment_2_3() { return cNameAssignment_2_3; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_2_3_0() { return cNameWildIDParserRuleCall_2_3_0; }
		
		//feature='='
		public Assignment getFeatureAssignment_2_4() { return cFeatureAssignment_2_4; }
		
		//'='
		public Keyword getFeatureEqualsSignKeyword_2_4_0() { return cFeatureEqualsSignKeyword_2_4_0; }
		
		//exp=LExpression
		public Assignment getExpAssignment_2_5() { return cExpAssignment_2_5; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_2_5_0() { return cExpLExpressionParserRuleCall_2_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_6() { return cRightParenthesisKeyword_2_6; }
		
		//{AssignmentProvideHidden} 'PROVIDE_HIDDEN' '(' name=WildID feature='=' exp=LExpression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{AssignmentProvideHidden}
		public Action getAssignmentProvideHiddenAction_3_0() { return cAssignmentProvideHiddenAction_3_0; }
		
		//'PROVIDE_HIDDEN'
		public Keyword getPROVIDE_HIDDENKeyword_3_1() { return cPROVIDE_HIDDENKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//name=WildID
		public Assignment getNameAssignment_3_3() { return cNameAssignment_3_3; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_3_3_0() { return cNameWildIDParserRuleCall_3_3_0; }
		
		//feature='='
		public Assignment getFeatureAssignment_3_4() { return cFeatureAssignment_3_4; }
		
		//'='
		public Keyword getFeatureEqualsSignKeyword_3_4_0() { return cFeatureEqualsSignKeyword_3_4_0; }
		
		//exp=LExpression
		public Assignment getExpAssignment_3_5() { return cExpAssignment_3_5; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_3_5_0() { return cExpLExpressionParserRuleCall_3_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_6() { return cRightParenthesisKeyword_3_6; }
	}
	public class OpAssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpAssign");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cHyphenMinusEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cSolidusEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLessThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLessThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cGreaterThanSignKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cAmpersandEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cVerticalLineEqualsSignKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		
		//OpAssign:
		//	'=' | '+=' | '-=' | '*=' | '/=' | '<' '<' '=' | '>' '>=' | '&=' | '|=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '+=' | '-=' | '*=' | '/=' | '<' '<' '=' | '>' '>=' | '&=' | '|='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'+='
		public Keyword getPlusSignEqualsSignKeyword_1() { return cPlusSignEqualsSignKeyword_1; }
		
		//'-='
		public Keyword getHyphenMinusEqualsSignKeyword_2() { return cHyphenMinusEqualsSignKeyword_2; }
		
		//'*='
		public Keyword getAsteriskEqualsSignKeyword_3() { return cAsteriskEqualsSignKeyword_3; }
		
		//'/='
		public Keyword getSolidusEqualsSignKeyword_4() { return cSolidusEqualsSignKeyword_4; }
		
		//'<' '<' '='
		public Group getGroup_5() { return cGroup_5; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5_0() { return cLessThanSignKeyword_5_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_5_1() { return cLessThanSignKeyword_5_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_2() { return cEqualsSignKeyword_5_2; }
		
		//'>' '>='
		public Group getGroup_6() { return cGroup_6; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_6_0() { return cGreaterThanSignKeyword_6_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_6_1() { return cGreaterThanSignEqualsSignKeyword_6_1; }
		
		//'&='
		public Keyword getAmpersandEqualsSignKeyword_7() { return cAmpersandEqualsSignKeyword_7; }
		
		//'|='
		public Keyword getVerticalLineEqualsSignKeyword_8() { return cVerticalLineEqualsSignKeyword_8; }
	}
	public class InputSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.InputSection");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cInputSectionFileAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cINPUT_SECTION_FLAGSKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cFlagsAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cFlagsWildIDParserRuleCall_0_1_2_0 = (RuleCall)cFlagsAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Keyword cAmpersandKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cFlagsAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cFlagsWildIDParserRuleCall_0_1_3_1_0 = (RuleCall)cFlagsAssignment_0_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Assignment cFileAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cFileWildIDParserRuleCall_0_2_0 = (RuleCall)cFileAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cInputSectionWildAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cINPUT_SECTION_FLAGSKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cFlagsAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cFlagsWildIDParserRuleCall_1_1_2_0 = (RuleCall)cFlagsAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_1_3 = (Group)cGroup_1_1.eContents().get(3);
		private final Keyword cAmpersandKeyword_1_1_3_0 = (Keyword)cGroup_1_1_3.eContents().get(0);
		private final Assignment cFlagsAssignment_1_1_3_1 = (Assignment)cGroup_1_1_3.eContents().get(1);
		private final RuleCall cFlagsWildIDParserRuleCall_1_1_3_1_0 = (RuleCall)cFlagsAssignment_1_1_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_4 = (Keyword)cGroup_1_1.eContents().get(4);
		private final Assignment cWildFileAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cWildFileWildcardRuleParserRuleCall_1_2_0 = (RuleCall)cWildFileAssignment_1_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cSectionsAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cSectionsWildcardRuleParserRuleCall_1_4_0 = (RuleCall)cSectionsAssignment_1_4.eContents().get(0);
		private final Group cGroup_1_5 = (Group)cGroup_1.eContents().get(5);
		private final Keyword cCommaKeyword_1_5_0 = (Keyword)cGroup_1_5.eContents().get(0);
		private final Assignment cSectionsAssignment_1_5_1 = (Assignment)cGroup_1_5.eContents().get(1);
		private final RuleCall cSectionsWildcardRuleParserRuleCall_1_5_1_0 = (RuleCall)cSectionsAssignment_1_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cInputSectionFileAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cKeepAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cKeepKEEPKeyword_2_1_0 = (Keyword)cKeepAssignment_2_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cINPUT_SECTION_FLAGSKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cFlagsAssignment_2_3_2 = (Assignment)cGroup_2_3.eContents().get(2);
		private final RuleCall cFlagsWildIDParserRuleCall_2_3_2_0 = (RuleCall)cFlagsAssignment_2_3_2.eContents().get(0);
		private final Group cGroup_2_3_3 = (Group)cGroup_2_3.eContents().get(3);
		private final Keyword cAmpersandKeyword_2_3_3_0 = (Keyword)cGroup_2_3_3.eContents().get(0);
		private final Assignment cFlagsAssignment_2_3_3_1 = (Assignment)cGroup_2_3_3.eContents().get(1);
		private final RuleCall cFlagsWildIDParserRuleCall_2_3_3_1_0 = (RuleCall)cFlagsAssignment_2_3_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_4 = (Keyword)cGroup_2_3.eContents().get(4);
		private final Assignment cFileAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cFileWildIDParserRuleCall_2_4_0 = (RuleCall)cFileAssignment_2_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cInputSectionWildAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cKeepAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final Keyword cKeepKEEPKeyword_3_1_0 = (Keyword)cKeepAssignment_3_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cINPUT_SECTION_FLAGSKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cFlagsAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cFlagsWildIDParserRuleCall_3_3_2_0 = (RuleCall)cFlagsAssignment_3_3_2.eContents().get(0);
		private final Group cGroup_3_3_3 = (Group)cGroup_3_3.eContents().get(3);
		private final Keyword cAmpersandKeyword_3_3_3_0 = (Keyword)cGroup_3_3_3.eContents().get(0);
		private final Assignment cFlagsAssignment_3_3_3_1 = (Assignment)cGroup_3_3_3.eContents().get(1);
		private final RuleCall cFlagsWildIDParserRuleCall_3_3_3_1_0 = (RuleCall)cFlagsAssignment_3_3_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3_4 = (Keyword)cGroup_3_3.eContents().get(4);
		private final Assignment cWildFileAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cWildFileWildcardRuleParserRuleCall_3_4_0 = (RuleCall)cWildFileAssignment_3_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_5 = (Keyword)cGroup_3.eContents().get(5);
		private final Assignment cSectionsAssignment_3_6 = (Assignment)cGroup_3.eContents().get(6);
		private final RuleCall cSectionsWildcardRuleParserRuleCall_3_6_0 = (RuleCall)cSectionsAssignment_3_6.eContents().get(0);
		private final Group cGroup_3_7 = (Group)cGroup_3.eContents().get(7);
		private final Keyword cCommaKeyword_3_7_0 = (Keyword)cGroup_3_7.eContents().get(0);
		private final Assignment cSectionsAssignment_3_7_1 = (Assignment)cGroup_3_7.eContents().get(1);
		private final RuleCall cSectionsWildcardRuleParserRuleCall_3_7_1_0 = (RuleCall)cSectionsAssignment_3_7_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_8 = (Keyword)cGroup_3.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_3_9 = (Keyword)cGroup_3.eContents().get(9);
		
		//InputSection:
		//	{InputSectionFile} ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? file=WildID
		//	| {InputSectionWild} ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? wildFile=WildcardRule '('
		//	sections+=WildcardRule (','? sections+=WildcardRule)* ')'
		//	| {InputSectionFile} keep?='KEEP' '(' ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? file=WildID
		//	')'
		//	| {InputSectionWild} keep?='KEEP' '(' ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')?
		//	wildFile=WildcardRule '(' sections+=WildcardRule (','? sections+=WildcardRule)* ')' ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{InputSectionFile} ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? file=WildID | {InputSectionWild}
		//('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? wildFile=WildcardRule '(' sections+=WildcardRule
		//(','? sections+=WildcardRule)* ')' | {InputSectionFile} keep?='KEEP' '(' ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&'
		//flags+=WildID)* ')')? file=WildID ')' | {InputSectionWild} keep?='KEEP' '(' ('INPUT_SECTION_FLAGS' '(' flags+=WildID
		//('&' flags+=WildID)* ')')? wildFile=WildcardRule '(' sections+=WildcardRule (','? sections+=WildcardRule)* ')' ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{InputSectionFile} ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? file=WildID
		public Group getGroup_0() { return cGroup_0; }
		
		//{InputSectionFile}
		public Action getInputSectionFileAction_0_0() { return cInputSectionFileAction_0_0; }
		
		//('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'INPUT_SECTION_FLAGS'
		public Keyword getINPUT_SECTION_FLAGSKeyword_0_1_0() { return cINPUT_SECTION_FLAGSKeyword_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1_1() { return cLeftParenthesisKeyword_0_1_1; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_0_1_2() { return cFlagsAssignment_0_1_2; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_0_1_2_0() { return cFlagsWildIDParserRuleCall_0_1_2_0; }
		
		//('&' flags+=WildID)*
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_0_1_3_0() { return cAmpersandKeyword_0_1_3_0; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_0_1_3_1() { return cFlagsAssignment_0_1_3_1; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_0_1_3_1_0() { return cFlagsWildIDParserRuleCall_0_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_1_4() { return cRightParenthesisKeyword_0_1_4; }
		
		//file=WildID
		public Assignment getFileAssignment_0_2() { return cFileAssignment_0_2; }
		
		//WildID
		public RuleCall getFileWildIDParserRuleCall_0_2_0() { return cFileWildIDParserRuleCall_0_2_0; }
		
		//{InputSectionWild} ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? wildFile=WildcardRule '('
		//sections+=WildcardRule (','? sections+=WildcardRule)* ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//{InputSectionWild}
		public Action getInputSectionWildAction_1_0() { return cInputSectionWildAction_1_0; }
		
		//('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'INPUT_SECTION_FLAGS'
		public Keyword getINPUT_SECTION_FLAGSKeyword_1_1_0() { return cINPUT_SECTION_FLAGSKeyword_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_1_1_2() { return cFlagsAssignment_1_1_2; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_1_1_2_0() { return cFlagsWildIDParserRuleCall_1_1_2_0; }
		
		//('&' flags+=WildID)*
		public Group getGroup_1_1_3() { return cGroup_1_1_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_1_1_3_0() { return cAmpersandKeyword_1_1_3_0; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_1_1_3_1() { return cFlagsAssignment_1_1_3_1; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_1_1_3_1_0() { return cFlagsWildIDParserRuleCall_1_1_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_4() { return cRightParenthesisKeyword_1_1_4; }
		
		//wildFile=WildcardRule
		public Assignment getWildFileAssignment_1_2() { return cWildFileAssignment_1_2; }
		
		//WildcardRule
		public RuleCall getWildFileWildcardRuleParserRuleCall_1_2_0() { return cWildFileWildcardRuleParserRuleCall_1_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//sections+=WildcardRule
		public Assignment getSectionsAssignment_1_4() { return cSectionsAssignment_1_4; }
		
		//WildcardRule
		public RuleCall getSectionsWildcardRuleParserRuleCall_1_4_0() { return cSectionsWildcardRuleParserRuleCall_1_4_0; }
		
		//(','? sections+=WildcardRule)*
		public Group getGroup_1_5() { return cGroup_1_5; }
		
		//','?
		public Keyword getCommaKeyword_1_5_0() { return cCommaKeyword_1_5_0; }
		
		//sections+=WildcardRule
		public Assignment getSectionsAssignment_1_5_1() { return cSectionsAssignment_1_5_1; }
		
		//WildcardRule
		public RuleCall getSectionsWildcardRuleParserRuleCall_1_5_1_0() { return cSectionsWildcardRuleParserRuleCall_1_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6() { return cRightParenthesisKeyword_1_6; }
		
		//{InputSectionFile} keep?='KEEP' '(' ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? file=WildID ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{InputSectionFile}
		public Action getInputSectionFileAction_2_0() { return cInputSectionFileAction_2_0; }
		
		//keep?='KEEP'
		public Assignment getKeepAssignment_2_1() { return cKeepAssignment_2_1; }
		
		//'KEEP'
		public Keyword getKeepKEEPKeyword_2_1_0() { return cKeepKEEPKeyword_2_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'INPUT_SECTION_FLAGS'
		public Keyword getINPUT_SECTION_FLAGSKeyword_2_3_0() { return cINPUT_SECTION_FLAGSKeyword_2_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_3_1() { return cLeftParenthesisKeyword_2_3_1; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_2_3_2() { return cFlagsAssignment_2_3_2; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_2_3_2_0() { return cFlagsWildIDParserRuleCall_2_3_2_0; }
		
		//('&' flags+=WildID)*
		public Group getGroup_2_3_3() { return cGroup_2_3_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_2_3_3_0() { return cAmpersandKeyword_2_3_3_0; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_2_3_3_1() { return cFlagsAssignment_2_3_3_1; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_2_3_3_1_0() { return cFlagsWildIDParserRuleCall_2_3_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3_4() { return cRightParenthesisKeyword_2_3_4; }
		
		//file=WildID
		public Assignment getFileAssignment_2_4() { return cFileAssignment_2_4; }
		
		//WildID
		public RuleCall getFileWildIDParserRuleCall_2_4_0() { return cFileWildIDParserRuleCall_2_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }
		
		//{InputSectionWild} keep?='KEEP' '(' ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')?
		//wildFile=WildcardRule '(' sections+=WildcardRule (','? sections+=WildcardRule)* ')' ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{InputSectionWild}
		public Action getInputSectionWildAction_3_0() { return cInputSectionWildAction_3_0; }
		
		//keep?='KEEP'
		public Assignment getKeepAssignment_3_1() { return cKeepAssignment_3_1; }
		
		//'KEEP'
		public Keyword getKeepKEEPKeyword_3_1_0() { return cKeepKEEPKeyword_3_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')?
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//'INPUT_SECTION_FLAGS'
		public Keyword getINPUT_SECTION_FLAGSKeyword_3_3_0() { return cINPUT_SECTION_FLAGSKeyword_3_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_3_1() { return cLeftParenthesisKeyword_3_3_1; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_3_3_2() { return cFlagsAssignment_3_3_2; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_3_3_2_0() { return cFlagsWildIDParserRuleCall_3_3_2_0; }
		
		//('&' flags+=WildID)*
		public Group getGroup_3_3_3() { return cGroup_3_3_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_3_3_0() { return cAmpersandKeyword_3_3_3_0; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_3_3_3_1() { return cFlagsAssignment_3_3_3_1; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_3_3_3_1_0() { return cFlagsWildIDParserRuleCall_3_3_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3_4() { return cRightParenthesisKeyword_3_3_4; }
		
		//wildFile=WildcardRule
		public Assignment getWildFileAssignment_3_4() { return cWildFileAssignment_3_4; }
		
		//WildcardRule
		public RuleCall getWildFileWildcardRuleParserRuleCall_3_4_0() { return cWildFileWildcardRuleParserRuleCall_3_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_5() { return cLeftParenthesisKeyword_3_5; }
		
		//sections+=WildcardRule
		public Assignment getSectionsAssignment_3_6() { return cSectionsAssignment_3_6; }
		
		//WildcardRule
		public RuleCall getSectionsWildcardRuleParserRuleCall_3_6_0() { return cSectionsWildcardRuleParserRuleCall_3_6_0; }
		
		//(','? sections+=WildcardRule)*
		public Group getGroup_3_7() { return cGroup_3_7; }
		
		//','?
		public Keyword getCommaKeyword_3_7_0() { return cCommaKeyword_3_7_0; }
		
		//sections+=WildcardRule
		public Assignment getSectionsAssignment_3_7_1() { return cSectionsAssignment_3_7_1; }
		
		//WildcardRule
		public RuleCall getSectionsWildcardRuleParserRuleCall_3_7_1_0() { return cSectionsWildcardRuleParserRuleCall_3_7_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_8() { return cRightParenthesisKeyword_3_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_9() { return cRightParenthesisKeyword_3_9; }
	}
	public class InputSectionFlagsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.InputSectionFlags");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cINPUT_SECTION_FLAGSKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFlagsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFlagsWildIDParserRuleCall_2_0 = (RuleCall)cFlagsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAmpersandKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFlagsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFlagsWildIDParserRuleCall_3_1_0 = (RuleCall)cFlagsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// TODO: Need to handle inverted flags ('!')
		//InputSectionFlags:
		//	'INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')'
		public Group getGroup() { return cGroup; }
		
		//'INPUT_SECTION_FLAGS'
		public Keyword getINPUT_SECTION_FLAGSKeyword_0() { return cINPUT_SECTION_FLAGSKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_2() { return cFlagsAssignment_2; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_2_0() { return cFlagsWildIDParserRuleCall_2_0; }
		
		//('&' flags+=WildID)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_3_0() { return cAmpersandKeyword_3_0; }
		
		//flags+=WildID
		public Assignment getFlagsAssignment_3_1() { return cFlagsAssignment_3_1; }
		
		//WildID
		public RuleCall getFlagsWildIDParserRuleCall_3_1_0() { return cFlagsWildIDParserRuleCall_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class WildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.Wildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWildcardAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cExcludesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExcludesValidIDParserRuleCall_2_0 = (RuleCall)cExcludesAssignment_2.eContents().get(0);
		
		//// This is a dummy rule that serves solely to define the model element
		//Wildcard:
		//	{Wildcard} name=ValidID excludes+=ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Wildcard} name=ValidID excludes+=ValidID
		public Group getGroup() { return cGroup; }
		
		//{Wildcard}
		public Action getWildcardAction_0() { return cWildcardAction_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//excludes+=ValidID
		public Assignment getExcludesAssignment_2() { return cExcludesAssignment_2; }
		
		//ValidID
		public RuleCall getExcludesValidIDParserRuleCall_2_0() { return cExcludesValidIDParserRuleCall_2_0; }
	}
	public class WildcardRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.WildcardRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cWildcardSortNoneAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cNameWildIDParserRuleCall_0_1_0 = (RuleCall)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cWildcardSortNoneAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEXCLUDE_FILEKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExcludesAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExcludesWildIDParserRuleCall_1_3_0 = (RuleCall)cExcludesAssignment_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cNameAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cNameWildIDParserRuleCall_1_5_0 = (RuleCall)cNameAssignment_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cWildcardSortNameAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cSORT_BY_NAMEParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNameAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNameWildIDParserRuleCall_2_3_0 = (RuleCall)cNameAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cWildcardSortAlignAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cSORT_BY_ALIGNMENTKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cNameAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cNameWildIDParserRuleCall_3_3_0 = (RuleCall)cNameAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cWildcardSortNoneAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cSORT_NONEKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cNameAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cNameWildIDParserRuleCall_4_3_0 = (RuleCall)cNameAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cWildcardSortNameAlignAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final RuleCall cSORT_BY_NAMEParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cSORT_BY_ALIGNMENTKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Assignment cNameAssignment_5_5 = (Assignment)cGroup_5.eContents().get(5);
		private final RuleCall cNameWildIDParserRuleCall_5_5_0 = (RuleCall)cNameAssignment_5_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_6 = (Keyword)cGroup_5.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_5_7 = (Keyword)cGroup_5.eContents().get(7);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cWildcardSortNameAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final RuleCall cSORT_BY_NAMEParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final RuleCall cSORT_BY_NAMEParserRuleCall_6_3 = (RuleCall)cGroup_6.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Assignment cNameAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cNameWildIDParserRuleCall_6_5_0 = (RuleCall)cNameAssignment_6_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_6 = (Keyword)cGroup_6.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_6_7 = (Keyword)cGroup_6.eContents().get(7);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Action cWildcardSortAlignNameAction_7_0 = (Action)cGroup_7.eContents().get(0);
		private final Keyword cSORT_BY_ALIGNMENTKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final RuleCall cSORT_BY_NAMEParserRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Assignment cNameAssignment_7_5 = (Assignment)cGroup_7.eContents().get(5);
		private final RuleCall cNameWildIDParserRuleCall_7_5_0 = (RuleCall)cNameAssignment_7_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_6 = (Keyword)cGroup_7.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7_7 = (Keyword)cGroup_7.eContents().get(7);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Action cWildcardSortAlignAction_8_0 = (Action)cGroup_8.eContents().get(0);
		private final Keyword cSORT_BY_ALIGNMENTKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Keyword cSORT_BY_ALIGNMENTKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Assignment cNameAssignment_8_5 = (Assignment)cGroup_8.eContents().get(5);
		private final RuleCall cNameWildIDParserRuleCall_8_5_0 = (RuleCall)cNameAssignment_8_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_6 = (Keyword)cGroup_8.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_8_7 = (Keyword)cGroup_8.eContents().get(7);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cWildcardSortNameAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final RuleCall cSORT_BY_NAMEParserRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cEXCLUDE_FILEKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_9_4 = (Keyword)cGroup_9.eContents().get(4);
		private final Assignment cExcludesAssignment_9_5 = (Assignment)cGroup_9.eContents().get(5);
		private final RuleCall cExcludesWildIDParserRuleCall_9_5_0 = (RuleCall)cExcludesAssignment_9_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_6 = (Keyword)cGroup_9.eContents().get(6);
		private final Assignment cNameAssignment_9_7 = (Assignment)cGroup_9.eContents().get(7);
		private final RuleCall cNameWildIDParserRuleCall_9_7_0 = (RuleCall)cNameAssignment_9_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_8 = (Keyword)cGroup_9.eContents().get(8);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cWildcardSortInitPriorityAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Keyword cSORT_BY_INIT_PRIORITYKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final Assignment cNameAssignment_10_3 = (Assignment)cGroup_10.eContents().get(3);
		private final RuleCall cNameWildIDParserRuleCall_10_3_0 = (RuleCall)cNameAssignment_10_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_4 = (Keyword)cGroup_10.eContents().get(4);
		
		//WildcardRule Wildcard:
		//	{WildcardSortNone} name=WildID
		//	| {WildcardSortNone} 'EXCLUDE_FILE' '(' excludes+=WildID+ ')' name=WildID
		//	| {WildcardSortName} SORT_BY_NAME '(' name=WildID ')'
		//	| {WildcardSortAlign} 'SORT_BY_ALIGNMENT' '(' name=WildID ')'
		//	| {WildcardSortNone} 'SORT_NONE' '(' name=WildID ')'
		//	| {WildcardSortNameAlign} SORT_BY_NAME '(' 'SORT_BY_ALIGNMENT' '(' name=WildID ')' ')'
		//	| {WildcardSortName} SORT_BY_NAME '(' SORT_BY_NAME '(' name=WildID ')' ')'
		//	| {WildcardSortAlignName} 'SORT_BY_ALIGNMENT' '(' SORT_BY_NAME '(' name=WildID ')' ')'
		//	| {WildcardSortAlign} 'SORT_BY_ALIGNMENT' '(' 'SORT_BY_ALIGNMENT' '(' name=WildID ')' ')'
		//	| {WildcardSortName} SORT_BY_NAME '(' 'EXCLUDE_FILE' '(' excludes+=WildID+ ')' name=WildID ')'
		//	| {WildcardSortInitPriority} 'SORT_BY_INIT_PRIORITY' '(' name=WildID ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{WildcardSortNone} name=WildID | {WildcardSortNone} 'EXCLUDE_FILE' '(' excludes+=WildID+ ')' name=WildID |
		//{WildcardSortName} SORT_BY_NAME '(' name=WildID ')' | {WildcardSortAlign} 'SORT_BY_ALIGNMENT' '(' name=WildID ')' |
		//{WildcardSortNone} 'SORT_NONE' '(' name=WildID ')' | {WildcardSortNameAlign} SORT_BY_NAME '(' 'SORT_BY_ALIGNMENT' '('
		//name=WildID ')' ')' | {WildcardSortName} SORT_BY_NAME '(' SORT_BY_NAME '(' name=WildID ')' ')' |
		//{WildcardSortAlignName} 'SORT_BY_ALIGNMENT' '(' SORT_BY_NAME '(' name=WildID ')' ')' | {WildcardSortAlign}
		//'SORT_BY_ALIGNMENT' '(' 'SORT_BY_ALIGNMENT' '(' name=WildID ')' ')' | {WildcardSortName} SORT_BY_NAME '('
		//'EXCLUDE_FILE' '(' excludes+=WildID+ ')' name=WildID ')' | {WildcardSortInitPriority} 'SORT_BY_INIT_PRIORITY' '('
		//name=WildID ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{WildcardSortNone} name=WildID
		public Group getGroup_0() { return cGroup_0; }
		
		//{WildcardSortNone}
		public Action getWildcardSortNoneAction_0_0() { return cWildcardSortNoneAction_0_0; }
		
		//name=WildID
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_0_1_0() { return cNameWildIDParserRuleCall_0_1_0; }
		
		//{WildcardSortNone} 'EXCLUDE_FILE' '(' excludes+=WildID+ ')' name=WildID
		public Group getGroup_1() { return cGroup_1; }
		
		//{WildcardSortNone}
		public Action getWildcardSortNoneAction_1_0() { return cWildcardSortNoneAction_1_0; }
		
		//'EXCLUDE_FILE'
		public Keyword getEXCLUDE_FILEKeyword_1_1() { return cEXCLUDE_FILEKeyword_1_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_2() { return cLeftParenthesisKeyword_1_2; }
		
		//excludes+=WildID+
		public Assignment getExcludesAssignment_1_3() { return cExcludesAssignment_1_3; }
		
		//WildID
		public RuleCall getExcludesWildIDParserRuleCall_1_3_0() { return cExcludesWildIDParserRuleCall_1_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_4() { return cRightParenthesisKeyword_1_4; }
		
		//name=WildID
		public Assignment getNameAssignment_1_5() { return cNameAssignment_1_5; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_1_5_0() { return cNameWildIDParserRuleCall_1_5_0; }
		
		//{WildcardSortName} SORT_BY_NAME '(' name=WildID ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//{WildcardSortName}
		public Action getWildcardSortNameAction_2_0() { return cWildcardSortNameAction_2_0; }
		
		//SORT_BY_NAME
		public RuleCall getSORT_BY_NAMEParserRuleCall_2_1() { return cSORT_BY_NAMEParserRuleCall_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_2() { return cLeftParenthesisKeyword_2_2; }
		
		//name=WildID
		public Assignment getNameAssignment_2_3() { return cNameAssignment_2_3; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_2_3_0() { return cNameWildIDParserRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//{WildcardSortAlign} 'SORT_BY_ALIGNMENT' '(' name=WildID ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//{WildcardSortAlign}
		public Action getWildcardSortAlignAction_3_0() { return cWildcardSortAlignAction_3_0; }
		
		//'SORT_BY_ALIGNMENT'
		public Keyword getSORT_BY_ALIGNMENTKeyword_3_1() { return cSORT_BY_ALIGNMENTKeyword_3_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_2() { return cLeftParenthesisKeyword_3_2; }
		
		//name=WildID
		public Assignment getNameAssignment_3_3() { return cNameAssignment_3_3; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_3_3_0() { return cNameWildIDParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//{WildcardSortNone} 'SORT_NONE' '(' name=WildID ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//{WildcardSortNone}
		public Action getWildcardSortNoneAction_4_0() { return cWildcardSortNoneAction_4_0; }
		
		//'SORT_NONE'
		public Keyword getSORT_NONEKeyword_4_1() { return cSORT_NONEKeyword_4_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_2() { return cLeftParenthesisKeyword_4_2; }
		
		//name=WildID
		public Assignment getNameAssignment_4_3() { return cNameAssignment_4_3; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_4_3_0() { return cNameWildIDParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//{WildcardSortNameAlign} SORT_BY_NAME '(' 'SORT_BY_ALIGNMENT' '(' name=WildID ')' ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//{WildcardSortNameAlign}
		public Action getWildcardSortNameAlignAction_5_0() { return cWildcardSortNameAlignAction_5_0; }
		
		//SORT_BY_NAME
		public RuleCall getSORT_BY_NAMEParserRuleCall_5_1() { return cSORT_BY_NAMEParserRuleCall_5_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_2() { return cLeftParenthesisKeyword_5_2; }
		
		//'SORT_BY_ALIGNMENT'
		public Keyword getSORT_BY_ALIGNMENTKeyword_5_3() { return cSORT_BY_ALIGNMENTKeyword_5_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_4() { return cLeftParenthesisKeyword_5_4; }
		
		//name=WildID
		public Assignment getNameAssignment_5_5() { return cNameAssignment_5_5; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_5_5_0() { return cNameWildIDParserRuleCall_5_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_6() { return cRightParenthesisKeyword_5_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_7() { return cRightParenthesisKeyword_5_7; }
		
		//{WildcardSortName} SORT_BY_NAME '(' SORT_BY_NAME '(' name=WildID ')' ')'
		public Group getGroup_6() { return cGroup_6; }
		
		//{WildcardSortName}
		public Action getWildcardSortNameAction_6_0() { return cWildcardSortNameAction_6_0; }
		
		//SORT_BY_NAME
		public RuleCall getSORT_BY_NAMEParserRuleCall_6_1() { return cSORT_BY_NAMEParserRuleCall_6_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_2() { return cLeftParenthesisKeyword_6_2; }
		
		//SORT_BY_NAME
		public RuleCall getSORT_BY_NAMEParserRuleCall_6_3() { return cSORT_BY_NAMEParserRuleCall_6_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_4() { return cLeftParenthesisKeyword_6_4; }
		
		//name=WildID
		public Assignment getNameAssignment_6_5() { return cNameAssignment_6_5; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_6_5_0() { return cNameWildIDParserRuleCall_6_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_6() { return cRightParenthesisKeyword_6_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_7() { return cRightParenthesisKeyword_6_7; }
		
		//{WildcardSortAlignName} 'SORT_BY_ALIGNMENT' '(' SORT_BY_NAME '(' name=WildID ')' ')'
		public Group getGroup_7() { return cGroup_7; }
		
		//{WildcardSortAlignName}
		public Action getWildcardSortAlignNameAction_7_0() { return cWildcardSortAlignNameAction_7_0; }
		
		//'SORT_BY_ALIGNMENT'
		public Keyword getSORT_BY_ALIGNMENTKeyword_7_1() { return cSORT_BY_ALIGNMENTKeyword_7_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2() { return cLeftParenthesisKeyword_7_2; }
		
		//SORT_BY_NAME
		public RuleCall getSORT_BY_NAMEParserRuleCall_7_3() { return cSORT_BY_NAMEParserRuleCall_7_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_4() { return cLeftParenthesisKeyword_7_4; }
		
		//name=WildID
		public Assignment getNameAssignment_7_5() { return cNameAssignment_7_5; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_7_5_0() { return cNameWildIDParserRuleCall_7_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_6() { return cRightParenthesisKeyword_7_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_7() { return cRightParenthesisKeyword_7_7; }
		
		//{WildcardSortAlign} 'SORT_BY_ALIGNMENT' '(' 'SORT_BY_ALIGNMENT' '(' name=WildID ')' ')'
		public Group getGroup_8() { return cGroup_8; }
		
		//{WildcardSortAlign}
		public Action getWildcardSortAlignAction_8_0() { return cWildcardSortAlignAction_8_0; }
		
		//'SORT_BY_ALIGNMENT'
		public Keyword getSORT_BY_ALIGNMENTKeyword_8_1() { return cSORT_BY_ALIGNMENTKeyword_8_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_2() { return cLeftParenthesisKeyword_8_2; }
		
		//'SORT_BY_ALIGNMENT'
		public Keyword getSORT_BY_ALIGNMENTKeyword_8_3() { return cSORT_BY_ALIGNMENTKeyword_8_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_4() { return cLeftParenthesisKeyword_8_4; }
		
		//name=WildID
		public Assignment getNameAssignment_8_5() { return cNameAssignment_8_5; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_8_5_0() { return cNameWildIDParserRuleCall_8_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_6() { return cRightParenthesisKeyword_8_6; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_7() { return cRightParenthesisKeyword_8_7; }
		
		//{WildcardSortName} SORT_BY_NAME '(' 'EXCLUDE_FILE' '(' excludes+=WildID+ ')' name=WildID ')'
		public Group getGroup_9() { return cGroup_9; }
		
		//{WildcardSortName}
		public Action getWildcardSortNameAction_9_0() { return cWildcardSortNameAction_9_0; }
		
		//SORT_BY_NAME
		public RuleCall getSORT_BY_NAMEParserRuleCall_9_1() { return cSORT_BY_NAMEParserRuleCall_9_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_2() { return cLeftParenthesisKeyword_9_2; }
		
		//'EXCLUDE_FILE'
		public Keyword getEXCLUDE_FILEKeyword_9_3() { return cEXCLUDE_FILEKeyword_9_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_9_4() { return cLeftParenthesisKeyword_9_4; }
		
		//excludes+=WildID+
		public Assignment getExcludesAssignment_9_5() { return cExcludesAssignment_9_5; }
		
		//WildID
		public RuleCall getExcludesWildIDParserRuleCall_9_5_0() { return cExcludesWildIDParserRuleCall_9_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_6() { return cRightParenthesisKeyword_9_6; }
		
		//name=WildID
		public Assignment getNameAssignment_9_7() { return cNameAssignment_9_7; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_9_7_0() { return cNameWildIDParserRuleCall_9_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9_8() { return cRightParenthesisKeyword_9_8; }
		
		//{WildcardSortInitPriority} 'SORT_BY_INIT_PRIORITY' '(' name=WildID ')'
		public Group getGroup_10() { return cGroup_10; }
		
		//{WildcardSortInitPriority}
		public Action getWildcardSortInitPriorityAction_10_0() { return cWildcardSortInitPriorityAction_10_0; }
		
		//'SORT_BY_INIT_PRIORITY'
		public Keyword getSORT_BY_INIT_PRIORITYKeyword_10_1() { return cSORT_BY_INIT_PRIORITYKeyword_10_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_10_2() { return cLeftParenthesisKeyword_10_2; }
		
		//name=WildID
		public Assignment getNameAssignment_10_3() { return cNameAssignment_10_3; }
		
		//WildID
		public RuleCall getNameWildIDParserRuleCall_10_3_0() { return cNameWildIDParserRuleCall_10_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10_4() { return cRightParenthesisKeyword_10_4; }
	}
	public class SORT_BY_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.SORT_BY_NAME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSORTKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSORT_BY_NAMEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SORT_BY_NAME:
		//	'SORT' | 'SORT_BY_NAME';
		@Override public ParserRule getRule() { return rule; }
		
		//'SORT' | 'SORT_BY_NAME'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'SORT'
		public Keyword getSORTKeyword_0() { return cSORTKeyword_0; }
		
		//'SORT_BY_NAME'
		public Keyword getSORT_BY_NAMEKeyword_1() { return cSORT_BY_NAMEKeyword_1; }
	}
	public class MemoryCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.MemoryCommand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMEMORYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Action cMemoryCommandAction_2 = (Action)cGroup.eContents().get(2);
		private final Assignment cMemoriesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMemoriesMemoryParserRuleCall_3_0 = (RuleCall)cMemoriesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////
		////ExcludeNameList:
		////	{SectionNameList} names+=WildID (','? names+=WildID)*;
		//MemoryCommand:
		//	'MEMORY' '{' {MemoryCommand} memories+=Memory* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'MEMORY' '{' {MemoryCommand} memories+=Memory* '}'
		public Group getGroup() { return cGroup; }
		
		//'MEMORY'
		public Keyword getMEMORYKeyword_0() { return cMEMORYKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//{MemoryCommand}
		public Action getMemoryCommandAction_2() { return cMemoryCommandAction_2; }
		
		//memories+=Memory*
		public Assignment getMemoriesAssignment_3() { return cMemoriesAssignment_3; }
		
		//Memory
		public RuleCall getMemoriesMemoryParserRuleCall_3_0() { return cMemoriesMemoryParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MemoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.Memory");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameMemoryNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAttrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrMemoryAttributeParserRuleCall_1_0 = (RuleCall)cAttrAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cORIGINKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cOrgKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cOKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOriginAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOriginLExpressionParserRuleCall_5_0 = (RuleCall)cOriginAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Keyword cLENGTHKeyword_7_0 = (Keyword)cAlternatives_7.eContents().get(0);
		private final Keyword cLenKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		private final Keyword cLKeyword_7_2 = (Keyword)cAlternatives_7.eContents().get(2);
		private final Keyword cEqualsSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cLengthAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cLengthLExpressionParserRuleCall_9_0 = (RuleCall)cLengthAssignment_9.eContents().get(0);
		
		//Memory:
		//	name=MemoryName attr=MemoryAttribute? ':' ('ORIGIN' | 'org' | 'o') '=' origin=LExpression ',' ('LENGTH' | 'len' | 'l')
		//	'=' length=LExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=MemoryName attr=MemoryAttribute? ':' ('ORIGIN' | 'org' | 'o') '=' origin=LExpression ',' ('LENGTH' | 'len' | 'l')
		//'=' length=LExpression
		public Group getGroup() { return cGroup; }
		
		//name=MemoryName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//MemoryName
		public RuleCall getNameMemoryNameParserRuleCall_0_0() { return cNameMemoryNameParserRuleCall_0_0; }
		
		//attr=MemoryAttribute?
		public Assignment getAttrAssignment_1() { return cAttrAssignment_1; }
		
		//MemoryAttribute
		public RuleCall getAttrMemoryAttributeParserRuleCall_1_0() { return cAttrMemoryAttributeParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//('ORIGIN' | 'org' | 'o')
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'ORIGIN'
		public Keyword getORIGINKeyword_3_0() { return cORIGINKeyword_3_0; }
		
		//'org'
		public Keyword getOrgKeyword_3_1() { return cOrgKeyword_3_1; }
		
		//'o'
		public Keyword getOKeyword_3_2() { return cOKeyword_3_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }
		
		//origin=LExpression
		public Assignment getOriginAssignment_5() { return cOriginAssignment_5; }
		
		//LExpression
		public RuleCall getOriginLExpressionParserRuleCall_5_0() { return cOriginLExpressionParserRuleCall_5_0; }
		
		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }
		
		//('LENGTH' | 'len' | 'l')
		public Alternatives getAlternatives_7() { return cAlternatives_7; }
		
		//'LENGTH'
		public Keyword getLENGTHKeyword_7_0() { return cLENGTHKeyword_7_0; }
		
		//'len'
		public Keyword getLenKeyword_7_1() { return cLenKeyword_7_1; }
		
		//'l'
		public Keyword getLKeyword_7_2() { return cLKeyword_7_2; }
		
		//'='
		public Keyword getEqualsSignKeyword_8() { return cEqualsSignKeyword_8; }
		
		//length=LExpression
		public Assignment getLengthAssignment_9() { return cLengthAssignment_9; }
		
		//LExpression
		public RuleCall getLengthLExpressionParserRuleCall_9_0() { return cLengthLExpressionParserRuleCall_9_0; }
	}
	public class MemoryNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.MemoryName");
		private final RuleCall cValidIDParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MemoryName:
		//	ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall() { return cValidIDParserRuleCall; }
	}
	public class MemoryAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.MemoryAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cWildIDParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MemoryAttribute:
		//	'(' ('!'? WildID)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ('!'? WildID)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//('!'? WildID)+
		public Group getGroup_1() { return cGroup_1; }
		
		//'!'?
		public Keyword getExclamationMarkKeyword_1_0() { return cExclamationMarkKeyword_1_0; }
		
		//WildID
		public RuleCall getWildIDParserRuleCall_1_1() { return cWildIDParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LExpression");
		private final RuleCall cLTernaryParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * GNU LD Operator precedence: https://sourceware.org/binutils/docs/ld/Operators.html#Operators
		// * Note that grammar rules from LExpression start at lowest precedence and end at highest
		// * / LExpression:
		//	LTernary;
		@Override public ParserRule getRule() { return rule; }
		
		//LTernary
		public RuleCall getLTernaryParserRuleCall() { return cLTernaryParserRuleCall; }
	}
	public class LTernaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LTernary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLTernaryOperationConditionAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Assignment cIfPartAssignment_1_0_0_2 = (Assignment)cGroup_1_0_0.eContents().get(2);
		private final RuleCall cIfPartLOrExpressionParserRuleCall_1_0_0_2_0 = (RuleCall)cIfPartAssignment_1_0_0_2.eContents().get(0);
		private final Keyword cColonKeyword_1_0_0_3 = (Keyword)cGroup_1_0_0.eContents().get(3);
		private final Assignment cThenPartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cThenPartLOrExpressionParserRuleCall_1_1_0 = (RuleCall)cThenPartAssignment_1_1.eContents().get(0);
		
		//LTernary LExpression:
		//	LOrExpression (=> ({LTernaryOperation.condition=current} '?' ifPart=LOrExpression ':') thenPart=LOrExpression)?
		@Override public ParserRule getRule() { return rule; }
		
		//LOrExpression (=> ({LTernaryOperation.condition=current} '?' ifPart=LOrExpression ':') thenPart=LOrExpression)?
		public Group getGroup() { return cGroup; }
		
		//LOrExpression
		public RuleCall getLOrExpressionParserRuleCall_0() { return cLOrExpressionParserRuleCall_0; }
		
		//(=> ({LTernaryOperation.condition=current} '?' ifPart=LOrExpression ':') thenPart=LOrExpression)?
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LTernaryOperation.condition=current} '?' ifPart=LOrExpression ':')
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LTernaryOperation.condition=current} '?' ifPart=LOrExpression ':')
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LTernaryOperation.condition=current}
		public Action getLTernaryOperationConditionAction_1_0_0_0() { return cLTernaryOperationConditionAction_1_0_0_0; }
		
		//'?'
		public Keyword getQuestionMarkKeyword_1_0_0_1() { return cQuestionMarkKeyword_1_0_0_1; }
		
		//ifPart=LOrExpression
		public Assignment getIfPartAssignment_1_0_0_2() { return cIfPartAssignment_1_0_0_2; }
		
		//LOrExpression
		public RuleCall getIfPartLOrExpressionParserRuleCall_1_0_0_2_0() { return cIfPartLOrExpressionParserRuleCall_1_0_0_2_0; }
		
		//':'
		public Keyword getColonKeyword_1_0_0_3() { return cColonKeyword_1_0_0_3; }
		
		//thenPart=LOrExpression
		public Assignment getThenPartAssignment_1_1() { return cThenPartAssignment_1_1; }
		
		//LOrExpression
		public RuleCall getThenPartLOrExpressionParserRuleCall_1_1_0() { return cThenPartLOrExpressionParserRuleCall_1_1_0; }
	}
	public class LOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LOrExpression LExpression:
		//	LAndExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=LAndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LAndExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=LAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//LAndExpression
		public RuleCall getLAndExpressionParserRuleCall_0() { return cLAndExpressionParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=LAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpOr)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpOr)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpOr
		public RuleCall getFeatureOpOrParserRuleCall_1_0_0_1_0() { return cFeatureOpOrParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LAndExpression
		public RuleCall getRightOperandLAndExpressionParserRuleCall_1_1_0() { return cRightOperandLAndExpressionParserRuleCall_1_1_0; }
	}
	public class OpOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpOr");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpOr:
		//	'||';
		@Override public ParserRule getRule() { return rule; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}
	public class LAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLBitwiseOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLBitwiseOrExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LAndExpression LExpression:
		//	LBitwiseOrExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=LBitwiseOrExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LBitwiseOrExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=LBitwiseOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//LBitwiseOrExpression
		public RuleCall getLBitwiseOrExpressionParserRuleCall_0() { return cLBitwiseOrExpressionParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=LBitwiseOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpAnd)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpAnd
		public RuleCall getFeatureOpAndParserRuleCall_1_0_0_1_0() { return cFeatureOpAndParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LBitwiseOrExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LBitwiseOrExpression
		public RuleCall getRightOperandLBitwiseOrExpressionParserRuleCall_1_1_0() { return cRightOperandLBitwiseOrExpressionParserRuleCall_1_1_0; }
	}
	public class OpAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpAnd");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpAnd:
		//	'&&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}
	public class LBitwiseOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LBitwiseOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLBitwiseAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpBitwiseOrParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLBitwiseAndExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LBitwiseOrExpression LExpression:
		//	LBitwiseAndExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseOr)
		//	rightOperand=LBitwiseAndExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LBitwiseAndExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseOr)
		//rightOperand=LBitwiseAndExpression)*
		public Group getGroup() { return cGroup; }
		
		//LBitwiseAndExpression
		public RuleCall getLBitwiseAndExpressionParserRuleCall_0() { return cLBitwiseAndExpressionParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseOr) rightOperand=LBitwiseAndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseOr)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpBitwiseOr)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpBitwiseOr
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpBitwiseOr
		public RuleCall getFeatureOpBitwiseOrParserRuleCall_1_0_0_1_0() { return cFeatureOpBitwiseOrParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LBitwiseAndExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LBitwiseAndExpression
		public RuleCall getRightOperandLBitwiseAndExpressionParserRuleCall_1_1_0() { return cRightOperandLBitwiseAndExpressionParserRuleCall_1_1_0; }
	}
	public class OpBitwiseOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpBitwiseOr");
		private final Keyword cVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//OpBitwiseOr:
		//	'|';
		@Override public ParserRule getRule() { return rule; }
		
		//'|'
		public Keyword getVerticalLineKeyword() { return cVerticalLineKeyword; }
	}
	public class LBitwiseAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LBitwiseAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLEqualityExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpBitwiseAndParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLEqualityExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LBitwiseAndExpression LExpression:
		//	LEqualityExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseAnd)
		//	rightOperand=LEqualityExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LEqualityExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseAnd) rightOperand=LEqualityExpression)*
		public Group getGroup() { return cGroup; }
		
		//LEqualityExpression
		public RuleCall getLEqualityExpressionParserRuleCall_0() { return cLEqualityExpressionParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseAnd) rightOperand=LEqualityExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseAnd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpBitwiseAnd)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpBitwiseAnd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpBitwiseAnd
		public RuleCall getFeatureOpBitwiseAndParserRuleCall_1_0_0_1_0() { return cFeatureOpBitwiseAndParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LEqualityExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LEqualityExpression
		public RuleCall getRightOperandLEqualityExpressionParserRuleCall_1_1_0() { return cRightOperandLEqualityExpressionParserRuleCall_1_1_0; }
	}
	public class OpBitwiseAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpBitwiseAnd");
		private final Keyword cAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//OpBitwiseAnd:
		//	'&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&'
		public Keyword getAmpersandKeyword() { return cAmpersandKeyword; }
	}
	public class LEqualityExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LEqualityExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLRelationalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpEqualityParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLRelationalExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LEqualityExpression LExpression:
		//	LRelationalExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpEquality)
		//	rightOperand=LRelationalExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LRelationalExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpEquality)
		//rightOperand=LRelationalExpression)*
		public Group getGroup() { return cGroup; }
		
		//LRelationalExpression
		public RuleCall getLRelationalExpressionParserRuleCall_0() { return cLRelationalExpressionParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpEquality) rightOperand=LRelationalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpEquality)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpEquality)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpEquality
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpEquality
		public RuleCall getFeatureOpEqualityParserRuleCall_1_0_0_1_0() { return cFeatureOpEqualityParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LRelationalExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LRelationalExpression
		public RuleCall getRightOperandLRelationalExpressionParserRuleCall_1_1_0() { return cRightOperandLRelationalExpressionParserRuleCall_1_1_0; }
	}
	public class OpEqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpEquality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpEquality:
		//	'==' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}
	public class LRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLOtherOperatorExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpCompareParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLOtherOperatorExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LRelationalExpression LExpression:
		//	LOtherOperatorExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpCompare)
		//	rightOperand=LOtherOperatorExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LOtherOperatorExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpCompare)
		//rightOperand=LOtherOperatorExpression)*
		public Group getGroup() { return cGroup; }
		
		//LOtherOperatorExpression
		public RuleCall getLOtherOperatorExpressionParserRuleCall_0() { return cLOtherOperatorExpressionParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=LOtherOperatorExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpCompare)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpCompare)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpCompare
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpCompare
		public RuleCall getFeatureOpCompareParserRuleCall_1_0_0_1_0() { return cFeatureOpCompareParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LOtherOperatorExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LOtherOperatorExpression
		public RuleCall getRightOperandLOtherOperatorExpressionParserRuleCall_1_1_0() { return cRightOperandLOtherOperatorExpressionParserRuleCall_1_1_0; }
	}
	public class OpCompareElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpCompare");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpCompare:
		//	'>=' | '<' '=' | '>' | '<';
		@Override public ParserRule getRule() { return rule; }
		
		//'>=' | '<' '=' | '>' | '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0() { return cGreaterThanSignEqualsSignKeyword_0; }
		
		//'<' '='
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
	}
	public class LOtherOperatorExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LOtherOperatorExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpOtherParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLAdditiveExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LOtherOperatorExpression LExpression:
		//	LAdditiveExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=LAdditiveExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LAdditiveExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=LAdditiveExpression)*
		public Group getGroup() { return cGroup; }
		
		//LAdditiveExpression
		public RuleCall getLAdditiveExpressionParserRuleCall_0() { return cLAdditiveExpressionParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=LAdditiveExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpOther)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpOther)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpOther
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpOther
		public RuleCall getFeatureOpOtherParserRuleCall_1_0_0_1_0() { return cFeatureOpOtherParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LAdditiveExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LAdditiveExpression
		public RuleCall getRightOperandLAdditiveExpressionParserRuleCall_1_1_0() { return cRightOperandLAdditiveExpressionParserRuleCall_1_1_0; }
	}
	public class OpOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//OpOther:
		//	'>' => '>' | '<' => '<';
		@Override public ParserRule getRule() { return rule; }
		
		//'>' => '>' | '<' => '<'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'>' => '>'
		public Group getGroup_0() { return cGroup_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_0() { return cGreaterThanSignKeyword_0_0; }
		
		//=> '>'
		public Keyword getGreaterThanSignKeyword_0_1() { return cGreaterThanSignKeyword_0_1; }
		
		//'<' => '<'
		public Group getGroup_1() { return cGroup_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1_0() { return cLessThanSignKeyword_1_0; }
		
		//=> '<'
		public Keyword getLessThanSignKeyword_1_1() { return cLessThanSignKeyword_1_1; }
	}
	public class LAdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LAdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpAddParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLMultiplicativeExpressionParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LAdditiveExpression LExpression:
		//	LMultiplicativeExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpAdd)
		//	rightOperand=LMultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }
		
		//LMultiplicativeExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpAdd)
		//rightOperand=LMultiplicativeExpression)*
		public Group getGroup() { return cGroup; }
		
		//LMultiplicativeExpression
		public RuleCall getLMultiplicativeExpressionParserRuleCall_0() { return cLMultiplicativeExpressionParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpAdd) rightOperand=LMultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpAdd)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpAdd)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpAdd
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpAdd
		public RuleCall getFeatureOpAddParserRuleCall_1_0_0_1_0() { return cFeatureOpAddParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LMultiplicativeExpression
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LMultiplicativeExpression
		public RuleCall getRightOperandLMultiplicativeExpressionParserRuleCall_1_1_0() { return cRightOperandLMultiplicativeExpressionParserRuleCall_1_1_0; }
	}
	public class OpAddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpAdd");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//OpAdd:
		//	'+' | '-';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}
	public class LMultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LMultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLUnaryOperationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cGroup_1_0.eContents().get(0);
		private final Action cLBinaryOperationLeftOperandAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_0_1 = (Assignment)cGroup_1_0_0.eContents().get(1);
		private final RuleCall cFeatureOpMultiParserRuleCall_1_0_0_1_0 = (RuleCall)cFeatureAssignment_1_0_0_1.eContents().get(0);
		private final Assignment cRightOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightOperandLUnaryOperationParserRuleCall_1_1_0 = (RuleCall)cRightOperandAssignment_1_1.eContents().get(0);
		
		//LMultiplicativeExpression LExpression:
		//	LUnaryOperation (=> ({LBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=LUnaryOperation)*
		@Override public ParserRule getRule() { return rule; }
		
		//LUnaryOperation (=> ({LBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=LUnaryOperation)*
		public Group getGroup() { return cGroup; }
		
		//LUnaryOperation
		public RuleCall getLUnaryOperationParserRuleCall_0() { return cLUnaryOperationParserRuleCall_0; }
		
		//(=> ({LBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=LUnaryOperation)*
		public Group getGroup_1() { return cGroup_1; }
		
		//=> ({LBinaryOperation.leftOperand=current} feature=OpMulti)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//({LBinaryOperation.leftOperand=current} feature=OpMulti)
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{LBinaryOperation.leftOperand=current}
		public Action getLBinaryOperationLeftOperandAction_1_0_0_0() { return cLBinaryOperationLeftOperandAction_1_0_0_0; }
		
		//feature=OpMulti
		public Assignment getFeatureAssignment_1_0_0_1() { return cFeatureAssignment_1_0_0_1; }
		
		//OpMulti
		public RuleCall getFeatureOpMultiParserRuleCall_1_0_0_1_0() { return cFeatureOpMultiParserRuleCall_1_0_0_1_0; }
		
		//rightOperand=LUnaryOperation
		public Assignment getRightOperandAssignment_1_1() { return cRightOperandAssignment_1_1; }
		
		//LUnaryOperation
		public RuleCall getRightOperandLUnaryOperationParserRuleCall_1_1_0() { return cRightOperandLUnaryOperationParserRuleCall_1_1_0; }
	}
	public class OpMultiElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpMulti");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//OpMulti:
		//	'*' | '/' | '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}
	public class LUnaryOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LUnaryOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLUnaryOperationAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cFeatureAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFeatureOpUnaryParserRuleCall_0_1_0 = (RuleCall)cFeatureAssignment_0_1.eContents().get(0);
		private final Assignment cOperandAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperandLUnaryOperationParserRuleCall_0_2_0 = (RuleCall)cOperandAssignment_0_2.eContents().get(0);
		private final RuleCall cLPostfixOperationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LUnaryOperation LExpression:
		//	{LUnaryOperation} feature=OpUnary operand=LUnaryOperation | LPostfixOperation
		@Override public ParserRule getRule() { return rule; }
		
		//{LUnaryOperation} feature=OpUnary operand=LUnaryOperation | LPostfixOperation
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{LUnaryOperation} feature=OpUnary operand=LUnaryOperation
		public Group getGroup_0() { return cGroup_0; }
		
		//{LUnaryOperation}
		public Action getLUnaryOperationAction_0_0() { return cLUnaryOperationAction_0_0; }
		
		//feature=OpUnary
		public Assignment getFeatureAssignment_0_1() { return cFeatureAssignment_0_1; }
		
		//OpUnary
		public RuleCall getFeatureOpUnaryParserRuleCall_0_1_0() { return cFeatureOpUnaryParserRuleCall_0_1_0; }
		
		//operand=LUnaryOperation
		public Assignment getOperandAssignment_0_2() { return cOperandAssignment_0_2; }
		
		//LUnaryOperation
		public RuleCall getOperandLUnaryOperationParserRuleCall_0_2_0() { return cOperandLUnaryOperationParserRuleCall_0_2_0; }
		
		//LPostfixOperation
		public RuleCall getLPostfixOperationParserRuleCall_1() { return cLPostfixOperationParserRuleCall_1; }
	}
	public class OpUnaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpUnary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cTildeKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//OpUnary:
		//	'!' | '-' | '+' | '~';
		@Override public ParserRule getRule() { return rule; }
		
		//'!' | '-' | '+' | '~'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'+'
		public Keyword getPlusSignKeyword_2() { return cPlusSignKeyword_2; }
		
		//'~'
		public Keyword getTildeKeyword_3() { return cTildeKeyword_3; }
	}
	public class LPostfixOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LPostfixOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cLPostfixOperationOperandAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cFeatureAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cFeatureOpPostfixParserRuleCall_1_0_1_0 = (RuleCall)cFeatureAssignment_1_0_1.eContents().get(0);
		
		//LPostfixOperation LExpression:
		//	LPrimaryExpression => ({LPostfixOperation.operand=current} feature=OpPostfix)?
		@Override public ParserRule getRule() { return rule; }
		
		//LPrimaryExpression => ({LPostfixOperation.operand=current} feature=OpPostfix)?
		public Group getGroup() { return cGroup; }
		
		//LPrimaryExpression
		public RuleCall getLPrimaryExpressionParserRuleCall_0() { return cLPrimaryExpressionParserRuleCall_0; }
		
		//=> ({LPostfixOperation.operand=current} feature=OpPostfix)?
		public Group getGroup_1() { return cGroup_1; }
		
		//({LPostfixOperation.operand=current} feature=OpPostfix)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{LPostfixOperation.operand=current}
		public Action getLPostfixOperationOperandAction_1_0_0() { return cLPostfixOperationOperandAction_1_0_0; }
		
		//feature=OpPostfix
		public Assignment getFeatureAssignment_1_0_1() { return cFeatureAssignment_1_0_1; }
		
		//OpPostfix
		public RuleCall getFeatureOpPostfixParserRuleCall_1_0_1_0() { return cFeatureOpPostfixParserRuleCall_1_0_1_0; }
	}
	public class OpPostfixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.OpPostfix");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//// TODO is this supported?
		//OpPostfix:
		//	'++' | '--';
		@Override public ParserRule getRule() { return rule; }
		
		//'++' | '--'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }
		
		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}
	public class LPrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LPrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLengthCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAlignCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSizeofCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cAtCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLNumberLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cLParenthesizedExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLVariableParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//LPrimaryExpression LExpression:
		//	LengthCall | AlignCall | SizeofCall | AtCall | LNumberLiteral | LParenthesizedExpression | LVariable
		@Override public ParserRule getRule() { return rule; }
		
		//LengthCall | AlignCall | SizeofCall | AtCall | LNumberLiteral | LParenthesizedExpression | LVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LengthCall
		public RuleCall getLengthCallParserRuleCall_0() { return cLengthCallParserRuleCall_0; }
		
		//AlignCall
		public RuleCall getAlignCallParserRuleCall_1() { return cAlignCallParserRuleCall_1; }
		
		//SizeofCall
		public RuleCall getSizeofCallParserRuleCall_2() { return cSizeofCallParserRuleCall_2; }
		
		//AtCall
		public RuleCall getAtCallParserRuleCall_3() { return cAtCallParserRuleCall_3; }
		
		//LNumberLiteral
		public RuleCall getLNumberLiteralParserRuleCall_4() { return cLNumberLiteralParserRuleCall_4; }
		
		//LParenthesizedExpression
		public RuleCall getLParenthesizedExpressionParserRuleCall_5() { return cLParenthesizedExpressionParserRuleCall_5; }
		
		//LVariable
		public RuleCall getLVariableParserRuleCall_6() { return cLVariableParserRuleCall_6; }
	}
	public class LVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureValidIDParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		
		//LVariable LExpression:
		//	{LVariable} feature=ValidID
		@Override public ParserRule getRule() { return rule; }
		
		//{LVariable} feature=ValidID
		public Group getGroup() { return cGroup; }
		
		//{LVariable}
		public Action getLVariableAction_0() { return cLVariableAction_0; }
		
		//feature=ValidID
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//ValidID
		public RuleCall getFeatureValidIDParserRuleCall_1_0() { return cFeatureValidIDParserRuleCall_1_0; }
	}
	public class LParenthesizedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LParenthesizedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLExpressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//LParenthesizedExpression LExpression:
		//	'(' LExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//'(' LExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//LExpression
		public RuleCall getLExpressionParserRuleCall_1() { return cLExpressionParserRuleCall_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class LengthCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LengthCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLengthCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLENGTHKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMemoryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMemoryValidIDParserRuleCall_3_0 = (RuleCall)cMemoryAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//LengthCall LExpression:
		//	{LengthCall} 'LENGTH' '(' memory=ValidID ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{LengthCall} 'LENGTH' '(' memory=ValidID ')'
		public Group getGroup() { return cGroup; }
		
		//{LengthCall}
		public Action getLengthCallAction_0() { return cLengthCallAction_0; }
		
		//'LENGTH'
		public Keyword getLENGTHKeyword_1() { return cLENGTHKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//memory=ValidID
		public Assignment getMemoryAssignment_3() { return cMemoryAssignment_3; }
		
		//ValidID
		public RuleCall getMemoryValidIDParserRuleCall_3_0() { return cMemoryValidIDParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AlignCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.AlignCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAlignCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cALIGNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpOrAlignAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpOrAlignLExpressionParserRuleCall_3_0 = (RuleCall)cExpOrAlignAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAlignAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cAlignLExpressionParserRuleCall_4_1_0 = (RuleCall)cAlignAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AlignCall LExpression:
		//	{AlignCall} 'ALIGN' '(' expOrAlign=LExpression (',' align=LExpression)? ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{AlignCall} 'ALIGN' '(' expOrAlign=LExpression (',' align=LExpression)? ')'
		public Group getGroup() { return cGroup; }
		
		//{AlignCall}
		public Action getAlignCallAction_0() { return cAlignCallAction_0; }
		
		//'ALIGN'
		public Keyword getALIGNKeyword_1() { return cALIGNKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expOrAlign=LExpression
		public Assignment getExpOrAlignAssignment_3() { return cExpOrAlignAssignment_3; }
		
		//LExpression
		public RuleCall getExpOrAlignLExpressionParserRuleCall_3_0() { return cExpOrAlignLExpressionParserRuleCall_3_0; }
		
		//(',' align=LExpression)?
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//align=LExpression
		public Assignment getAlignAssignment_4_1() { return cAlignAssignment_4_1; }
		
		//LExpression
		public RuleCall getAlignLExpressionParserRuleCall_4_1_0() { return cAlignLExpressionParserRuleCall_4_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class SizeofCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.SizeofCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSizeofCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSIZEOFKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SizeofCall LExpression:
		//	{SizeofCall} 'SIZEOF' '(' name=ValidID ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{SizeofCall} 'SIZEOF' '(' name=ValidID ')'
		public Group getGroup() { return cGroup; }
		
		//{SizeofCall}
		public Action getSizeofCallAction_0() { return cSizeofCallAction_0; }
		
		//'SIZEOF'
		public Keyword getSIZEOFKeyword_1() { return cSIZEOFKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class AtCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.AtCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAtCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cATKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpLExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * XXX: This is a hack to make grammar simpler, there is no general AT function,
		// * this rule exists as a LPrimaryExpression to make Phdr simpler.
		// * / AtCall LExpression:
		//	{AtCall} 'AT' '(' exp=LExpression ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{AtCall} 'AT' '(' exp=LExpression ')'
		public Group getGroup() { return cGroup; }
		
		//{AtCall}
		public Action getAtCallAction_0() { return cAtCallAction_0; }
		
		//'AT'
		public Keyword getATKeyword_1() { return cATKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//exp=LExpression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }
		
		//LExpression
		public RuleCall getExpLExpressionParserRuleCall_3_0() { return cExpLExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LFeatureCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LFeatureCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLFeatureCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFeatureValidFuncParserRuleCall_1_0 = (RuleCall)cFeatureAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExplicitOperationCallAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cExplicitOperationCallLeftParenthesisKeyword_2_0_0 = (Keyword)cExplicitOperationCallAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFeatureCallArgumentsLExpressionParserRuleCall_2_1_0_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cFeatureCallArgumentsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cFeatureCallArgumentsLExpressionParserRuleCall_2_1_1_1_0 = (RuleCall)cFeatureCallArgumentsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//LFeatureCall LExpression:
		//	{LFeatureCall} feature=ValidFunc (=> explicitOperationCall?='(' (featureCallArguments+=LExpression (','
		//	featureCallArguments+=LExpression)*)? ')')?
		@Override public ParserRule getRule() { return rule; }
		
		//{LFeatureCall} feature=ValidFunc (=> explicitOperationCall?='(' (featureCallArguments+=LExpression (','
		//featureCallArguments+=LExpression)*)? ')')?
		public Group getGroup() { return cGroup; }
		
		//{LFeatureCall}
		public Action getLFeatureCallAction_0() { return cLFeatureCallAction_0; }
		
		//feature=ValidFunc
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//ValidFunc
		public RuleCall getFeatureValidFuncParserRuleCall_1_0() { return cFeatureValidFuncParserRuleCall_1_0; }
		
		//(=> explicitOperationCall?='(' (featureCallArguments+=LExpression (',' featureCallArguments+=LExpression)*)? ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//=> explicitOperationCall?='('
		public Assignment getExplicitOperationCallAssignment_2_0() { return cExplicitOperationCallAssignment_2_0; }
		
		//'('
		public Keyword getExplicitOperationCallLeftParenthesisKeyword_2_0_0() { return cExplicitOperationCallLeftParenthesisKeyword_2_0_0; }
		
		//(featureCallArguments+=LExpression (',' featureCallArguments+=LExpression)*)?
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//featureCallArguments+=LExpression
		public Assignment getFeatureCallArgumentsAssignment_2_1_0() { return cFeatureCallArgumentsAssignment_2_1_0; }
		
		//LExpression
		public RuleCall getFeatureCallArgumentsLExpressionParserRuleCall_2_1_0_0() { return cFeatureCallArgumentsLExpressionParserRuleCall_2_1_0_0; }
		
		//(',' featureCallArguments+=LExpression)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_1_0() { return cCommaKeyword_2_1_1_0; }
		
		//featureCallArguments+=LExpression
		public Assignment getFeatureCallArgumentsAssignment_2_1_1_1() { return cFeatureCallArgumentsAssignment_2_1_1_1; }
		
		//LExpression
		public RuleCall getFeatureCallArgumentsLExpressionParserRuleCall_2_1_1_1_0() { return cFeatureCallArgumentsLExpressionParserRuleCall_2_1_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class LNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.LNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//LNumberLiteral LExpression:
		//	{LNumberLiteral} value=Number
		@Override public ParserRule getRule() { return rule; }
		
		//{LNumberLiteral} value=Number
		public Group getGroup() { return cGroup; }
		
		//{LNumberLiteral}
		public Action getLNumberLiteralAction_0() { return cLNumberLiteralAction_0; }
		
		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}
	public class ValidIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.ValidID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Keyword cMEMORYKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cOKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cOrgKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cLKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLenKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//// TODO: what is full set of ValidIDs? Probably everything that is an ID but not a ValidFunc
		//// TODO: Rename this to ExpressionID
		//ValidID hidden():
		//	ID | 'MEMORY' | 'o' | 'org' | 'l' | 'len';
		@Override public ParserRule getRule() { return rule; }
		
		//ID | 'MEMORY' | 'o' | 'org' | 'l' | 'len'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//'MEMORY'
		public Keyword getMEMORYKeyword_1() { return cMEMORYKeyword_1; }
		
		//'o'
		public Keyword getOKeyword_2() { return cOKeyword_2; }
		
		//'org'
		public Keyword getOrgKeyword_3() { return cOrgKeyword_3; }
		
		//'l'
		public Keyword getLKeyword_4() { return cLKeyword_4; }
		
		//'len'
		public Keyword getLenKeyword_5() { return cLenKeyword_5; }
	}
	public class WildIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.WildID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// TODO: This is still horribly wrong, WildID can start with digits for example
		//// TODO: Rename this to FilenameID
		//WildID hidden():
		//	'*'
		//	| ValidID;
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | ValidID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//ValidID
		public RuleCall getValidIDParserRuleCall_1() { return cValidIDParserRuleCall_1; }
	}
	public class ValidFuncElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.ValidFunc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLENGTHKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cALIGNKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ValidFunc:
		//	'LENGTH' | 'ALIGN';
		@Override public ParserRule getRule() { return rule; }
		
		//'LENGTH' | 'ALIGN'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'LENGTH'
		public Keyword getLENGTHKeyword_0() { return cLENGTHKeyword_0; }
		
		//'ALIGN'
		public Keyword getALIGNKeyword_1() { return cALIGNKeyword_1; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDECTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEXTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// *
		// * XXX: GNU ld does not warn/error on overflow, illegal chars in numbers, etc. The value converter for this rule does however.
		// * / Number ecore::ELongObject hidden():
		//	DEC | HEX
		@Override public ParserRule getRule() { return rule; }
		
		//DEC | HEX
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DEC
		public RuleCall getDECTerminalRuleCall_0() { return cDECTerminalRuleCall_0; }
		
		//HEX
		public RuleCall getHEXTerminalRuleCall_1() { return cHEXTerminalRuleCall_1; }
	}
	
	
	private final LinkerScriptElements pLinkerScript;
	private final LinkerScriptStatementElements pLinkerScriptStatement;
	private final StatementCommandElements pStatementCommand;
	private final FileListElements pFileList;
	private final FileListNameElements pFileListName;
	private final PhdrsCommandElements pPhdrsCommand;
	private final PhdrElements pPhdr;
	private final SectionsCommandElements pSectionsCommand;
	private final OutputSectionCommandElements pOutputSectionCommand;
	private final OutputSectionElements pOutputSection;
	private final OutputSectionAlignElements pOutputSectionAlign;
	private final OutputSectionConstraintElements pOutputSectionConstraint;
	private final OutputSectionTypeElements pOutputSectionType;
	private final StatementElements pStatement;
	private final StatementAnywhereElements pStatementAnywhere;
	private final StatementDataSizeElements pStatementDataSize;
	private final AssignmentElements pAssignment;
	private final AssignmentRuleElements pAssignmentRule;
	private final OpAssignElements pOpAssign;
	private final InputSectionElements pInputSection;
	private final InputSectionFlagsElements pInputSectionFlags;
	private final WildcardElements pWildcard;
	private final WildcardRuleElements pWildcardRule;
	private final SORT_BY_NAMEElements pSORT_BY_NAME;
	private final MemoryCommandElements pMemoryCommand;
	private final MemoryElements pMemory;
	private final MemoryNameElements pMemoryName;
	private final MemoryAttributeElements pMemoryAttribute;
	private final LExpressionElements pLExpression;
	private final LTernaryElements pLTernary;
	private final LOrExpressionElements pLOrExpression;
	private final OpOrElements pOpOr;
	private final LAndExpressionElements pLAndExpression;
	private final OpAndElements pOpAnd;
	private final LBitwiseOrExpressionElements pLBitwiseOrExpression;
	private final OpBitwiseOrElements pOpBitwiseOr;
	private final LBitwiseAndExpressionElements pLBitwiseAndExpression;
	private final OpBitwiseAndElements pOpBitwiseAnd;
	private final LEqualityExpressionElements pLEqualityExpression;
	private final OpEqualityElements pOpEquality;
	private final LRelationalExpressionElements pLRelationalExpression;
	private final OpCompareElements pOpCompare;
	private final LOtherOperatorExpressionElements pLOtherOperatorExpression;
	private final OpOtherElements pOpOther;
	private final LAdditiveExpressionElements pLAdditiveExpression;
	private final OpAddElements pOpAdd;
	private final LMultiplicativeExpressionElements pLMultiplicativeExpression;
	private final OpMultiElements pOpMulti;
	private final LUnaryOperationElements pLUnaryOperation;
	private final OpUnaryElements pOpUnary;
	private final LPostfixOperationElements pLPostfixOperation;
	private final OpPostfixElements pOpPostfix;
	private final LPrimaryExpressionElements pLPrimaryExpression;
	private final LVariableElements pLVariable;
	private final LParenthesizedExpressionElements pLParenthesizedExpression;
	private final LengthCallElements pLengthCall;
	private final AlignCallElements pAlignCall;
	private final SizeofCallElements pSizeofCall;
	private final AtCallElements pAtCall;
	private final LFeatureCallElements pLFeatureCall;
	private final LNumberLiteralElements pLNumberLiteral;
	private final ValidIDElements pValidID;
	private final WildIDElements pWildID;
	private final ValidFuncElements pValidFunc;
	private final NumberElements pNumber;
	private final TerminalRule tDEC;
	private final TerminalRule tHEX;
	private final TerminalRule tID;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public LinkerScriptGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pLinkerScript = new LinkerScriptElements();
		this.pLinkerScriptStatement = new LinkerScriptStatementElements();
		this.pStatementCommand = new StatementCommandElements();
		this.pFileList = new FileListElements();
		this.pFileListName = new FileListNameElements();
		this.pPhdrsCommand = new PhdrsCommandElements();
		this.pPhdr = new PhdrElements();
		this.pSectionsCommand = new SectionsCommandElements();
		this.pOutputSectionCommand = new OutputSectionCommandElements();
		this.pOutputSection = new OutputSectionElements();
		this.pOutputSectionAlign = new OutputSectionAlignElements();
		this.pOutputSectionConstraint = new OutputSectionConstraintElements();
		this.pOutputSectionType = new OutputSectionTypeElements();
		this.pStatement = new StatementElements();
		this.pStatementAnywhere = new StatementAnywhereElements();
		this.pStatementDataSize = new StatementDataSizeElements();
		this.pAssignment = new AssignmentElements();
		this.pAssignmentRule = new AssignmentRuleElements();
		this.pOpAssign = new OpAssignElements();
		this.pInputSection = new InputSectionElements();
		this.pInputSectionFlags = new InputSectionFlagsElements();
		this.pWildcard = new WildcardElements();
		this.pWildcardRule = new WildcardRuleElements();
		this.pSORT_BY_NAME = new SORT_BY_NAMEElements();
		this.pMemoryCommand = new MemoryCommandElements();
		this.pMemory = new MemoryElements();
		this.pMemoryName = new MemoryNameElements();
		this.pMemoryAttribute = new MemoryAttributeElements();
		this.pLExpression = new LExpressionElements();
		this.pLTernary = new LTernaryElements();
		this.pLOrExpression = new LOrExpressionElements();
		this.pOpOr = new OpOrElements();
		this.pLAndExpression = new LAndExpressionElements();
		this.pOpAnd = new OpAndElements();
		this.pLBitwiseOrExpression = new LBitwiseOrExpressionElements();
		this.pOpBitwiseOr = new OpBitwiseOrElements();
		this.pLBitwiseAndExpression = new LBitwiseAndExpressionElements();
		this.pOpBitwiseAnd = new OpBitwiseAndElements();
		this.pLEqualityExpression = new LEqualityExpressionElements();
		this.pOpEquality = new OpEqualityElements();
		this.pLRelationalExpression = new LRelationalExpressionElements();
		this.pOpCompare = new OpCompareElements();
		this.pLOtherOperatorExpression = new LOtherOperatorExpressionElements();
		this.pOpOther = new OpOtherElements();
		this.pLAdditiveExpression = new LAdditiveExpressionElements();
		this.pOpAdd = new OpAddElements();
		this.pLMultiplicativeExpression = new LMultiplicativeExpressionElements();
		this.pOpMulti = new OpMultiElements();
		this.pLUnaryOperation = new LUnaryOperationElements();
		this.pOpUnary = new OpUnaryElements();
		this.pLPostfixOperation = new LPostfixOperationElements();
		this.pOpPostfix = new OpPostfixElements();
		this.pLPrimaryExpression = new LPrimaryExpressionElements();
		this.pLVariable = new LVariableElements();
		this.pLParenthesizedExpression = new LParenthesizedExpressionElements();
		this.pLengthCall = new LengthCallElements();
		this.pAlignCall = new AlignCallElements();
		this.pSizeofCall = new SizeofCallElements();
		this.pAtCall = new AtCallElements();
		this.pLFeatureCall = new LFeatureCallElements();
		this.pLNumberLiteral = new LNumberLiteralElements();
		this.pValidID = new ValidIDElements();
		this.pWildID = new WildIDElements();
		this.pValidFunc = new ValidFuncElements();
		this.pNumber = new NumberElements();
		this.tDEC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.DEC");
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.HEX");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.ID");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.ML_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.cdt.linkerscript.LinkerScript.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.cdt.linkerscript.LinkerScript".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	/// *
	// * Big TOOD list:
	// * Semantic highlight of keywords used as ID: https://blogs.itemis.com/en/xtext-hint-identifiers-conflicting-with-keywords
	// * INCLUDE does not actually parse nested INPUT, but ctrl-click on INCLUDE file would be nice
	// *
	// * Multi-page editor things:
	// *
	// * - Layout of memories needs revisiting - it does not grow properly,
	// *   or is too small, sometimes if table control too big no vertical
	// *   scroll bar on form page
	// * - Layout of memories does not fill width of editor
	// * - Need test for changing the file outside of the editor while
	// *   editor is open and separate test for when dirty
	// * - Icon on each row of memory view
	// * - Check selecting multiple rows UX
	// *
	// * Serializer:
	// *
	// * - The serializer can omit whitespace sometimes. For example you can get:
	// *    MEMORY { RAM : ORIGIN = 0, LENGTH = 0ROM : ORIGIN 1, LENGTH = 1 }
	// *   in the output
	// * / LinkerScript:
	//	statements+=LinkerScriptStatement*;
	public LinkerScriptElements getLinkerScriptAccess() {
		return pLinkerScript;
	}
	
	public ParserRule getLinkerScriptRule() {
		return getLinkerScriptAccess().getRule();
	}
	
	/// **
	//	 * TODO: Handle VERSION statements,
	// * XXX: There is some legacy stuff that GNU ld supports in the language, but actually
	// * ignores, sometimes silently, sometimes with a warning. We simply don't support those statements. (e.g. HLL, SYSLIB, FLOAT, NOFLOAT,
	// * / LinkerScriptStatement:
	//	MemoryCommand
	//	| SectionsCommand
	//	| PhdrsCommand
	//	| StatementCommand;
	public LinkerScriptStatementElements getLinkerScriptStatementAccess() {
		return pLinkerScriptStatement;
	}
	
	public ParserRule getLinkerScriptStatementRule() {
		return getLinkerScriptStatementAccess().getRule();
	}
	
	//StatementCommand Statement:
	//	{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementStartup} 'STARTUP' '(' name=WildID ')'
	//	| {StatementEntry} 'ENTRY' '(' name=ValidID ')'
	//	| {StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
	//	| {StatementTarget} 'TARGET' '(' name=ValidID ')'
	//	| {StatementSearchDir} 'SEARCH_DIR' '(' name=ValidID ')'
	//	| {StatementOutput} 'OUTPUT' '(' name=ValidID ')'
	//	| {StatementOutputFormat} 'OUTPUT_FORMAT' '(' name=ValidID (',' big=ValidID ',' little=ValidID)? ')'
	//	| {StatementOutputArch} 'OUTPUT_ARCH' '(' name=ValidID ')'
	//	| {StatementForceCommonAllocation} 'FORCE_COMMON_ALLOCATION'
	//	| {StatementInhibitCommonAllocation} 'INHIBIT_COMMON_ALLOCATION'
	//	| {StatementInput} 'INPUT' '(' list=FileList ')'
	//	| {StatementGroup} 'GROUP' '(' files+=FileListName (','? files+=FileListName)* ')'
	//	| {StatementMap} 'MAP' '(' name=ValidID ')'
	//	| {StatementNoCrossRefs} 'NOCROSSREFS' '(' sections+=ValidID* ')'
	//	| {StatementNoCrossRefsTo} 'NOCROSSREFS_TO' '(' sections+=ValidID* ')'
	//	| {StatementExtern} 'EXTERN' '(' sections+=ValidID* ')'
	//	| {StatementInclude} 'INCLUDE' name=ValidID
	//	| {StatementNop} ';'
	public StatementCommandElements getStatementCommandAccess() {
		return pStatementCommand;
	}
	
	public ParserRule getStatementCommandRule() {
		return getStatementCommandAccess().getRule();
	}
	
	//FileList:
	//	files+=FileListName (','? files+=FileListName)*
	//	| asNeeded?='AS_NEEDED' '(' list=FileList ')';
	public FileListElements getFileListAccess() {
		return pFileList;
	}
	
	public ParserRule getFileListRule() {
		return getFileListAccess().getRule();
	}
	
	//FileListName hidden():
	//	library?='-l'? name=ValidID;
	public FileListNameElements getFileListNameAccess() {
		return pFileListName;
	}
	
	public ParserRule getFileListNameRule() {
		return getFileListNameAccess().getRule();
	}
	
	//PhdrsCommand:
	//	{PhdrsCommand} 'PHDRS' '{' phdrs+=Phdr* '}';
	public PhdrsCommandElements getPhdrsCommandAccess() {
		return pPhdrsCommand;
	}
	
	public ParserRule getPhdrsCommandRule() {
		return getPhdrsCommandAccess().getRule();
	}
	
	/// * TODO There is secondary validation on what is allowed
	//	 * as opts here.
	// * XXX: This relies on AtCall being an LExpression
	// * / Phdr:
	//	name=ValidID opts+=LExpression* ';';
	public PhdrElements getPhdrAccess() {
		return pPhdr;
	}
	
	public ParserRule getPhdrRule() {
		return getPhdrAccess().getRule();
	}
	
	//SectionsCommand:
	//	'SECTIONS' '{' {SectionsCommand} sectionCommands+=OutputSectionCommand*
	//	'}';
	public SectionsCommandElements getSectionsCommandAccess() {
		return pSectionsCommand;
	}
	
	public ParserRule getSectionsCommandRule() {
		return getSectionsCommandAccess().getRule();
	}
	
	//OutputSectionCommand:
	//	OutputSection
	//	| StatementAnywhere;
	public OutputSectionCommandElements getOutputSectionCommandAccess() {
		return pOutputSectionCommand;
	}
	
	public ParserRule getOutputSectionCommandRule() {
		return getOutputSectionCommandAccess().getRule();
	}
	
	//OutputSection:
	//	name=ValidID address=LExpression? ('(' type=OutputSectionType ')')? ':' ('AT' '(' at=LExpression ')')?
	//	align=OutputSectionAlign? ('SUBALIGN' '(' subAlign=LExpression ')')?
	//	constraint=OutputSectionConstraint?
	//	'{'
	//	statements+=Statement*
	//	'}' ('>' memory=ValidID)? ('AT' '>' atMemory=ValidID)? (':' phdrs+=ValidID)* ('=' fill=LExpression)?
	//	','?;
	public OutputSectionElements getOutputSectionAccess() {
		return pOutputSection;
	}
	
	public ParserRule getOutputSectionRule() {
		return getOutputSectionAccess().getRule();
	}
	
	//OutputSectionAlign:
	//	{OutputSectionAlignExpression} 'ALIGN' '(' exp=LExpression ')'
	//	| {OutputSectionAlignWithInput} 'ALIGN_WITH_INPUT';
	public OutputSectionAlignElements getOutputSectionAlignAccess() {
		return pOutputSectionAlign;
	}
	
	public ParserRule getOutputSectionAlignRule() {
		return getOutputSectionAlignAccess().getRule();
	}
	
	//OutputSectionConstraint:
	//	{OutputSectionConstraintOnlyIfRO} 'ONLY_IF_RO'
	//	| {OutputSectionConstraintOnlyIfRW} 'ONLY_IF_RW'
	//	| {OutputSectionConstraintSpecial} 'SPECIAL';
	public OutputSectionConstraintElements getOutputSectionConstraintAccess() {
		return pOutputSectionConstraint;
	}
	
	public ParserRule getOutputSectionConstraintRule() {
		return getOutputSectionConstraintAccess().getRule();
	}
	
	//OutputSectionType:
	//	{OutputSectionTypeNoLoad} 'NOLOAD'
	//	| {OutputSectionTypeDSect} 'DSECT'
	//	| {OutputSectionTypeCopy} 'COPY'
	//	| {OutputSectionTypeInfo} 'INFO'
	//	| {OutputSectionTypeOverlay} 'OVERLAY';
	public OutputSectionTypeElements getOutputSectionTypeAccess() {
		return pOutputSectionType;
	}
	
	public ParserRule getOutputSectionTypeRule() {
		return getOutputSectionTypeAccess().getRule();
	}
	
	//Statement:
	//	{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementCreateObjectSymbols} 'CREATE_OBJECT_SYMBOLS'
	//	| {StatementConstructors} 'CONSTRUCTORS'
	//	| {StatementConstructorsSorted} 'SORT_BY_NAME' '(' 'CONSTRUCTORS' ')'
	//	| {StatementData} size=StatementDataSize '(' data=LExpression ')'
	//	| {StatementFill} 'FILL' '(' fill=LExpression ')'
	//	| {StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
	//	| {StatementInclude} 'INCLUDE' filename=WildID
	//	| {StatementInputSection} spec=InputSection
	//	| {StatementNop} ';' // TODO don't create object for lone ;
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//StatementAnywhere Statement:
	//	{StatementAssignment} assignment=AssignmentRule (',' | ';') | {StatementEntry} 'ENTRY' '(' name=ValidID ')'
	//	| {StatementAssert} 'ASSERT' '(' exp=LExpression ',' message=ValidID ')'
	//	| {StatementNop} ';'
	public StatementAnywhereElements getStatementAnywhereAccess() {
		return pStatementAnywhere;
	}
	
	public ParserRule getStatementAnywhereRule() {
		return getStatementAnywhereAccess().getRule();
	}
	
	//StatementDataSize:
	//	'BYTE' | 'SHORT' | 'LONG' | 'QUAD' | 'SQUAD';
	public StatementDataSizeElements getStatementDataSizeAccess() {
		return pStatementDataSize;
	}
	
	public ParserRule getStatementDataSizeRule() {
		return getStatementDataSizeAccess().getRule();
	}
	
	//Assignment:
	//	name=WildID feature=OpAssign exp=LExpression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//AssignmentRule Assignment:
	//	{Assignment} name=WildID feature=OpAssign exp=LExpression
	//	| {AssignmentHidden} 'HIDDEN' '(' name=WildID feature='=' exp=LExpression ')'
	//	| {AssignmentProvide} 'PROVIDE' '(' name=WildID feature='=' exp=LExpression ')'
	//	| {AssignmentProvideHidden} 'PROVIDE_HIDDEN' '(' name=WildID feature='=' exp=LExpression ')'
	public AssignmentRuleElements getAssignmentRuleAccess() {
		return pAssignmentRule;
	}
	
	public ParserRule getAssignmentRuleRule() {
		return getAssignmentRuleAccess().getRule();
	}
	
	//OpAssign:
	//	'=' | '+=' | '-=' | '*=' | '/=' | '<' '<' '=' | '>' '>=' | '&=' | '|=';
	public OpAssignElements getOpAssignAccess() {
		return pOpAssign;
	}
	
	public ParserRule getOpAssignRule() {
		return getOpAssignAccess().getRule();
	}
	
	//InputSection:
	//	{InputSectionFile} ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? file=WildID
	//	| {InputSectionWild} ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? wildFile=WildcardRule '('
	//	sections+=WildcardRule (','? sections+=WildcardRule)* ')'
	//	| {InputSectionFile} keep?='KEEP' '(' ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')? file=WildID
	//	')'
	//	| {InputSectionWild} keep?='KEEP' '(' ('INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')')?
	//	wildFile=WildcardRule '(' sections+=WildcardRule (','? sections+=WildcardRule)* ')' ')';
	public InputSectionElements getInputSectionAccess() {
		return pInputSection;
	}
	
	public ParserRule getInputSectionRule() {
		return getInputSectionAccess().getRule();
	}
	
	//// TODO: Need to handle inverted flags ('!')
	//InputSectionFlags:
	//	'INPUT_SECTION_FLAGS' '(' flags+=WildID ('&' flags+=WildID)* ')';
	public InputSectionFlagsElements getInputSectionFlagsAccess() {
		return pInputSectionFlags;
	}
	
	public ParserRule getInputSectionFlagsRule() {
		return getInputSectionFlagsAccess().getRule();
	}
	
	//// This is a dummy rule that serves solely to define the model element
	//Wildcard:
	//	{Wildcard} name=ValidID excludes+=ValidID;
	public WildcardElements getWildcardAccess() {
		return pWildcard;
	}
	
	public ParserRule getWildcardRule() {
		return getWildcardAccess().getRule();
	}
	
	//WildcardRule Wildcard:
	//	{WildcardSortNone} name=WildID
	//	| {WildcardSortNone} 'EXCLUDE_FILE' '(' excludes+=WildID+ ')' name=WildID
	//	| {WildcardSortName} SORT_BY_NAME '(' name=WildID ')'
	//	| {WildcardSortAlign} 'SORT_BY_ALIGNMENT' '(' name=WildID ')'
	//	| {WildcardSortNone} 'SORT_NONE' '(' name=WildID ')'
	//	| {WildcardSortNameAlign} SORT_BY_NAME '(' 'SORT_BY_ALIGNMENT' '(' name=WildID ')' ')'
	//	| {WildcardSortName} SORT_BY_NAME '(' SORT_BY_NAME '(' name=WildID ')' ')'
	//	| {WildcardSortAlignName} 'SORT_BY_ALIGNMENT' '(' SORT_BY_NAME '(' name=WildID ')' ')'
	//	| {WildcardSortAlign} 'SORT_BY_ALIGNMENT' '(' 'SORT_BY_ALIGNMENT' '(' name=WildID ')' ')'
	//	| {WildcardSortName} SORT_BY_NAME '(' 'EXCLUDE_FILE' '(' excludes+=WildID+ ')' name=WildID ')'
	//	| {WildcardSortInitPriority} 'SORT_BY_INIT_PRIORITY' '(' name=WildID ')'
	public WildcardRuleElements getWildcardRuleAccess() {
		return pWildcardRule;
	}
	
	public ParserRule getWildcardRuleRule() {
		return getWildcardRuleAccess().getRule();
	}
	
	//SORT_BY_NAME:
	//	'SORT' | 'SORT_BY_NAME';
	public SORT_BY_NAMEElements getSORT_BY_NAMEAccess() {
		return pSORT_BY_NAME;
	}
	
	public ParserRule getSORT_BY_NAMERule() {
		return getSORT_BY_NAMEAccess().getRule();
	}
	
	////
	////ExcludeNameList:
	////	{SectionNameList} names+=WildID (','? names+=WildID)*;
	//MemoryCommand:
	//	'MEMORY' '{' {MemoryCommand} memories+=Memory* '}';
	public MemoryCommandElements getMemoryCommandAccess() {
		return pMemoryCommand;
	}
	
	public ParserRule getMemoryCommandRule() {
		return getMemoryCommandAccess().getRule();
	}
	
	//Memory:
	//	name=MemoryName attr=MemoryAttribute? ':' ('ORIGIN' | 'org' | 'o') '=' origin=LExpression ',' ('LENGTH' | 'len' | 'l')
	//	'=' length=LExpression;
	public MemoryElements getMemoryAccess() {
		return pMemory;
	}
	
	public ParserRule getMemoryRule() {
		return getMemoryAccess().getRule();
	}
	
	//MemoryName:
	//	ValidID;
	public MemoryNameElements getMemoryNameAccess() {
		return pMemoryName;
	}
	
	public ParserRule getMemoryNameRule() {
		return getMemoryNameAccess().getRule();
	}
	
	//MemoryAttribute:
	//	'(' ('!'? WildID)+ ')';
	public MemoryAttributeElements getMemoryAttributeAccess() {
		return pMemoryAttribute;
	}
	
	public ParserRule getMemoryAttributeRule() {
		return getMemoryAttributeAccess().getRule();
	}
	
	/// *
	// * GNU LD Operator precedence: https://sourceware.org/binutils/docs/ld/Operators.html#Operators
	// * Note that grammar rules from LExpression start at lowest precedence and end at highest
	// * / LExpression:
	//	LTernary;
	public LExpressionElements getLExpressionAccess() {
		return pLExpression;
	}
	
	public ParserRule getLExpressionRule() {
		return getLExpressionAccess().getRule();
	}
	
	//LTernary LExpression:
	//	LOrExpression (=> ({LTernaryOperation.condition=current} '?' ifPart=LOrExpression ':') thenPart=LOrExpression)?
	public LTernaryElements getLTernaryAccess() {
		return pLTernary;
	}
	
	public ParserRule getLTernaryRule() {
		return getLTernaryAccess().getRule();
	}
	
	//LOrExpression LExpression:
	//	LAndExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpOr) rightOperand=LAndExpression)*
	public LOrExpressionElements getLOrExpressionAccess() {
		return pLOrExpression;
	}
	
	public ParserRule getLOrExpressionRule() {
		return getLOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public OpOrElements getOpOrAccess() {
		return pOpOr;
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//LAndExpression LExpression:
	//	LBitwiseOrExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=LBitwiseOrExpression)*
	public LAndExpressionElements getLAndExpressionAccess() {
		return pLAndExpression;
	}
	
	public ParserRule getLAndExpressionRule() {
		return getLAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public OpAndElements getOpAndAccess() {
		return pOpAnd;
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//LBitwiseOrExpression LExpression:
	//	LBitwiseAndExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseOr)
	//	rightOperand=LBitwiseAndExpression)*
	public LBitwiseOrExpressionElements getLBitwiseOrExpressionAccess() {
		return pLBitwiseOrExpression;
	}
	
	public ParserRule getLBitwiseOrExpressionRule() {
		return getLBitwiseOrExpressionAccess().getRule();
	}
	
	//OpBitwiseOr:
	//	'|';
	public OpBitwiseOrElements getOpBitwiseOrAccess() {
		return pOpBitwiseOr;
	}
	
	public ParserRule getOpBitwiseOrRule() {
		return getOpBitwiseOrAccess().getRule();
	}
	
	//LBitwiseAndExpression LExpression:
	//	LEqualityExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpBitwiseAnd)
	//	rightOperand=LEqualityExpression)*
	public LBitwiseAndExpressionElements getLBitwiseAndExpressionAccess() {
		return pLBitwiseAndExpression;
	}
	
	public ParserRule getLBitwiseAndExpressionRule() {
		return getLBitwiseAndExpressionAccess().getRule();
	}
	
	//OpBitwiseAnd:
	//	'&';
	public OpBitwiseAndElements getOpBitwiseAndAccess() {
		return pOpBitwiseAnd;
	}
	
	public ParserRule getOpBitwiseAndRule() {
		return getOpBitwiseAndAccess().getRule();
	}
	
	//LEqualityExpression LExpression:
	//	LRelationalExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpEquality)
	//	rightOperand=LRelationalExpression)*
	public LEqualityExpressionElements getLEqualityExpressionAccess() {
		return pLEqualityExpression;
	}
	
	public ParserRule getLEqualityExpressionRule() {
		return getLEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=';
	public OpEqualityElements getOpEqualityAccess() {
		return pOpEquality;
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//LRelationalExpression LExpression:
	//	LOtherOperatorExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpCompare)
	//	rightOperand=LOtherOperatorExpression)*
	public LRelationalExpressionElements getLRelationalExpressionAccess() {
		return pLRelationalExpression;
	}
	
	public ParserRule getLRelationalExpressionRule() {
		return getLRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public OpCompareElements getOpCompareAccess() {
		return pOpCompare;
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//LOtherOperatorExpression LExpression:
	//	LAdditiveExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpOther) rightOperand=LAdditiveExpression)*
	public LOtherOperatorExpressionElements getLOtherOperatorExpressionAccess() {
		return pLOtherOperatorExpression;
	}
	
	public ParserRule getLOtherOperatorExpressionRule() {
		return getLOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'>' => '>' | '<' => '<';
	public OpOtherElements getOpOtherAccess() {
		return pOpOther;
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//LAdditiveExpression LExpression:
	//	LMultiplicativeExpression (=> ({LBinaryOperation.leftOperand=current} feature=OpAdd)
	//	rightOperand=LMultiplicativeExpression)*
	public LAdditiveExpressionElements getLAdditiveExpressionAccess() {
		return pLAdditiveExpression;
	}
	
	public ParserRule getLAdditiveExpressionRule() {
		return getLAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public OpAddElements getOpAddAccess() {
		return pOpAdd;
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//LMultiplicativeExpression LExpression:
	//	LUnaryOperation (=> ({LBinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=LUnaryOperation)*
	public LMultiplicativeExpressionElements getLMultiplicativeExpressionAccess() {
		return pLMultiplicativeExpression;
	}
	
	public ParserRule getLMultiplicativeExpressionRule() {
		return getLMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '/' | '%';
	public OpMultiElements getOpMultiAccess() {
		return pOpMulti;
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//LUnaryOperation LExpression:
	//	{LUnaryOperation} feature=OpUnary operand=LUnaryOperation | LPostfixOperation
	public LUnaryOperationElements getLUnaryOperationAccess() {
		return pLUnaryOperation;
	}
	
	public ParserRule getLUnaryOperationRule() {
		return getLUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	'!' | '-' | '+' | '~';
	public OpUnaryElements getOpUnaryAccess() {
		return pOpUnary;
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//LPostfixOperation LExpression:
	//	LPrimaryExpression => ({LPostfixOperation.operand=current} feature=OpPostfix)?
	public LPostfixOperationElements getLPostfixOperationAccess() {
		return pLPostfixOperation;
	}
	
	public ParserRule getLPostfixOperationRule() {
		return getLPostfixOperationAccess().getRule();
	}
	
	//// TODO is this supported?
	//OpPostfix:
	//	'++' | '--';
	public OpPostfixElements getOpPostfixAccess() {
		return pOpPostfix;
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//LPrimaryExpression LExpression:
	//	LengthCall | AlignCall | SizeofCall | AtCall | LNumberLiteral | LParenthesizedExpression | LVariable
	public LPrimaryExpressionElements getLPrimaryExpressionAccess() {
		return pLPrimaryExpression;
	}
	
	public ParserRule getLPrimaryExpressionRule() {
		return getLPrimaryExpressionAccess().getRule();
	}
	
	//LVariable LExpression:
	//	{LVariable} feature=ValidID
	public LVariableElements getLVariableAccess() {
		return pLVariable;
	}
	
	public ParserRule getLVariableRule() {
		return getLVariableAccess().getRule();
	}
	
	//LParenthesizedExpression LExpression:
	//	'(' LExpression ')'
	public LParenthesizedExpressionElements getLParenthesizedExpressionAccess() {
		return pLParenthesizedExpression;
	}
	
	public ParserRule getLParenthesizedExpressionRule() {
		return getLParenthesizedExpressionAccess().getRule();
	}
	
	//LengthCall LExpression:
	//	{LengthCall} 'LENGTH' '(' memory=ValidID ')'
	public LengthCallElements getLengthCallAccess() {
		return pLengthCall;
	}
	
	public ParserRule getLengthCallRule() {
		return getLengthCallAccess().getRule();
	}
	
	//AlignCall LExpression:
	//	{AlignCall} 'ALIGN' '(' expOrAlign=LExpression (',' align=LExpression)? ')'
	public AlignCallElements getAlignCallAccess() {
		return pAlignCall;
	}
	
	public ParserRule getAlignCallRule() {
		return getAlignCallAccess().getRule();
	}
	
	//SizeofCall LExpression:
	//	{SizeofCall} 'SIZEOF' '(' name=ValidID ')'
	public SizeofCallElements getSizeofCallAccess() {
		return pSizeofCall;
	}
	
	public ParserRule getSizeofCallRule() {
		return getSizeofCallAccess().getRule();
	}
	
	/// * XXX: This is a hack to make grammar simpler, there is no general AT function,
	// * this rule exists as a LPrimaryExpression to make Phdr simpler.
	// * / AtCall LExpression:
	//	{AtCall} 'AT' '(' exp=LExpression ')'
	public AtCallElements getAtCallAccess() {
		return pAtCall;
	}
	
	public ParserRule getAtCallRule() {
		return getAtCallAccess().getRule();
	}
	
	//LFeatureCall LExpression:
	//	{LFeatureCall} feature=ValidFunc (=> explicitOperationCall?='(' (featureCallArguments+=LExpression (','
	//	featureCallArguments+=LExpression)*)? ')')?
	public LFeatureCallElements getLFeatureCallAccess() {
		return pLFeatureCall;
	}
	
	public ParserRule getLFeatureCallRule() {
		return getLFeatureCallAccess().getRule();
	}
	
	//LNumberLiteral LExpression:
	//	{LNumberLiteral} value=Number
	public LNumberLiteralElements getLNumberLiteralAccess() {
		return pLNumberLiteral;
	}
	
	public ParserRule getLNumberLiteralRule() {
		return getLNumberLiteralAccess().getRule();
	}
	
	//// TODO: what is full set of ValidIDs? Probably everything that is an ID but not a ValidFunc
	//// TODO: Rename this to ExpressionID
	//ValidID hidden():
	//	ID | 'MEMORY' | 'o' | 'org' | 'l' | 'len';
	public ValidIDElements getValidIDAccess() {
		return pValidID;
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//// TODO: This is still horribly wrong, WildID can start with digits for example
	//// TODO: Rename this to FilenameID
	//WildID hidden():
	//	'*'
	//	| ValidID;
	public WildIDElements getWildIDAccess() {
		return pWildID;
	}
	
	public ParserRule getWildIDRule() {
		return getWildIDAccess().getRule();
	}
	
	//ValidFunc:
	//	'LENGTH' | 'ALIGN';
	public ValidFuncElements getValidFuncAccess() {
		return pValidFunc;
	}
	
	public ParserRule getValidFuncRule() {
		return getValidFuncAccess().getRule();
	}
	
	/// *
	// * XXX: GNU ld does not warn/error on overflow, illegal chars in numbers, etc. The value converter for this rule does however.
	// * / Number ecore::ELongObject hidden():
	//	DEC | HEX
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//terminal DEC returns ecore::ELongObject:
	//	'0'..'9'+ ('d' | 'D' | 'o' | 'O' | 'b' | 'B' | 'm' | 'M' | 'k' | 'K')?;
	public TerminalRule getDECRule() {
		return tDEC;
	}
	
	//terminal HEX returns ecore::ELongObject:
	//	('$' | '0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F')+ ('m' | 'M' | 'k' | 'K')? | ('0'..'9' | 'a'..'f' | 'A'..'F')+
	//	('d' | 'D' | 'o' | 'O' | 'b' | 'B' | 'x' | 'X' | 'h' | 'H');
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '.' | '/' | '\\' | '$' | '_' | '~' | '?' | '^' | '!') ('a'..'z' | 'A'..'Z' | '.' | '/' | '\\' |
	//	'$' | '_' | '~' | '*' | '?' | '^' | '!' | '0'..'9' | '-' | '+' | ':' | '[' |
	//	']')*
	//	| '*'
	//	| '"'->'"';
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
